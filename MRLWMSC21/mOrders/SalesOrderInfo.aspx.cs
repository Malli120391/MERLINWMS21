using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Text;
using System.Data.SqlClient;
using MRLWMSC21Common;
using System.Data;
using System.Web.Security;
using System.Security.Principal;
using System.Globalization;
using System.Web.Services;
using Newtonsoft.Json;

namespace MRLWMSC21.mOrders
{

    //This class for genereting Sale Order
    //Created by GVD Prasad
    //created on 3/10/2013
    //Lost modified on 25/10/2013
    //Use case ID : Work order_UC_010

    public partial class SalesOrderInfo : System.Web.UI.Page
    {

        LinkButton button;

        public CustomPrincipal cp = HttpContext.Current.User as CustomPrincipal;
        public static CustomPrincipal cp1 = HttpContext.Current.User as CustomPrincipal;
        public static string SOID;
        protected void page_PreInit(object sender, EventArgs e)
        {
            Page.Theme = "Orders";
        }

        protected void page_Init(object sender, EventArgs e)
        {
            // AddDynamicColumns();
        }

        protected void Page_Load(object sender, EventArgs e)
        {
            cp = HttpContext.Current.User as CustomPrincipal;
            //string parameter = Request["__EVENTARGUMENT"];
            //if (parameter == "param1")
            //    MyButton_Click(sender, e);
            string parameter = Request["__EVENTARGUMENT"];
            if (parameter == "customerDetails")
                lnkGetCustomerDetails_Click(sender, e);


            DesignLogic.SetInnerPageSubHeading(this.Page, "Sales Order Details");

            Page.Validate();

            //if (!cp.IsInAnyRoles(CommonLogic.GetRolesAllowed(CommonLogic.GetRolesAllowedForthisPage("New Sales Order"))))
            //{
            //    Response.Redirect("../Login.aspx?eid=6");
            //}
            if (!IsPostBack)
            {

                txtTenant.Enabled = CommonLogic.CheckSuperAdmin(txtTenant, cp, hifTenant);

                ViewState["HeaderID"] = 0;

                try
                {
                    //Get configure prifix value this cp
                    IDataReader ConfigReader = DB.GetRS("EXEC sp_SYS_GetSystemConfigValue @SysConfigKey=N'salesorder.aspx.cs.SONumberAutoGenerated',@TenantID=" + cp.TenantID);
                    ConfigReader.Read();
                    Boolean autogenerate = Convert.ToBoolean(ConfigReader[0]);
                    ConfigReader.Close();
                    if (!autogenerate)
                    {
                        txtSOCode.Enabled = true;
                        IbtnNew.Visible = false;
                        txtSoDate.Focus();

                    }
                    else
                    {
                        txtSOCode.Enabled = false;
                        IbtnNew.Visible = false;
                        IbtnNew.Focus();
                    }

                }
                catch (Exception ex)
                {
                    CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
                    txtSOCode.Enabled = true;
                    IbtnNew.Visible = false;
                }
                if (CommonLogic.QueryString("soid") != "")
                {
                    //<!Procedure Conversion-------------------->
                    // string query = "select * from OBD_Outbound_ORD_CustomerPO where SOHeaderID=" + CommonLogic.QueryString("soid");
                    string query = "Exec [dbo].[USP_CheckOBDbySO] @SOHeaderID=" + CommonLogic.QueryString("soid");
                    SOID = CommonLogic.QueryString("soid");
                    DataSet ds = DB.GetDS(query, false);
                    if (ds.Tables[0].Rows.Count != 0)
                    {
                        lnkAddNewCusPO.Enabled = false;
                        //lbutNewItem.Enabled = false; ============ CommentedBy M.D.Prasad ON 30-Dec-2019 ==================
                    }
                    else
                    {
                        lnkAddNewCusPO.Enabled = true;
                        // lbutNewItem.Enabled = true; ============ CommentedBy M.D.Prasad ON 30-Dec-2019 ==================
                    }
                    //<!Procedure Conversion-------------------->
                    // string _query = "select * from OBD_Outbound_ORD_CustomerPO where SOHeaderID=" + CommonLogic.QueryString("soid");
                    string _query = "Exec [dbo].[USP_CheckOBDbySO] @SOHeaderID=" + CommonLogic.QueryString("soid");
                    DataSet _ds = DB.GetDS(query, false);
                    if (_ds.Tables[0].Rows.Count != 0)
                    {
                        //ltPOStatus.Text = "On Process";
                        //string _Query = ("UPDATE ORD_SOHeader SET SOStatusID=2 WHERE SOStatusID=1 AND SOHeaderID=" + CommonLogic.QueryString("soid"));
                        string _Query = ("Exec [dbo].[USP_UpsertSOStatus] @SOHeaderID=" + CommonLogic.QueryString("soid"));
                        DataSet _Ds = DB.GetDS(_Query, false);
                    }
                    else
                    {
                        // ltPOStatus.Text = DB.RSField(FormReader, "StatusName");
                    }



                    //show the lineItems space And customerpo detaisl
                    tdCusPODet.Visible = true;
                    tdSOLineItems.Visible = true;
                    lnkAddNewCusPO.Visible = true;
                    BuildFormData();
                    //SOQuantityList_BuildGridData(SOQuantityList_BuildGridData());
                    //CustmerPoList_BuildGridView(CustmerPoList_BuildGridView());
                    lnkUpdate.Text = "Save" + CommonLogic.btnfaUpdate;
                    lnkClear.Visible = false;

                    //if (CommonLogic.QueryString("success") == "true")
                    //    resetError("Successfully Saved", false);
                }
                else
                {
                    //Hide the lineItems space And customerpo detaisl
                    tdCusPODet.Visible = false;
                    tdSOLineItems.Visible = false;
                    lbutNewItem.Visible = false;
                    dvSearch.Visible = false;
                    lnksearch.Visible = false;
                    // ltsearch.Visible = false;
                    lnkCancel.Visible = false;
                    lnkClose.Enabled = false;
                    pnlgvSoDetails.Visible = false;
                    lnkUpdate.Text = "Save " + CommonLogic.btnfaSave;
                    //Get Tenant Details
                    //IDataReader rsTanentDetails = DB.GetRS("select GC.Code,GCM.CountryMasterID,GC.Currency,GCM.CountryName,GC.CurrencyID,GCM.CountryCode from TPL_Tenant TT join TPL_Tenant_AddressBook TTAB on TT.TenantID=TTAB.TenantID and TTAB.IsActive=1 and TTAB.IsDeleted=0 and TTAB.AddressBookTypeID=2 and TT.TenantID=" + hifTenant.Value + " JOIN GEN_Currency GC ON GC.CurrencyID=TTAB.CurrencyID JOIN GEN_CountryMaster GCM ON GCM.CountryMasterID=TTAB.CountryMasterID");
                    IDataReader rsTanentDetails = DB.GetRS("Exec [dbo].[USP_SOTenantdetails] @TenantID=" + hifTenant.Value);

                    if (rsTanentDetails.Read())
                    {

                        hifCountryMaster.Value = "" + DB.RSFieldInt(rsTanentDetails, "CountryMasterID");

                        //txtCountyMaster.Text =  DB.RSField(rsTanentDetails, "CountryName");

                        hifCurrency.Value = "" + DB.RSFieldInt(rsTanentDetails, "CurrencyID");

                        txtlCurrency.Text = DB.RSField(rsTanentDetails, "Code") + "-" + DB.RSField(rsTanentDetails, "Currency");
                    }
                    chkIsActive.Checked = true;

                    rsTanentDetails.Close();
                }
            }
        }

        private DataSet SOQuantityList_BuildGridData()
        {
            //Get list of PoLineItems
            cp = HttpContext.Current.User as CustomPrincipal;
            DataSet dsSOitemList = null;

            String sql = ViewState["GetSOitemList"].ToString();
            try
            {
                dsSOitemList = DB.GetDS(sql, false);
            }
            catch (Exception ex)
            {
                resetError("Error while loading", true);
                CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
            }
            return dsSOitemList;

        }

        //Build SOHeader Deatils
        private void BuildFormData()
        {
            cp = HttpContext.Current.User as CustomPrincipal;
            try
            {

                String details = CommonLogic.QueryString("soid");

                IDataReader FormReader = DB.GetRS("EXEC dbo.sp_ORD_SOHeaderDetails @AccountID_New=" + cp.AccountID + " , @SOHeaderID=" + details);
                if (!FormReader.Read())
                {
                    dvSearch.Visible = false;
                    lnksearch.Visible = false;
                    // ltsearch.Visible = false;
                    pnlgvSoDetails.Visible = false;
                    resetError("No details available", true);
                    FormReader.Close();
                    return;
                }

                txtCustomname.Text = DB.RSField(FormReader, "CustomerName");
                hifCustomerName.Value = "" + DB.RSFieldInt(FormReader, "CustomerID");
                txtProjectCode.Text = DB.RSField(FormReader, "ProjectCode");
                txtDiscount.Text = DB.RSFieldInt(FormReader, "Discount").ToString();

                txtBAddress1.Text = DB.RSField(FormReader, "ShipmentAddress1");

                txtBAddress2.Text = DB.RSField(FormReader, "ShipmentAddress2");

                // txtareaRemarks.Text = row[""].ToString();

                txtBCity.Text = DB.RSField(FormReader, "City");

                txtBCountyMaster.Text = DB.RSField(FormReader, "CountryName");

                txtBState.Text = DB.RSField(FormReader, "Province");

                txtBZip.Text = DB.RSField(FormReader, "Zip");

                txtBPhoneNo.Text = DB.RSField(FormReader, "Mobile");

                hifCountryMaster.Value = "" + DB.RSFieldInt(FormReader, "CountryMasterID");
                txtTenant.Text = DB.RSField(FormReader, "TenantName");
                hifTenant.Value = "" + DB.RSFieldInt(FormReader, "TenantID");
                txtFreightCompany.Text = DB.RSField(FormReader, "FreightCompany");
                hifFreightCompany.Value = "" + DB.RSFieldInt(FormReader, "FreightCompanyID");
                txtlCurrency.Text = DB.RSField(FormReader, "Currency");
                hifCurrency.Value = "" + DB.RSFieldInt(FormReader, "CurrencyID");
                // added by Meena
                hdnaddresstypeid.Value = "" + DB.RSFieldInt(FormReader, "GEN_MST_Address_ID");
                txtRemarks.Text = "" + DB.RSField(FormReader, "Remarks");
                //end

                //txtPhoneNo.Text = DB.RSField(FormReader, "Mobile");
                txtRequirementNumber.Text = DB.RSField(FormReader, "RequirementNumber");
                txtShipmentCharges.Text = eliminateZero(DB.RSFieldDecimal(FormReader, "ShipmentCharges"));
                txtSOCode.Text = DB.RSField(FormReader, "SONumber");
                txtSoDate.Text = DB.RSFieldDateTime(FormReader, "SODate").ToString("dd-MMM-yyyy");
                txtDeliverydate.Text = DB.RSFieldDateTime(FormReader, "DeliveryDueDate").ToString("dd-MMM-yyyy");
                ltPOStatus.Text = DB.RSField(FormReader, "StatusName");

                //string query = "select * from OBD_Outbound_ORD_CustomerPO where SOHeaderID=" + CommonLogic.QueryString("soid");
                //DataSet ds = DB.GetDS(query, false);
                //if (ds.Tables[0].Rows.Count != 0)
                //{
                //    //ltPOStatus.Text = "On Process";
                //    string _query = ("UPDATE ORD_SOHeader SET SOStatusID=2 WHERE SOStatusID=1 AND SOHeaderID=" + CommonLogic.QueryString("soid"));
                //    DataSet _ds =DB.GetDS(_query, false);
                //}
                //else
                //{
                //    ltPOStatus.Text = DB.RSField(FormReader, "StatusName");
                //}
                if (DB.RSFieldInt(FormReader, "IsReceived") == 1)
                {
                    //lnkCancel.Visible = false;
                }

                if (DB.RSFieldInt(FormReader, "SOStatusID") != 1 && DB.RSFieldInt(FormReader, "SOStatusID") != 2)
                {
                    gvCustPODetails.Enabled = false;
                    gvSODetails.Enabled = false;
                    lnkAddNewCusPO.Enabled = false;
                    lbutNewItem.Enabled = false;
                    lnkCancel.Visible = false;
                    lnkClose.Enabled = false;
                    lnkUpdate.Enabled = false;
                }

                txtSOType.Text = DB.RSField(FormReader, "SOType");
                hifSOType.Value = "" + DB.RSFieldInt(FormReader, "SOTypeID");

                //txtState.Text = DB.RSField(FormReader, "Province");
                //txtZip.Text = DB.RSField(FormReader,"Zip");

                chkIsActive.Checked = DB.RSFieldBool(FormReader, "IsActive");
                // txtZip.Text = row[""].ToString();
                ViewState["HeaderID"] = CommonLogic.QueryString("soid");
                //chkaddress.Checked = false;

                // atcDepartment.Text = DB.RSField(FormReader,"Department");
                // hifDeparment.Value = DB.RSFieldInt(FormReader, "DepartmentID").ToString();

                // atcDivision.Text = DB.RSField(FormReader, "DIvision");
                // hifDivision.Value = DB.RSFieldInt(FormReader, "DivisionID").ToString();

                txtSOTax.Text = eliminateZero(DB.RSFieldDecimal(FormReader, "SOTax"));
                txtGrossValue.Text = eliminateZero(DB.RSFieldDecimal(FormReader, "GrossValue"));
                txtNetValue.Text = eliminateZero(DB.RSFieldDecimal(FormReader, "NetValue"));


                ViewState["GetSOitemList"] = "EXEC  [dbo].[sp_ORD_SODetailsList] @SOHeaderID=" + ViewState["HeaderID"].ToString() + ",@MCode=''";
                SOQuantityList_BuildGridData(SOQuantityList_BuildGridData());

                ViewState["CustomerPOListCommand"] = "dbo.sp_ORD_CustomerPOList @SOHeaderID=" + ViewState["HeaderID"].ToString();
                CustmerPoList_BuildGridView(CustmerPoList_BuildGridView());

                FormReader.Close();

                if (gvCustPODetails.Rows.Count != 0 || gvSODetails.Rows.Count != 0)
                {
                    txtCustomname.Enabled = false;
                    txtTenant.Enabled = false;
                }
                else
                {
                    txtCustomname.Enabled = true;
                    txtTenant.Enabled = true;
                }

                txtSOCode.Enabled = false;
                IbtnNew.Visible = false;
                //Page.ClientScript.RegisterStartupScript(this.GetType(), "OpenPDFScript", "BuildUserAddress();", true);


                if (gvSODetails.Rows.Count == 0)
                {

                    dvSearch.Visible = false;
                    lnksearch.Visible = false;
                    //ltsearch.Visible = false;
                    pnlgvSoDetails.Visible = false;
                }
                //SetCustomerAddress();
                //SetCustomerBillingAddress();

            }
            catch (Exception ex)
            {
                CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
            }
        }

        private String eliminateZero(Decimal Value)
        {
            return (Value != 0 ? Value.ToString() : "");
        }

        //Build Line Items
        private void SOQuantityList_BuildGridData(DataSet ds)
        {
            gvSODetails.DataSource = ds.Tables[0];
            gvSODetails.DataBind();
            if (gvSODetails.Rows.Count > 0)
            {
                gvSODetails.ShowFooter = true;
                gvSODetails.Columns[5].Visible = true;

            }
            else
            {
                gvSODetails.ShowFooter = false;
                gvSODetails.Columns[5].Visible = false;

            }
            ds.Dispose();
        }

        #region
        // Not Use
        protected void gvSODetails_DataBinding(object sender, EventArgs e)
        {



        }

        //Check wheather lineitem is Child or not in this
        //======================== Added By M.D.Prasad On 30-Dec-2019 =======================//
        protected void gvSODetails_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            if (e.Row.RowType == DataControlRowType.DataRow && (e.Row.RowState == DataControlRowState.Normal || e.Row.RowState == DataControlRowState.Alternate))
            {
                DataRow row = ((DataRowView)e.Row.DataItem).Row;
                Boolean Check = Convert.ToBoolean(row["IsKitParent"]);
                String IsInOutbount = row["IsInOutbound"].ToString();
                String IsInJob = row["IsInJob"].ToString();
                string checkOBDStatus = row["CheckOBDStatus"].ToString();
                if (checkOBDStatus == "") { checkOBDStatus = "0"; }
                if (Check == false || Convert.ToInt32(checkOBDStatus) > 1)
                {
                    int columnCount = e.Row.Controls.Count;
                    try
                    {
                        e.Row.FindControl("chkDelete1").Visible = false;// Added By M.D.Prasad ON 19-Dec-2019
                    }
                    catch (Exception ex)
                    {
                        CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
                    }
                    e.Row.Controls[columnCount - 1].Controls[0].Visible = false;

                }
                if (Convert.ToInt32(checkOBDStatus) > 1)
                {
                    lbutNewItem.Enabled = false;
                }
                else {
                    lbutNewItem.Enabled = true;
                }
                if (Check == false)
                {

                    int columnCount = e.Row.Controls.Count;
                    try
                    {
                        e.Row.Controls[22].Controls[1].Visible = false;
                        e.Row.Controls[23].Controls[1].Visible = false;
                    }
                    catch (Exception ex)
                    {
                        CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
                    }
                    e.Row.Controls[columnCount - 1].Controls[0].Visible = false;
                }
            }
            if (e.Row.RowType == DataControlRowType.DataRow && e.Row.RowIndex == gvSODetails.EditIndex)
            {

                gvSODetails.ShowFooter = true;
                gvSODetails.Columns[22].Visible = true;

                DataRow row = ((DataRowView)e.Row.DataItem).Row;
                String IsInOutbount = row["IsInOutbound"].ToString();
                String IsInJob = row["IsInJob"].ToString();
                string checkOBDStatus = row["CheckOBDStatus"].ToString();
                if (checkOBDStatus == "") { checkOBDStatus = "0"; }
                if (Convert.ToInt32(checkOBDStatus) > 1)
                {
                    try
                    {

                        ((TextBox)e.Row.FindControl("atcEditMCode")).Enabled = false;
                        ((TextBox)e.Row.FindControl("atcSUoMID")).Enabled = false;
                        ((TextBox)e.Row.FindControl("atcKitPlanner")).Enabled = false;
                        ((TextBox)e.Row.FindControl("txtQuantity")).Enabled = false;
                        ((TextBox)e.Row.FindControl("txtPrice")).Enabled = false;
                        ((TextBox)e.Row.FindControl("atcCustPONumber")).Enabled = false;
                        ((TextBox)e.Row.FindControl("atcCustPOUoM")).Enabled = false;
                        ((TextBox)e.Row.FindControl("txtCustPOQuantity")).Enabled = false;
                        lbutNewItem.Enabled = false;
                    }
                    catch (Exception ex)
                    {
                        CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
                    }
                }

                if (Convert.ToInt32(checkOBDStatus) > 1)
                {
                    lbutNewItem.Enabled = false;
                }
                else
                {
                    lbutNewItem.Enabled = true;
                }

                // Storage Location DropDown Begins
                string DropDownId = "1";
                DropDownList ddlStorageLocationID = (DropDownList)e.Row.FindControl("ddlStorageLocationID");
                String CustomerID = Request.Form[hifCustomerName.UniqueID];
                DataSet dsperiodicity = GetStorageLocations();
                ddlStorageLocationID.DataSource = dsperiodicity.Tables[0];
                ddlStorageLocationID.DataTextField = "Code";
                ddlStorageLocationID.DataValueField = "Id";
                ddlStorageLocationID.DataBind();
                Literal ltrStorageLocationID = (Literal)e.Row.FindControl("ltStorageLocationID");
                DropDownId = ltrStorageLocationID.Text.ToString();

                if (DropDownId != null && DropDownId != "")
                {
                    ddlStorageLocationID.Items.FindByValue(DropDownId).Selected = true;
                }

                // Storage Location DropDown End

                string DropDownIdD = "1";

                DropDownList ddlDeliveryPoint = (DropDownList)e.Row.FindControl("ddlDeliveryPoint");
                DataSet dsdelivery = GetDeliveryPoint(CustomerID);
                ddlDeliveryPoint.DataSource = dsdelivery.Tables[0];
                ddlDeliveryPoint.DataTextField = "DeliveryPoint";
                ddlDeliveryPoint.DataValueField = "GEN_MST_Address_ID";
                ddlDeliveryPoint.DataBind();

                Literal ltrDeliveryPoint = (Literal)e.Row.FindControl("ltDeliveryPoint");
                DropDownIdD = ltrDeliveryPoint.Text.ToString();

                if (DropDownIdD != null && DropDownIdD != "")
                {
                    ddlDeliveryPoint.Items.FindByValue(DropDownIdD).Selected = true;
                }

            }
        }
        //======================== Added By M.D.Prasad On 30-Dec-2019 =======================//


        //======================== Commented By M.D.Prasad On 30-Dec-2019 =======================//
        //protected void gvSODetails_RowDataBound(object sender, GridViewRowEventArgs e)
        //{
        //    //if (e.Row.RowType == DataControlRowType.DataRow && !(e.Row.RowState == DataControlRowState.Edit))

        //    if (e.Row.RowType == DataControlRowType.DataRow && (e.Row.RowState == DataControlRowState.Normal || e.Row.RowState == DataControlRowState.Alternate))
        //    {
        //        DataRow row = ((DataRowView)e.Row.DataItem).Row;
        //        // Boolean Check = Convert.ToBoolean (row.Field<int>("IsKitParent"));
        //        Boolean Check = Convert.ToBoolean(row["IsKitParent"]);
        //        String IsInOutbount = row["IsInOutbound"].ToString();
        //        String IsInJob = row["IsInJob"].ToString();

        //        if (Check == false || IsInOutbount == "0")
        //        {
        //            int columnCount = e.Row.Controls.Count;
        //            try
        //            {
        //                //e.Row.FindControl("Delete").Visible = false;// Commented By M.D.Prasad ON 19-Dec-2019
        //                e.Row.FindControl("chkDelete1").Visible = false;// Added By M.D.Prasad ON 19-Dec-2019
        //            }
        //            catch (Exception ex)
        //            {
        //                CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
        //            }
        //            e.Row.Controls[columnCount - 1].Controls[0].Visible = false;
        //            // e.Row.Enabled = false;
        //            // gvSODetails.AutoGenerateEditButton = false;

        //        }
        //        if (IsInJob == "0")
        //        {
        //            try
        //            {
        //                e.Row.FindControl("Delete").Visible = false;
        //                //e.Row.FindControl("chkDelete1").Visible = false;
        //            }
        //            catch (Exception ex)
        //            {
        //                CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
        //            }
        //        }

        //        if (Check == false)
        //        {

        //            int columnCount = e.Row.Controls.Count;
        //            try
        //            {
        //                //e.Row.FindControl("Delete").Visible = false;
        //                e.Row.Controls[22].Controls[1].Visible = false;
        //                e.Row.Controls[23].Controls[1].Visible = false;
        //                //  GVPODetails.Columns[12].Visible = false;
        //            }
        //            catch (Exception ex)
        //            {
        //                CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
        //            }
        //            e.Row.Controls[columnCount - 1].Controls[0].Visible = false;
        //            //e.Row.Enabled = false;
        //        }

        //        //LinkButton lnkCPOEdit = (LinkButton)e.Row.FindControl("lnkCPOEdit");
        //        //LinkButton lntDeleteItems1 = (LinkButton)e.Row.FindControl("lntDeleteItems1");

        //        //string query = "select * from OBD_Outbound_ORD_CustomerPO where SOHeaderID=" + CommonLogic.QueryString("soid");
        //        //DataSet ds = DB.GetDS(query,false);
        //        //if (ds.Tables[0].Rows.Count != 0)
        //        //{
        //        //    lnkCPOEdit.Enabled = false;
        //        //    //lntDeleteItems1.Enabled = false;
        //        //}
        //        //else
        //        //{
        //        //    lnkCPOEdit.Enabled = true;
        //        //    lntDeleteItems1.Enabled = true;
        //        //}
        //    }
        //    //if (e.Row.RowType == DataControlRowType.DataRow && e.Row.RowState == DataControlRowState.Edit)
        //    if (e.Row.RowType == DataControlRowType.DataRow && e.Row.RowIndex == gvSODetails.EditIndex)
        //    {

        //        gvSODetails.ShowFooter = true;
        //        gvSODetails.Columns[22].Visible = true;

        //        DataRow row = ((DataRowView)e.Row.DataItem).Row;
        //        String IsInOutbount = row["IsInOutbound"].ToString();
        //        String IsInJob = row["IsInJob"].ToString();
        //        if (IsInJob == "0")
        //        {
        //            try
        //            {

        //                ((TextBox)e.Row.FindControl("atcEditMCode")).Enabled = false;
        //                ((TextBox)e.Row.FindControl("atcSUoMID")).Enabled = false;
        //                ((TextBox)e.Row.FindControl("atcKitPlanner")).Enabled = false;
        //                ((TextBox)e.Row.FindControl("txtQuantity")).Enabled = false;
        //                ((TextBox)e.Row.FindControl("txtPrice")).Enabled = false;
        //                ((TextBox)e.Row.FindControl("atcCustPONumber")).Enabled = false;
        //                ((TextBox)e.Row.FindControl("atcCustPOUoM")).Enabled = false;
        //                ((TextBox)e.Row.FindControl("txtCustPOQuantity")).Enabled = false;
        //            }
        //            catch (Exception ex)
        //            {
        //                CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
        //            }
        //        }

        //        // Storage Location DropDown Begins
        //        string DropDownId = "1";
        //        DropDownList ddlStorageLocationID = (DropDownList)e.Row.FindControl("ddlStorageLocationID");
        //        String CustomerID = Request.Form[hifCustomerName.UniqueID];
        //        DataSet dsperiodicity = GetStorageLocations();
        //        ddlStorageLocationID.DataSource = dsperiodicity.Tables[0];
        //        ddlStorageLocationID.DataTextField = "Code";
        //        ddlStorageLocationID.DataValueField = "Id";
        //        ddlStorageLocationID.DataBind();
        //        Literal ltrStorageLocationID = (Literal)e.Row.FindControl("ltStorageLocationID");
        //        DropDownId = ltrStorageLocationID.Text.ToString();

        //        if (DropDownId != null && DropDownId != "")
        //        {
        //            ddlStorageLocationID.Items.FindByValue(DropDownId).Selected = true;
        //        }

        //        // Storage Location DropDown End

        //        string DropDownIdD = "1";

        //        DropDownList ddlDeliveryPoint = (DropDownList)e.Row.FindControl("ddlDeliveryPoint");
        //        DataSet dsdelivery = GetDeliveryPoint(CustomerID);
        //        ddlDeliveryPoint.DataSource = dsdelivery.Tables[0];
        //        ddlDeliveryPoint.DataTextField = "DeliveryPoint";
        //        ddlDeliveryPoint.DataValueField = "GEN_MST_Address_ID";
        //        ddlDeliveryPoint.DataBind();

        //        Literal ltrDeliveryPoint = (Literal)e.Row.FindControl("ltDeliveryPoint");
        //        DropDownIdD = ltrDeliveryPoint.Text.ToString();

        //        if (DropDownIdD != null && DropDownIdD != "")
        //        {
        //            ddlDeliveryPoint.Items.FindByValue(DropDownIdD).Selected = true;
        //        }

        //    }
        //}
        //======================== Commented By M.D.Prasad On 30-Dec-2019 =======================//
        public DataSet GetStorageLocations()
        {
            DataSet ds = null;
            try
            {
                ds = DB.GetDS("Exec SP_INV_GET_STORAGELOCATION  ", false);

            }
            catch (Exception ex)
            {

            }
            return ds;
        }

        public DataSet GetDeliveryPoint(string CustomerID)
        {
            DataSet ds = null;
            try
            {
                //  ds = DB.GetDS(" SELECT MA.GEN_MST_Address_ID, DeliveryPoint FROM GEN_MST_EntityAddresses EA INNER JOIN GEN_MST_OrgEntities ORG ON EA.GEN_MST_OrgEntity_ID = ORG.GEN_MST_OrgEntity_ID AND ORG.GEN_MST_OrgEntity_ID = 2 AND ORG.IsActive = 1 AND ORG.IsDeleted = 0 AND EA.IsActive = 1 AND EA.IsDeleted = 0 INNER JOIN GEN_MST_Addresses MA ON MA.GEN_MST_Address_ID = EA.GEN_MST_Address_ID AND MA.IsActive = 1 AND MA.IsDeleted = 0 where MA.GEN_MST_AddressType_ID=2 AND EA.EntityID =" + DB.SQuote(CustomerID), false);
                ds = DB.GetDS(" Exec [dbo].[USP_GetDeliveryPointData] @EntityID=" + CustomerID, false);

            }
            catch (Exception ex)
            {

            }
            return ds;
        }

        //This Method for getting Edit mode
        //protected void gvSODetails_RowEditing(object sender, GridViewEditEventArgs e)
        protected void gvSODetails_RowEditing(object sender, EventArgs e)
        {

            //test case ID ()
            //Modify the line items
            if (gvCustPODetails.EditIndex == 0)
            {
                gvCustPODetails.EditIndex = -1;
                CustmerPoList_BuildGridView(CustmerPoList_BuildGridView());

            }
            int index = ((GridViewRow)(((LinkButton)sender).Parent.Parent)).RowIndex;
            gvSODetails.EditIndex = index;
            GridViewRow gvrEditRow = gvSODetails.Rows[index];
            ViewState["SOQuantitySql"] = "EXEC  [dbo].[sp_ORD_SODetailsList] @SOHeaderID=" + ViewState["HeaderID"].ToString() + ",@MCode=''";
            SOQuantityList_BuildGridData(SOQuantityList_BuildGridData());

            if (index < gvSODetails.Rows.Count)
            {
                gvrEditRow = gvSODetails.Rows[index];

                if (((TextBox)gvrEditRow.FindControl("atcEditMCode")).Enabled)
                    ((TextBox)gvrEditRow.FindControl("atcEditMCode")).Focus();
                else
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "test", "MSPConfifure(1);", true);

                //ltgridstatus.Text = "";
            }

        }

        //Update LineItems
        //protected void gvSODetails_RowUpdating(object sender, GridViewUpdateEventArgs e)
        protected void gvSODetails_RowUpdating(object sender, EventArgs e)
        {
            //test case ID (TC_098)
            //Update modification in the line Item
            int index = ((GridViewRow)(((Button)sender).Parent.Parent)).RowIndex;
            Page.Validate("UpdateSODetails");
            GridViewRow gvRow = gvSODetails.Rows[index];//[e.RowIndex];
            //if (!IsValid)
            //{
            //    //ScriptManager.RegisterStartupScript(this, this.GetType(), "test", "MSPConfifure(1);", false);
            //    ((TextBox)gvRow.FindControl("atcEditMCode")).Focus();
            //    return;
            //}
            //GridViewRow gvRow = gvSODetails.Rows[e.RowIndex];

            TextBox atcEditMCode = (TextBox)gvRow.FindControl("atcEditMCode");
            TextBox atcSUoMID = (TextBox)gvRow.FindControl("atcSUoMID");
            TextBox txtSoQuantity = (TextBox)gvRow.FindControl("txtQuantity");
            TextBox atcCustPONumber = (TextBox)gvRow.FindControl("atcCustPONumber");
            TextBox custUoMPicker = (TextBox)gvRow.FindControl("atcCustPOUoM");
            TextBox txtCustPOQty = (TextBox)gvRow.FindControl("txtCustPOQuantity");
            TextBox txtInvNo = (TextBox)gvRow.FindControl("txtInvoiceNo");
            TextBox txtInvdt = (TextBox)gvRow.FindControl("txtinvoiceDate");



            if (atcEditMCode.Text == "")
            {
                resetError("Please Select Part Number", true);
                atcEditMCode.Focus();
                return;
            }
            if (atcSUoMID.Text == "")
            {
                resetError("Please Select SO UoM/ Qty.", true);
                atcSUoMID.Focus();
                return;
            }
            if (txtSoQuantity.Text == "")
            {
                resetError("Please Enter SO Qty.", true);
                txtSoQuantity.Focus();
                return;
            }
            if (atcCustPONumber.Text == "")
            {
                resetError("Please Select Customer PO", true);
                atcCustPONumber.Focus();
                return;
            }
            if (custUoMPicker.Text == "")
            {
                resetError("Please Select Customer PO UoM/Qty.", true);
                custUoMPicker.Focus();
                return;
            }
            if (txtCustPOQty.Text == "")
            {
                resetError("Please Enter Customer PO Qty.", true);
                txtCustPOQty.Focus();
                return;
            }
            //if (txtInvNo.Text == "")
            //{
            //    resetError("Please Enter Invoice No.", true);
            //    txtInvNo.Focus();
            //    return;
            //}
            if (txtInvdt.Text == "")
            {
                resetError("Please Enter Invoice Date.", true);
                // txtInvdt.Focus();
                return;
            }

            if (gvRow != null)
            {
                StringBuilder sCmdUpdate = new StringBuilder();
                String Temperarevarialble = "";
                Literal ltDetailsID = (Literal)gvRow.FindControl("ltSODetailsIDEdit");
                Literal ltLineNumber = (Literal)gvRow.FindControl("ltlinenumberEdit");

                TextBox atcMCode = (TextBox)gvRow.FindControl("atcEditMCode");
                HiddenField hifmmid = (HiddenField)gvRow.FindControl("hifmmid");

                TextBox atcSUoM = (TextBox)gvRow.FindControl("atcSUoMID");
                HiddenField hifSUoMID = (HiddenField)gvRow.FindControl("hifUoMid");
                HiddenField hifKitPlanner = (HiddenField)gvRow.FindControl("hifKitPlanner");
                TextBox atcKitplanner = (TextBox)gvRow.FindControl("atcKitPlanner");

                TextBox txtQuantity = (TextBox)gvRow.FindControl("txtQuantity");
                TextBox txtPrice = (TextBox)gvRow.FindControl("txtPrice");

                TextBox txtCustPONumber = (TextBox)gvRow.FindControl("atcCustPONumber");
                HiddenField txtCustomPOID = (HiddenField)gvRow.FindControl("hifCustomPOId");
                TextBox atcCustPOUoM = (TextBox)gvRow.FindControl("atcCustPOUoM");
                HiddenField hifCustPOUoMID = (HiddenField)gvRow.FindControl("hifcustPoUoM");

                TextBox txtCustPOQuantity = (TextBox)gvRow.FindControl("txtCustPOQuantity");

                TextBox txtSODiscountInPercentage = (TextBox)gvRow.FindControl("txtSODiscountInPercentage");


                TextBox txtVATCode = (TextBox)gvRow.FindControl("txtVATCode");

                TextBox txtInvoiceNo = (TextBox)gvRow.FindControl("txtInvoiceNo");
                TextBox txtInvoiceDate = (TextBox)gvRow.FindControl("txtinvoiceDate");
                //TextBox atcCountrofOriginID = (TextBox)gvRow.FindControl("atcCountrofOriginID");
                HiddenField hifCountrofOriginID = (HiddenField)gvRow.FindControl("hifCountrofOriginID");
                DropDownList ddlStorageLocationID = (DropDownList)gvRow.FindControl("ddlStorageLocationID");
                DropDownList ddlDeliveryPoint = (DropDownList)gvRow.FindControl("ddlDeliveryPoint");
                TextBox txtmfgdate = (TextBox)gvRow.FindControl("txtmfgdate");
                TextBox txtexpdate = (TextBox)gvRow.FindControl("txtexpdate");
                TextBox txtserialno = (TextBox)gvRow.FindControl("txtserialno");
                TextBox txtbatchno = (TextBox)gvRow.FindControl("txtbatchno");
                TextBox txtrefno = (TextBox)gvRow.FindControl("txtrefno");
                TextBox txtMRP = (TextBox)gvRow.FindControl("txtMRP");
                atcMCode.Focus();
                // if ((DB.GetSqlN("select count(*) as N from OBD_Outbound_ORD_CustomerPO where SODetailsID=" + ltDetailsID.Text.ToString() + " and IsDeleted=0 and IsActive=1")) > 0)

                string checkStatus = DB.GetSqlS("SELECT CONVERT(NVARCHAR(50),OBD.DeliveryStatusID) as S from OBD_Outbound_ORD_CustomerPO CUSPO LEFT JOIN OBD_Outbound OBD ON OBD.OutboundID = CUSPO.OutboundID AND OBD.IsActive = 1 AND OBD.IsDeleted = 0"
                    + "WHERE CUSPO.SODetailsID = " + ltDetailsID.Text.ToString() + " AND CUSPO.IsDeleted = 0 and CUSPO.IsActive = 1");
                if (checkStatus == "") { checkStatus = "0"; }

                if(Convert.ToInt32(checkStatus) > 1)
                { 
                    resetgridError("Item already mapped to outbound cannot update", true);
                    gvSODetails.EditIndex = -1;
                    SOQuantityList_BuildGridData(SOQuantityList_BuildGridData());
                    return;
                }
                if (txtInvoiceNo.Text.Trim().Length > 0)
                {
                    String CheckInvoiceNo = "select TOP 1 1 AS N from OBD_Outbound_ORD_CustomerPO OBD_CUS JOIN OBD_Outbound OBD ON OBD.OutboundID=OBD_CUS.OutboundID WHERE OBD_CUS.IsDeleted=0 AND DeliveryStatusID>=4 AND LTRIM(RTRIM(InvoiceNo))='" + txtInvoiceNo.Text.Trim() + "' AND OBD_CUS.CustomerPOID=" + txtCustomPOID.Value;
                    if (DB.GetSqlN(CheckInvoiceNo) == 1)
                    {
                        resetgridError("Combination of invoice no. and customer PO already delivered, cannot update", true);
                        return;
                    }
                }
                if (Convert.ToDecimal(txtCustPOQuantity.Text) < Convert.ToDecimal(txtQuantity.Text))
                {
                    resetgridError("Customer PO quantity should be greater than or equal to SO quantity", true);
                    ((TextBox)gvRow.FindControl("atcEditMCode")).Focus();
                    return;
                }


                //try
                //{
                //    IDataReader GetShipmentreceive = DB.GetRS("[sp_ORD_GetMaterialReceivedOrNot] @SOHeaderID=" + ViewState["HeaderID"].ToString());
                //    if (GetShipmentreceive.Read())
                //    {

                //        gvSODetails.EditIndex = -1;
                //        ViewState["GetSOitemList"] = "EXEC  [dbo].[sp_ORD_SODetailsList] @SOHeaderID=" + ViewState["HeaderID"].ToString() + ",@MCode=''";

                //        SOQuantityList_BuildGridData(SOQuantityList_BuildGridData());
                //        resetgridError("Cannot edit, as the Sales Order is configured in outbound/job order", true);
                //        GetShipmentreceive.Close();
                //        return;
                //    }
                //    GetShipmentreceive.Close();

                //    int goodsmovementID = DB.GetSqlN("[sp_ORD_GetMaterialInGoodsOut] @SODetailsID=" + ltDetailsID.Text);
                //    if (goodsmovementID == 0 && ltDetailsID.Text != "0")
                //    {
                //        resetgridError("Cannot update, as the line item is picked", true);
                //        ((TextBox)gvRow.FindControl("atcEditMCode")).Focus();
                //        return;
                //    }


                //}
                //catch (Exception ex)
                //{
                //    resetgridError("Error while updating",true);
                //    ((TextBox)gvRow.FindControl("atcEditMCode")).Focus();
                //    CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
                //    return;
                //}

                if (txtmfgdate.Text != "" && txtexpdate.Text != "")
                {
                    if (Convert.ToDateTime(txtmfgdate.Text) > Convert.ToDateTime(txtexpdate.Text))
                    {
                        resetError("Exp Date Should be greater than Mfg Date", true);
                        //lblSerialNo.Style["display"] = "block";
                        return;
                    }

                }
                String MfgDate = null;
                if (txtmfgdate.Text.Trim() != "")
                    //InvoiceDate = DB.SQuote(CommonLogic.GetConfigValue(cp.TenantID, "DateFormat") == "dd/MM/yyyy" ? DateTime.ParseExact(txtInvoiceDate.Text.Trim(), "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("MM/dd/yyyy") : txtInvoiceDate.Text.Trim());

                    MfgDate = DB.SQuote(CommonLogic.GetConfigValue(Convert.ToInt16(hifTenant.Value), "DateFormat") == "dd-M-yyyy" ? DateTime.ParseExact(txtmfgdate.Text.Trim(), "dd-M-yyyy", CultureInfo.InvariantCulture).ToString("MM/dd/yyyy") : txtmfgdate.Text.Trim());
                else
                    MfgDate = "NULL";


                String ExpDate = null;
                if (txtexpdate.Text.Trim() != "")
                    //InvoiceDate = DB.SQuote(CommonLogic.GetConfigValue(cp.TenantID, "DateFormat") == "dd/MM/yyyy" ? DateTime.ParseExact(txtInvoiceDate.Text.Trim(), "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("MM/dd/yyyy") : txtInvoiceDate.Text.Trim());

                    ExpDate = DB.SQuote(CommonLogic.GetConfigValue(Convert.ToInt16(hifTenant.Value), "DateFormat") == "dd-M-yyyy" ? DateTime.ParseExact(txtexpdate.Text.Trim(), "dd-M-yyyy", CultureInfo.InvariantCulture).ToString("MM/dd/yyyy") : txtexpdate.Text.Trim());
                else
                    ExpDate = "NULL";


                sCmdUpdate.Append("EXEC dbo.sp_ORD_UpsertSODetails ");

                sCmdUpdate.Append("@SOHeaderID=" + ViewState["HeaderID"].ToString());
                sCmdUpdate.Append(",@SODetailsID=" + ltDetailsID.Text);
                sCmdUpdate.Append(",@LineNumber=" + ltLineNumber.Text);

                if (atcMCode.Text == "" || Request.Form[hifmmid.UniqueID] == "")
                {
                    resetgridError("Please select part number", true);
                    ((TextBox)gvRow.FindControl("atcEditMCode")).Focus();
                    return;
                }
                sCmdUpdate.Append(",@MaterialMasterID=" + Request.Form[hifmmid.UniqueID]);
                if (atcSUoM.Text == "" || Request.Form[hifSUoMID.UniqueID] == "")
                {
                    resetgridError("Please select WUoM", true);
                    ((TextBox)gvRow.FindControl("atcEditMCode")).Focus();
                    return;
                }
                //sCmdUpdate.Append(",@SUoMID=" + Request.Form[hifSUoMID.UniqueID]);
                // String Qty = atcSUoM.Text.Split('/')[1];
                sCmdUpdate.Append(",@MaterialMaster_SUoMID=" + Request.Form[hifSUoMID.UniqueID]);
                Temperarevarialble = atcKitplanner.Text.Trim() != "" && hifKitPlanner.Value != "" ? hifKitPlanner.Value : "NULL";
                sCmdUpdate.Append(",@KitPlannerID=" + Temperarevarialble);
                Temperarevarialble = txtQuantity.Text.Trim() != "" ? txtQuantity.Text.Trim() : "NULL";
                sCmdUpdate.Append(",@SOQuantity=" + Temperarevarialble);
                Temperarevarialble = txtPrice.Text.Trim() != "" ? txtPrice.Text.Trim() : "NULL";
                sCmdUpdate.Append(",@UnitPrice=" + Temperarevarialble);


                sCmdUpdate.Append(",@CreatedBy=" + cp.UserID);

                String custUoMID = "";
                String custUoMqty = "";
                /* if (atcCustPOUoM.Text.Trim() != "" && Request.Form[hifCustPOUoMID.UniqueID] != "")
                 {
                     custUoMID = Request.Form[hifCustPOUoMID.UniqueID];
                     custUoMqty = atcCustPOUoM.Text.Trim().Split('/')[1];
                 }
                 else
                 {
                     custUoMID = "NULL";
                     custUoMqty = "NULL";
                 }*/

                // sCmdUpdate.Append(",@CustPOUoMID=" + custUoMID);
                sCmdUpdate.Append(",@MaterialMaster_CustPOUoMID=" + (atcCustPOUoM.Text.Trim() != "" && Request.Form[hifCustPOUoMID.UniqueID] != "" ? Request.Form[hifCustPOUoMID.UniqueID] : "NULL"));
                String CustPONumber = txtCustPONumber.Text.Trim() != "" ? DB.SQuote(txtCustPONumber.Text.Trim()) : "NULL";
                //sCmdUpdate.Append(",@CustomerPOID=" + CustPONumber);
                sCmdUpdate.Append(",@CustomerPOID=" + (txtCustomPOID.Value != "" && txtCustPONumber.Text != "" ? txtCustomPOID.Value : "NULL"));
                String CustPOQty = txtCustPOQuantity.Text.Trim() != "" ? txtCustPOQuantity.Text.Trim() : "NULL";
                sCmdUpdate.Append(",@CustPOQuantity=" + CustPOQty);

                String SODiscountInPercentage = txtSODiscountInPercentage.Text.Trim() != "" ? txtSODiscountInPercentage.Text.Trim() : "NULL";
                sCmdUpdate.Append(",@SODiscountInPercentage=" + SODiscountInPercentage);

                String VATCode = txtVATCode.Text.Trim() != "" ? DB.SQuote(txtVATCode.Text.Trim()) : "NULL";
                sCmdUpdate.Append(",@VATCode=" + VATCode);

                sCmdUpdate.Append(",@InvoiceNo= " + (txtInvoiceNo.Text.Trim() != "" ? DB.SQuote(txtInvoiceNo.Text.Trim()) : "NULL"));

                String InvoiceDate = null;
                if (txtInvoiceDate.Text.Trim() != "")
                    //InvoiceDate = DB.SQuote(CommonLogic.GetConfigValue(cp.TenantID, "DateFormat") == "dd/MM/yyyy" ? DateTime.ParseExact(txtInvoiceDate.Text.Trim(), "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("MM/dd/yyyy") : txtInvoiceDate.Text.Trim());

                    InvoiceDate = DB.SQuote(CommonLogic.GetConfigValue(Convert.ToInt16(hifTenant.Value), "DateFormat") == "dd-M-yy" ? DateTime.ParseExact(txtInvoiceDate.Text.Trim(), "dd-M-yy", CultureInfo.InvariantCulture).ToString("MM/dd/yyyy") : txtInvoiceDate.Text.Trim());
                else
                    InvoiceDate = "NULL";

                //String MfgDate = null;
                //if (txtmfgdate.Text.Trim() != "")
                //    //InvoiceDate = DB.SQuote(CommonLogic.GetConfigValue(cp.TenantID, "DateFormat") == "dd/MM/yyyy" ? DateTime.ParseExact(txtInvoiceDate.Text.Trim(), "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("MM/dd/yyyy") : txtInvoiceDate.Text.Trim());

                //    MfgDate = DB.SQuote(CommonLogic.GetConfigValue(Convert.ToInt16(hifTenant.Value), "DateFormat") == "dd/MM/yyyy" ? DateTime.ParseExact(txtmfgdate.Text.Trim(), "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("MM/dd/yyyy") : txtmfgdate.Text.Trim());
                //else
                //    MfgDate = "NULL";


                //      String ExpDate = null;
                //if (txtexpdate.Text.Trim() != "")
                //    //InvoiceDate = DB.SQuote(CommonLogic.GetConfigValue(cp.TenantID, "DateFormat") == "dd/MM/yyyy" ? DateTime.ParseExact(txtInvoiceDate.Text.Trim(), "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("MM/dd/yyyy") : txtInvoiceDate.Text.Trim());

                //    ExpDate = DB.SQuote(CommonLogic.GetConfigValue(Convert.ToInt16(hifTenant.Value), "DateFormat") == "dd/MM/yyyy" ? DateTime.ParseExact(txtexpdate.Text.Trim(), "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("MM/dd/yyyy") : txtexpdate.Text.Trim());
                //else
                //    ExpDate = "NULL";

                //String CountryofOriginID = atcCountrofOriginID.Text.Trim() != "" && Request.Form[hifCountrofOriginID.UniqueID] != "" ? Request.Form[hifCountrofOriginID.UniqueID] : "NULL";
                //sCmdUpdate.Append(",@CountryofOriginID=" + CountryofOriginID);



                String command = "";
                String ids = "";
                String values = "";
                String MSPID = "";
                String mspsql = "EXEC [sp_ORD_GetMaterialStorageParameters]  @MaterialMasterID=" + Request.Form[hifmmid.UniqueID] + ",@TenantID=" + cp.TenantID;

                IDataReader rsMCodeMSP = DB.GetRS(mspsql);

                //get Msp Data 
                while (rsMCodeMSP.Read())
                {
                    command = DB.RSField(rsMCodeMSP, "ControlType");
                    if (command == "DropDownList")
                    {
                        MSPID = "ddl" + DB.RSField(rsMCodeMSP, "ParameterName");
                        DropDownList _ddlReference = (DropDownList)gvRow.FindControl(MSPID);
                        if (_ddlReference != null)
                        {
                            String value = (_ddlReference).SelectedValue;

                            if (value != "")
                            {
                                ids += DB.RSFieldInt(rsMCodeMSP, "MaterialStorageParameterID") + ",";
                                values += value + ",";
                            }
                        }
                    }

                    else if (command == "TextBox")
                    {
                        TextBox _txtReference = (TextBox)gvRow.FindControl(MSPID);

                        if (_txtReference != null)
                        {
                            MSPID = "txt" + DB.RSField(rsMCodeMSP, "ParameterName");
                            String value = _txtReference.Text;
                            if (value != "")
                            {
                                ids += DB.RSFieldInt(rsMCodeMSP, "MaterialStorageParameterID") + ",";
                                values += value + ",";
                            }
                        }
                    }

                }
                rsMCodeMSP.Close();

                string str = ddlDeliveryPoint.SelectedValue.ToString() != "" ? ddlDeliveryPoint.SelectedValue.ToString() : "null";

                sCmdUpdate.Append(",@StoreParameterIDS=" + DB.SQuote(ids));
                sCmdUpdate.Append(",@StoreParameterValues=" + DB.SQuote(values));
                sCmdUpdate.Append(",@StorageLocationId=" + ddlStorageLocationID.SelectedValue.ToString());
                //  sCmdUpdate.Append(",@GEN_MST_Address_ID=" + ddlDeliveryPoint.SelectedValue.ToString());
                sCmdUpdate.Append(",@GEN_MST_Address_ID=" + str);
                sCmdUpdate.Append(",@MfgDate=" + MfgDate);
                sCmdUpdate.Append(",@InvoiceDate=" + InvoiceDate);
                sCmdUpdate.Append(",@ExpDate=" + ExpDate);
                sCmdUpdate.Append(",@SerialNo=" + DB.SQuote(txtserialno.Text));
                sCmdUpdate.Append(",@BatchNo=" + DB.SQuote(txtbatchno.Text));
                sCmdUpdate.Append(",@ProjectRefNo=" + DB.SQuote(txtrefno.Text));
                sCmdUpdate.Append(",@MRP=" + DB.SQuote(txtMRP.Text));


                try
                {
                    DB.ExecuteSQL(sCmdUpdate.ToString());
                    gvSODetails.EditIndex = -1;
                    ViewState["GetSOitemList"] = "EXEC  [dbo].[sp_ORD_SODetailsList] @SOHeaderID=" + ViewState["HeaderID"].ToString() + ",@MCode=''";
                    SOQuantityList_BuildGridData(SOQuantityList_BuildGridData());
                    CustmerPoList_BuildGridView(CustmerPoList_BuildGridView());
                    lnkCancel.Visible = true;
                    lnkClose.Enabled = true;
                    resetgridError("Successfully Updated", false);

                    if (gvCustPODetails.Rows.Count != 0 || gvSODetails.Rows.Count != 0)
                    {
                        txtCustomname.Enabled = false;
                        txtTenant.Enabled = false;
                    }
                    else
                    {
                        txtCustomname.Enabled = true;
                        txtTenant.Enabled = true;
                    }
                }
                catch (Exception ex)
                {
                    //((TextBox)gvRow.FindControl("atcEditMCode")).Focus();
                    resetgridError("Error while updating", true);
                    CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
                }

            }
        }

        //cancelling Details
        //protected void gvSODetails_RowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
        protected void gvSODetails_RowCancelingEdit(object sender, EventArgs e)
        {
            //test case ID(TC_099)
            //Cancel modification in the line Item

            /* if (Convert.ToBoolean(ViewState["IsInsertrecord"]))
             {
                 GridViewRow gvRow = gvSODetails.Rows[e.RowIndex];
                 Literal ltSODetailsID = (Literal)gvRow.FindControl("ltSODetailsIDEdit");
                 StringBuilder sql = new StringBuilder();
                 sql.Append("Delete From ORD_SODetails where SODetailsID="+ltSODetailsID.Text);
                 try
                 {
                     DB.ExecuteSQL(sql.ToString());

                     resetgridError("Lineitem Canceled ",false);
                 }
                 catch (Exception ex)
                 {
                     resetgridError("Some error occured, not canceled "+ex.ToString(),true);
                 }


             }*/

            ltgridstatus.Text = "";
            gvSODetails.EditIndex = -1;
            ViewState["GetSOitemList"] = "EXEC  [dbo].[sp_ORD_SODetailsList] @SOHeaderID=" + ViewState["HeaderID"].ToString() + ",@MCode=''";
            SOQuantityList_BuildGridData(SOQuantityList_BuildGridData());
            if (gvSODetails.Rows.Count == 0)
            {

                dvSearch.Visible = false;
                lnksearch.Visible = false;
                //ltsearch.Visible = false;
                pnlgvSoDetails.Visible = false;
            }
        }


        protected void gvSODetails_PageIndexChanging(object sender, GridViewPageEventArgs e)
        {
            int PageIndex = e.NewPageIndex;
            gvSODetails.EditIndex = -1;
            gvSODetails.PageIndex = PageIndex;
            ViewState["GetSOitemList"] = "EXEC  [dbo].[sp_ORD_SODetailsList] @SOHeaderID=" + ViewState["HeaderID"].ToString() + ",@MCode=''";
            SOQuantityList_BuildGridData(SOQuantityList_BuildGridData());
        }

        //UnUsed Method
        protected void ddlMMID_SelectedIndexChanged(object sender, EventArgs e)
        {
            int EditIndex = gvSODetails.EditIndex;
            BuildEditData(EditIndex);
        }

        #endregion
        //UnUsed Methods
        private void BuildDropDown(DropDownList dropdown, String sql, String ListName, String ListValue, String Defaultvalue)
        {
            cp = HttpContext.Current.User as CustomPrincipal;
            dropdown.Items.Clear();

            dropdown.Items.Add(new ListItem());
            try
            {
                dropdown.Items.Clear();

                IDataReader dropdownReader = DB.GetRS(sql);

                dropdown.Items.Add(new ListItem(Defaultvalue, ""));
                while (dropdownReader.Read())
                {
                    if (dropdown.ID == "ddlSUoMID")
                        dropdown.Items.Add(new ListItem(dropdownReader[ListName].ToString() + "-" + dropdownReader["UoMQty"].ToString(), dropdownReader[ListValue].ToString()));
                    else
                        dropdown.Items.Add(new ListItem(dropdownReader[ListName].ToString(), dropdownReader[ListValue].ToString()));
                }
                dropdownReader.Close();
            }
            catch (Exception ex)
            {
                CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
            }
        }

        protected void resetError(string error, bool isError)
        {

            /*string str = "<font class=\"noticeMsg\">NOTICE:</font>&nbsp;&nbsp;&nbsp;";
            if (isError)
                str = "<font class=\"errorMsg\">ERROR:</font>&nbsp;&nbsp;&nbsp;";

            if (error.Length > 0)
                str += error + "";
            else
                str = "";


            lblStatus.Text = str;*/
            ScriptManager.RegisterStartupScript(this, this.GetType(), "test", "showStickyToast(" + (isError.ToString().ToLower() == "true" ? "false" : "true") + ",\"" + error + "\");", true);

        }

        //Add new LineItem
        protected void butNewItem_Click(object sender, EventArgs e)
        {
            cp = HttpContext.Current.User as CustomPrincipal;
            if (gvCustPODetails.EditIndex == 0)
            {
                gvCustPODetails.EditIndex = -1;
                CustmerPoList_BuildGridView(CustmerPoList_BuildGridView());

            }
            DataSet dsSODetailslist = null;
            String sCmdSODetails = "EXEC  [dbo].[sp_ORD_SODetailsList] @SOHeaderID=" + ViewState["HeaderID"].ToString() + ",@MCode=''";
            try
            {
                //IDataReader GetShipmentreceive = DB.GetRS("[sp_ORD_GetMaterialReceivedOrNot] @SOHeaderID=" + ViewState["HeaderID"].ToString());
                //if (GetShipmentreceive.Read())
                //{
                //    resetgridError("Cannot add new item, as the sales order is configured in outbound/job order", true);
                //    GetShipmentreceive.Close();
                //    return;
                //}
                //GetShipmentreceive.Close();

                dsSODetailslist = DB.GetDS(sCmdSODetails, false);
                DataRow drSODetails = dsSODetailslist.Tables[0].NewRow();
                //Procedure Conversion
                // int lastRowindex = DB.GetSqlN("select max(LineNumber) as N from ORD_SODetails where IsDeleted=0 AND SOHeaderID=" + ViewState["HeaderID"].ToString());
                int lastRowindex = DB.GetSqlN("Exec [dbo].[USP_MaxLineNumberSO] @SOHeaderID=" + ViewState["HeaderID"].ToString());
                drSODetails["SODetailsID"] = 0;
                drSODetails["LineNumber"] = ++lastRowindex;
                drSODetails["MCode"] = "";
                dsSODetailslist.Tables[0].Rows.InsertAt(drSODetails, 0);
                gvSODetails.EditIndex = 0;
                gvSODetails.PageIndex = 0;
                Page.Validate("UpdateSODetails");

                SOQuantityList_BuildGridData(dsSODetailslist);
                Page.Validate("UpdateSODetails");
                //resetgridError("Enter New lineItem details ", false);
            }
            catch (Exception ex)
            {
                resetgridError("Error try again", false);
                CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
            }
            // gvSODetails.Rows[0].FindControl("atcEditMCode").Focus();

            dvSearch.Visible = true;
            lnksearch.Visible = true;
            //ltsearch.Visible = true;
            pnlgvSoDetails.Visible = true;

        }

        //Generate New SoNumber
        protected void IbtnNew_Click(object sender, ImageClickEventArgs e)
        {
            cp = HttpContext.Current.User as CustomPrincipal;
            //test case ID (TC_010)
            //Generate New WONumber like prefix value+year+fixed lenght serial No


            try
            {
                String NewSONumber = DB.GetSqlS("select SysConfigValue as S from SYS_SystemConfiguration where SysConfigKeyID= (select SysConfigKeyID from SYS_SysConfigKey where SysConfigKey=N'salesorder.aspx.cs.SO_Prefix') ");
                NewSONumber += "" + (Convert.ToInt16(DateTime.Now.Year) % 100);           //add year code to ponumber

                int length = Convert.ToInt32(DB.GetSqlS("select SysConfigValue as S from SYS_SystemConfiguration as N where SysConfigKeyID= (select SysConfigKeyID from SYS_SysConfigKey where SysConfigKey=N'salesorder.aspx.cs.SO_Length') "));


                //string HeaderID = ViewState["HeaderID"].ToString();
                //String OldPONumber = DB.GetSqlS("select TOP 1 SONumber as S from ORD_SOHeader where SOTypeID<5 and TenantID=" + cp.TenantID + "  ORDER BY SONumber desc ");
                String OldSONumber = DB.GetSqlS("select TOP 1 SONumber as S from ORD_SOHeader where SONumber like '" + NewSONumber + "%' and TenantID=" + hifTenant.Value + "  ORDER BY SONumber desc ");


                int power = (Int32)Math.Pow((double)10, (double)(length - 1));          //getting minvalue of prifix length

                String newvalue = "";
                if (OldSONumber != "" && NewSONumber.Equals(OldSONumber.Substring(0, NewSONumber.Length)))        //if ponumber is existed and same year ponumber  enter
                {
                    String temp = OldSONumber.Substring(NewSONumber.Length, length);                            //getting number of last prifix
                    Int32 number = Convert.ToInt32(temp);
                    number++;


                    while (power > 1)                                                                           //add '0' to number at left side for get 
                    {
                        if (number / power > 0)
                        {
                            break;
                        }
                        newvalue += "0";
                        power /= 10;
                    }
                    newvalue += number;
                }
                else
                {                                                                                           //other wise generate first number 
                    for (int i = 0; i < length - 1; i++)
                        newvalue += "0";
                    newvalue += "1";
                }

                NewSONumber += newvalue;
                txtSOCode.Text = NewSONumber;
            }
            catch (Exception ex)
            {
                resetError("Error while generating SO Number", true);
                CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
            }
            txtSOType.Focus();
        }

        //Create new form
        protected void butAddNew_Click(object sender, EventArgs e)
        {
            Response.Redirect("SalesOrderinfo.aspx");
        }

        //Cancel Form
        protected void lnkCancel_Click(object sender, EventArgs e)
        {

            //test case ID (TC_052)
            //cancel the work order not configure in outbound

            //BuildFormData();
            try
            {
                IDataReader GetShipmentreceive = DB.GetRS("[sp_ORD_GetMaterialReceivedOrNot] @SOHeaderID=" + ViewState["HeaderID"].ToString());
                if (GetShipmentreceive.Read())
                {
                    resetError(" Cannot cancel, as the Sales Order is configured in Outbound/Job Order", true);
                    GetShipmentreceive.Close();
                    return;
                }
                GetShipmentreceive.Close();

                //<!------------Procedure Conversion--------------->
                // String sCmdClosepo = "update ORD_SOHeader set SOStatusID=3 where SOHeaderID=" + ViewState["HeaderID"].ToString();
                String sCmdClosepo = "Exec [dbo].[USP_CancelSO] @SOHeaderID=" + ViewState["HeaderID"].ToString();
                DB.ExecuteSQL(sCmdClosepo);
                resetError("SO Canceled Successfully", true);
                Response.Redirect("SalesOrderInfo.aspx?soid=" + ViewState["HeaderID"].ToString() + "&tid=" + hifTenant.Value);
            }
            catch (Exception ex)
            {
                resetError("Error while canceling", true);
                CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
            }
            Response.Redirect("SalesOrderInfo.aspx?soid=" + ViewState["HeaderID"].ToString() + "&tid=" + hifTenant.Value);
        }
        //========================== Added By Meena For Confirmation Popup Window ========================== //
        [WebMethod]
        public static string CancelSO()
        {
            cp1 = HttpContext.Current.User as CustomPrincipal;
            try
            {
                IDataReader GetShipmentreceive = DB.GetRS("[sp_ORD_GetMaterialReceivedOrNot] @SOHeaderID=" + SOID);
                if (GetShipmentreceive.Read())
                {
                    GetShipmentreceive.Close();
                    return "-1";
                }
                GetShipmentreceive.Close();
            }
            catch (Exception ex)
            {
                CommonLogic.createErrorNode(cp1.UserID + " / " + cp1.FirstName, "SalesOrderInfo", ex.Source, ex.Message, ex.StackTrace);
                return "1";
            }
            // String sCmdClosepo = "update ORD_SOHeader set SOStatusID=3 where SOHeaderID=" +SOID;
            String sCmdClosepo = "Exec [dbo].[USP_CancelSO] @SOHeaderID= " + SOID;
            DB.ExecuteSQL(sCmdClosepo);
            int status = DB.GetSqlN("select count(soheaderid) as N from ORD_SOHeader where SOStatusID=3 and SOHeaderID=" + SOID);
            if (status == 1)
            {
                return "2";
            }
            return SOID;
        }
        //========================== Added By MD.Prasad For Confirmation Popup Window ========================== //
        //Update Header details 
        protected void lnkUpdate_Click(object sender, EventArgs e)
        {
            //test case ID (TC_046)
            //Update Work Order Details
            cp = HttpContext.Current.User as CustomPrincipal;
            Page.Validate("savecustomerdetails");
            if (!Page.IsValid)
            {
                resetError("Please check all mandatory fields", true);
                return;
            }

           

            if (Convert.ToInt32(txtDiscount.Text) > 12)
            {
                resetError("Please Enter Discount less than 12%", true);
                return;
            }

            int HeaderID = 0;
            try
            {
                string vProjectCode = txtProjectCode.Text;
                if (ViewState["HeaderID"].ToString() != "0")
                {
                    IDataReader GetShipmentreceive = DB.GetRS("[sp_ORD_GetMaterialReceivedOrNot] @SOHeaderID=" + ViewState["HeaderID"].ToString());
                    if (GetShipmentreceive.Read())
                    {
                        resetError("Cannot update, as the Sales Order is configured in Outbound/Job Order", true);
                        ScriptManager.RegisterStartupScript(this, this.GetType(), "test", "MSPConfifure(1);", true);
                        GetShipmentreceive.Close();
                        return;
                    }
                    GetShipmentreceive.Close();
                }

                StringBuilder sql = new StringBuilder();
                sql.Append("DECLARE @UpdateSOHeaderID int EXEC dbo.sp_ORD_UpsertSOHeader ");
                sql.Append("@SOHeaderID=" + ViewState["HeaderID"].ToString());
                sql.Append(",@SONumber=" + DB.SQuote(txtSOCode.Text.Trim()));
                sql.Append(",@AccountID=" + cp.AccountID);
                sql.Append(",@TenantID=" + hifTenant.Value);
                sql.Append(",@CustomerID=" + Request.Form[hifCustomerName.UniqueID]);
                sql.Append(",@ProjectCode=" + (vProjectCode.Trim() != "" ? DB.SQuote(vProjectCode.Trim()) : "NULL"));

                //================== Added By M.D.Prasad ======================//
                sql.Append(",@ShipmentAddress1=" + (txtBAddress1.Text.Trim() != "" ? DB.SQuote(txtBAddress1.Text.Trim()) : "NULL"));
                sql.Append(",@ShipmentAddress2=" + (txtBAddress2.Text.Trim() != "" ? DB.SQuote(txtBAddress2.Text.Trim()) : "NULL"));
                sql.Append(",@City=" + (txtBCity.Text.Trim() != "" ? DB.SQuote(txtBCity.Text.Trim()) : "NULL"));
                sql.Append(",@Province=" + (txtBState.Text.Trim() != "" ? DB.SQuote(txtBState.Text.Trim()) : "NULL"));
                sql.Append(",@CountryMasterID=" + (hifCountryMaster.Value != "" && txtBCountyMaster.Text.Trim() != "" ? hifCountryMaster.Value : "NULL"));
                sql.Append(",@Zip=" + (txtBZip.Text.Trim() != "" ? DB.SQuote(txtBZip.Text.Trim()) : "NULL"));
                sql.Append(",@Mobile=" + (txtBPhoneNo.Text.Trim() != "" ? DB.SQuote(txtBPhoneNo.Text.Trim()) : "NULL"));
                sql.Append(",@Discount=" + txtDiscount.Text.Trim());
                //================== Added By M.D.Prasad ======================//

                //sql.Append(",@ShipmentAddress1=" + (txtAddress1.Text.Trim()!=""?DB.SQuote(txtAddress1.Text.Trim()):"NULL"));
                //.Append(",@ShipmentAddress2=" +(txtAddress2.Text.Trim()!=""? DB.SQuote(txtAddress2.Text.Trim()):"NULL"));
                //sql.Append(",@City=" + (txtCity.Text.Trim()!=""?DB.SQuote(txtCity.Text.Trim()):"NULL"));
                //sql.Append(",@Province=" + (txtState.Text.Trim()!=""?DB.SQuote(txtState.Text.Trim()):"NULL"));
                //sql.Append(",@CountryMasterID=" + (hifCountryMaster.Value!=""&& txtCountyMaster.Text.Trim()!=""?hifCountryMaster.Value:"NULL"));
                sql.Append(",@CurrencyID=" + (hifCurrency.Value != "" && txtlCurrency.Text != "" ? hifCurrency.Value : "NULL"));
                //sql.Append(",@Mobile=" + (txtPhoneNo.Text.Trim()!=""?DB.SQuote(txtPhoneNo.Text.Trim()):"NULL"));
                sql.Append(",@DepartmentID=null");// + (hifDeparment.Value != "" && hifDeparment.Value != "0" ? hifDeparment.Value : "NULL"));
                sql.Append(",@DivisionID=null");// + (hifDivision.Value != "" && hifDivision.Value != "0" ? hifDivision.Value : "NULL"));
                sql.Append(",@ShipmentCharges=" + (txtShipmentCharges.Text.Trim() != "" ? DB.SQuote(txtShipmentCharges.Text.Trim()) : "NULL"));
                sql.Append(",@FreightCompanyID=" + (hifFreightCompany.Value != "" && txtFreightCompany.Text != "" ? hifFreightCompany.Value : "NULL"));
                // sql.Append(",@SOStatusID=" + Request.Form[hifSOStatus.UniqueID]);
                sql.Append(",@SOTypeID=" + hifSOType.Value);
                sql.Append(",@RequestedBy=" + cp.UserID);
                String SODate = "";
                if (txtSoDate.Text.Trim() != "")
                    //SODate = DB.SQuote(CommonLogic.GetConfigValue(cp.TenantID, "DateFormat") == "dd/MM/yyyy" ? DateTime.ParseExact(txtSoDate.Text.Trim(), "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("MM/dd/yyyy") : txtSoDate.Text.Trim());

                    SODate = DB.SQuote(CommonLogic.GetConfigValue(Convert.ToInt16(hifTenant.Value), "DateFormat") == "dd-M-yy" ? DateTime.ParseExact(txtSoDate.Text.Trim(), "dd-M-yy", CultureInfo.InvariantCulture).ToString("MM/dd/yyyy") : txtSoDate.Text.Trim());
                else
                    SODate = "NULL";

                string DeliveryDate = "";
                if (txtDeliverydate.Text.Trim() != "")
                    //SODate = DB.SQuote(CommonLogic.GetConfigValue(cp.TenantID, "DateFormat") == "dd/MM/yyyy" ? DateTime.ParseExact(txtSoDate.Text.Trim(), "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("MM/dd/yyyy") : txtSoDate.Text.Trim());

                    DeliveryDate = DB.SQuote(CommonLogic.GetConfigValue(Convert.ToInt16(hifTenant.Value), "DateFormat") == "dd-M-yy" ? DateTime.ParseExact(txtDeliverydate.Text.Trim(), "dd-M-yy", CultureInfo.InvariantCulture).ToString("MM/dd/yyyy") : txtDeliverydate.Text.Trim());
                else
                    DeliveryDate = "NULL";
                sql.Append(",@SODate=" + SODate);
                sql.Append(",@DeliveryDueDate=" + DeliveryDate);
                sql.Append(",@RequirementNumber=" + DB.SQuote(txtRequirementNumber.Text.Trim()));
                sql.Append(",@CreatedBy=" + cp.UserID);
                //sql.Append(",@GEN_MST_Address_ID=" + hdnaddresstypeid.Value);
                sql.Append(",@GEN_MST_Address_ID=NULL");
                sql.Append(",@Remarks=" + (txtRemarks.Text.Trim() != "" ? DB.SQuote(txtRemarks.Text.Trim()) : "NULL"));
                sql.Append(",@LastModifiedBy=" + cp.UserID);
                sql.Append(",@SOTax=" + (txtSOTax.Text.Trim() != "" ? txtSOTax.Text.Trim() : "NULL"));
                sql.Append(",@NetValue=" + (txtNetValue.Text.Trim() != "" ? txtNetValue.Text.Trim() : "NULL"));
                sql.Append(",@GrossValue=" + (txtGrossValue.Text.Trim() != "" ? txtGrossValue.Text.Trim() : "NULL"));
                // sql.Append(",@Zip="+DB.SQuote( txtZip.Text.Trim()));
                sql.Append(",@IsActive=" + Convert.ToInt16(chkIsActive.Checked));
                sql.Append(",@IsDeleted=" + Convert.ToInt16(chkIsDeleted.Checked));
                sql.Append(",@SOStatusID=1");
                sql.Append(",@NewSOHeaderID=@UpdateSOHeaderID OUTPUT select @UpdateSOHeaderID as N");
                Boolean IsDeleted = chkIsDeleted.Checked;
                //DataSet ds = DB.GetDS(sql.ToString(), false);
                HeaderID = DB.GetSqlN(sql.ToString());
                if (IsDeleted)
                {
                    Response.Redirect("SOList.aspx");
                }
                ViewState["HeaderID"] = HeaderID;
                lbutNewItem.Visible = true;

                tdCusPODet.Visible = true;
                tdSOLineItems.Visible = true;
                lnkAddNewCusPO.Visible = true;
                //lnkUpdate.Text = "Update"+CommonLogic.btnfaUpdate;
                resetError("Successfully Saved", false);
            }
            catch (SqlException sqlex)
            {

                CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), sqlex.Source, sqlex.Message, sqlex.StackTrace);
                //if (sqlex.ErrorCode == -2146232060)
                if (sqlex.Message.StartsWith("Violation of UNIQUE KEY constraint 'UK_ORD_SONumber'"))
                {
                    //test case ID (TC_045)
                    //if exist same WO Number then

                    resetError("Error duplicate SO Number generated, regenerate SO Number", true);
                    return;
                }
                resetError("Error while updating", true);
            }
            catch (Exception ex)
            {
                resetError("Error while updating", true);
                CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
            }
            if (HeaderID != 0)
            {
                ScriptManager.RegisterStartupScript(this, GetType(), "YourUniqueScriptKey", "SuccessMsg(" + HeaderID + "," + hifTenant.Value + ");", true);
                //ScriptManager.RegisterStartupScript(this, GetType(), "YourUniqueScriptKey", "AnotherFunction();", true);
                //Response.Redirect("SalesOrderInfo?soid=" + HeaderID + "&tid=" + hifTenant.Value + "&success=true");   
                //Response.Redirect("SalesOrderInfo?soid=" + HeaderID + "&tid=" + hifTenant.Value);
            }
        }

        protected void ckaddress_CheckedChanged(object sender, EventArgs e)
        {
            //test case ID (TC_035)
            //fill the address based on selected customer
            cp = HttpContext.Current.User as CustomPrincipal;
            CheckBox box = (CheckBox)sender;
            // DataRow row=Session["CustomerData"] as DataRow;
            if (box.Checked)
            {
                try
                {

                    String CustomerID = Request.Form[hifCustomerName.UniqueID];

                    //Procedure Conversion
                    //  IDataReader rsUserDetails = DB.GetRS("Select * from GEN_Customer where CustomerID=" + DB.SQuote(CustomerID));
                    IDataReader rsUserDetails = DB.GetRS(" [dbo].[USP_GetCustomerdataByID] @CustomerID = " + DB.SQuote(CustomerID));

                    if (rsUserDetails.Read())
                    {
                        //txtAddress1.Text = DB.RSField(rsUserDetails, "Address1");
                        //txtAddress2.Text = DB.RSField(rsUserDetails, "Address2");
                        //txtCity.Text = DB.RSField(rsUserDetails, "City");
                        //txtState.Text = DB.RSField(rsUserDetails, "State");
                        //txtZip.Text = DB.RSField(rsUserDetails, "Zip");

                        IDataReader rsCountryName = DB.GetRS("select CountryName from GEN_CountryMaster where CountryMasterID=" + DB.RSFieldInt(rsUserDetails, "CountryMasterID"));
                        //if (rsCountryName.Read())
                        //txtCountyMaster.Text = DB.RSField(rsCountryName, "CountryName");
                        //else
                        //  txtCountyMaster.Text = "";
                        rsCountryName.Close();
                        hifCountryMaster.Value = DB.RSFieldInt(rsUserDetails, "CountryMasterID").ToString();
                        // txtPhoneNo.Text = DB.RSField(rsUserDetails, "Phone1");
                    }
                    rsUserDetails.Close();
                }
                catch (Exception ex)
                {
                    CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
                }

            }
            else
            {
                //txtAddress1.Text = "";
                //txtAddress2.Text = "";
                //txtCity.Text = "";
                //txtState.Text = "";
                //txtZip.Text = "";
                //txtCountyMaster.Text = "";
                //ddCountyMaster.SelectedValue = "";
                //txtPhoneNo.Text = "";
            }
        }

        //Add Dynamically 
        private void AddDynamicColumns()
        {
            cp = HttpContext.Current.User as CustomPrincipal;
            TemplateField field;
            IDataReader rsMSPList = null;
            try
            {
                rsMSPList = DB.GetRS("sp_GEN_GetAllMaterialStorageParameters @ParameterUsageTypeID=1,@TenantID=1--" + cp.TenantID);
            }
            catch (Exception ex)
            {
                resetError("Error while loading", true);
                CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
                return;
            }

            while (rsMSPList.Read())
            {

                field = new TemplateField();
                field.HeaderStyle.Width = 150;
                field.ItemStyle.Width = 150;
                field.HeaderTemplate = new DynamicallyTemplatedGridViewHandler(ListItemType.Header, DB.RSField(rsMSPList, "DisplayName"), "Literal");

                field.ItemTemplate = new DynamicallyTemplatedGridViewHandler(ListItemType.Item, DB.RSField(rsMSPList, "ParameterName"), "Literal");
                /*switch (DB.RSField(rsMSPList, "ControlType"))
                {
                    case "DropDownList":
                        field.EditItemTemplate = new DynamicallyTemplatedGridViewHandler(ListItemType.EditItem, DB.RSField(rsMSPList, "ParameterName"), "DropDownList", DB.RSField(rsMSPList, "DataSource"));
                        break;

                    case "TextBox":
                        field.EditItemTemplate = new DynamicallyTemplatedGridViewHandler(ListItemType.EditItem, DB.RSField(rsMSPList, "ParameterName"), "TextBox");
                        break;

                    case "DateTime":
                        field.EditItemTemplate = new DynamicallyTemplatedGridViewHandler(ListItemType.EditItem, DB.RSField(rsMSPList, "ParameterName"), "DateTime");
                        break;
                }*/
                field.EditItemTemplate = new DynamicallyTemplatedGridViewHandler(ListItemType.EditItem, DB.RSField(rsMSPList, "ParameterName"), DB.RSField(rsMSPList, "ControlType"), DB.RSField(rsMSPList, "ParameterDataType"), DB.RSField(rsMSPList, "DataSource"), DB.RSField(rsMSPList, "MinTolerance"), DB.RSField(rsMSPList, "MaxTolerance"));

                if (!gvSODetails.Columns.Contains(field))
                {
                    gvSODetails.Columns.Add(field);

                }
            }

            rsMSPList.Close();

            field = new TemplateField();
            field.HeaderTemplate = new DynamicallyTemplatedGridViewHandler(ListItemType.Header, "Delete", "Literal");
            field.ItemTemplate = new DynamicallyTemplatedGridViewHandler(ListItemType.Item, "Delete", "CheckBox");
            field.EditItemTemplate = new DynamicallyTemplatedGridViewHandler(ListItemType.EditItem, "Delete", "Empty");
            button = new LinkButton();
            button.ID = "deleteButton";
            button.Text = "Delete";
            button.ForeColor = System.Drawing.Color.Blue;
            button.OnClientClick = "return confirm('Are you sure want to delete the selected line items?')";
            button.Click += new EventHandler(DeleteItems);
            button.Font.Underline = false;
            field.FooterTemplate = new DynamicallyTemplatedGridViewHandler(ListItemType.Footer, button);

            gvSODetails.Columns.Add(field);



            field = new TemplateField();
            field.ItemStyle.Width = 200;
            field.ItemTemplate = new DynamicallyTemplatedGridViewHandler(ListItemType.Item, "Command", gvSODetails_RowEditing);

            field.EditItemTemplate = new DynamicallyTemplatedGridViewHandler(ListItemType.EditItem, "Command", gvSODetails_RowUpdating, gvSODetails_RowCancelingEdit);

            gvSODetails.Columns.Add(field);


            //CommandField cmdfield = new CommandField();

            //cmdfield.CausesValidation = false;
            //cmdfield.ButtonType = ButtonType.Link;
            //cmdfield.CancelText = "Cancel";
            //cmdfield.EditText = "<nobr> Edit <img src='../Images/redarrowright.gif' border='0' /></nobr>";
            //cmdfield.ShowEditButton = true;
            //cmdfield.ControlStyle.Font.Underline = false;
            //cmdfield.FooterStyle.Font.Underline = false;
            //cmdfield.UpdateImageUrl = "icons/update.gif";
            //cmdfield.UpdateText = "Update";

            //gvSODetails.Columns.Add(cmdfield);   



        }

        protected void resetgridError(string error, bool isError)
        {

            /* string str = "<font class=\"noticeMsg\">NOTICE:</font>&nbsp;&nbsp;&nbsp;";
             if (isError)
                 str = "<font class=\"errorMsg\">ERROR:</font>&nbsp;&nbsp;&nbsp;";

             if (error.Length > 0)
                 str += error + "";
             else
                 str = "";


             ltgridstatus.Text = str;*/
            ScriptManager.RegisterStartupScript(this, this.GetType(), "test", "showStickyToast(" + (isError.ToString().ToLower() == "true" ? "false" : "true") + ",\"" + error + "\");", true);

        }

        public void DeleteItems(object sender, EventArgs e)
        {
            cp = HttpContext.Current.User as CustomPrincipal;
            //test case ID(TC_106)
            //Delete select line items
            int count = 0;
            string gvchkIDs = "";
            CheckBox checkBox;
            foreach (GridViewRow gv in gvSODetails.Rows)
            {
                if (gv.RowType == DataControlRowType.DataRow)
                {
                    CheckBox c = (CheckBox)gv.FindControl("chkDelete1");
                    var c1 = (CheckBox)gv.FindControl("chkDelete1");
                    if (c != null)
                    {
                        if (c.Checked)
                        {
                            count++;
                        }
                    }
                }


                if (gv.RowState != DataControlRowState.Edit)
                {
                    checkBox = (CheckBox)gv.FindControl("chkDelete1");
                    if (checkBox.Checked)
                    {

                        gvchkIDs += ((Literal)gv.FindControl("ltSODetailsID")).Text.ToString() + ",";
                    }
                }

            }
            if (count == 0)
            {
                resetCustomerPOgridError("Please select checkbox", true);
                return;
            }
            StringBuilder sql = new StringBuilder();
            sql.Append("EXEC dbo.sp_ORD_DeleteSOItems @SODetailsIDs=" + DB.SQuote(gvchkIDs) + ",@UpdatedBy=" + cp.UserID.ToString());

            // Execute SQL Query only if checkboxes are checked to avoid any error with initial null string
            try
            {
                if (gvchkIDs != "")
                {
                    //IDataReader GetShipmentreceive = DB.GetRS("[sp_ORD_GetMaterialReceivedOrNot] @SOHeaderID=" + ViewState["HeaderID"].ToString());
                    //if (GetShipmentreceive.Read())
                    //{
                    //    resetgridError("Cannot delete, as the Sales Order is configured in outbound/job order", true);
                    //    GetShipmentreceive.Close();
                    //    return;
                    //}
                    //GetShipmentreceive.Close();

                    DB.ExecuteSQL(sql.ToString());

                    CustmerPoList_BuildGridView(CustmerPoList_BuildGridView());
                    ViewState["GetSOitemList"] = "EXEC  [dbo].[sp_ORD_SODetailsList] @SOHeaderID=" + ViewState["HeaderID"].ToString() + ",@MCode=''";
                    SOQuantityList_BuildGridData(SOQuantityList_BuildGridData());

                    if (gvSODetails.Rows.Count == 0)
                    {

                        dvSearch.Visible = false;
                        lnksearch.Visible = false;
                        //ltsearch.Visible = false;
                        pnlgvSoDetails.Visible = false;
                    }

                    if (gvCustPODetails.Rows.Count != 0 || gvSODetails.Rows.Count != 0)
                    {
                        txtCustomname.Enabled = false;
                        txtTenant.Enabled = false;
                    }
                    else
                    {
                        txtCustomname.Enabled = true;
                        txtTenant.Enabled = true;
                    }

                    resetgridError("Successfully deleted the selected line items", false);
                }
            }
            catch (Exception ex)
            {
                CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
                resetgridError("Error while deleting", true);
            }


        }

        private void BuildEditData(int EditIndex)
        {
            cp = HttpContext.Current.User as CustomPrincipal;

            GridViewRow gvRow = gvSODetails.Rows[EditIndex];

            DropDownList ddlMaterial = (DropDownList)gvRow.FindControl("ddlMMID");
            DropDownList ddlSUoM = (DropDownList)gvRow.FindControl("ddlSUoMID");
            DropDownList ddlKitPlanner = (DropDownList)gvRow.FindControl("ddlKitplanner");
            try
            {
                // BuildDropDown(ddlSUoM, "select gu.UoM,gu.UoMID,mmgu.UoMQty from GEN_UoM gu LEFT JOIN MMT_MaterialMaster_GEN_UoM mmgu on gu.UoMID=mmgu.UoMID where mmgu.UoMTypeID!=1 AND mmgu.MaterialMasterID=" + ddlMaterial.SelectedValue, "UoM", "UoMID", "Select SUoM");
                BuildDropDown(ddlSUoM, "Exec [dbo].[USP_LoadUoMByMID] @MaterialID=" + ddlMaterial.SelectedValue, "UoM", "UoMID", "Select SUoM");

                BuildDropDown(ddlKitPlanner, "select KitPlannerID from MMT_KitPlanner where IsDeleted=0 AND ParentMaterialMasterID=" + ddlMaterial.SelectedValue, "KitPlannerID", "KitPlannerID", "Select KitPlanner");
                IDataReader SMTreader = DB.GetRS("EXEC sp_ORD_GetMaterialStorageParameters @MaterialMasterID=" + ddlMaterial.SelectedValue);
                DataTable table = ViewState["MaterialStorageParameter"] as DataTable;
                String materialID = "";
                int n = table.Rows.Count;
                for (int i = 0; i < n; i++)
                {
                    if (table.Rows[i]["ControlType"].ToString() == "DropDownList")
                        materialID = "ddl" + Convert.ToString(table.Rows[i][1]);
                    else
                        materialID = "txt" + Convert.ToString(table.Rows[i][1]);
                    gvSODetails.Rows[EditIndex].FindControl(materialID).Visible = false;

                }



                while (SMTreader.Read())
                {
                    int position = Convert.ToInt16(SMTreader.GetValue(0));
                    if (table.Rows[position - 1]["ControlType"].ToString() == "DropDownList")
                        gvSODetails.Rows[EditIndex].FindControl("ddl" + table.Rows[position - 1][1]).Visible = true;
                    else
                        gvSODetails.Rows[EditIndex].FindControl("txt" + table.Rows[position - 1][1]).Visible = true;



                }
                SMTreader.Close();
            }
            catch (Exception ex)
            {
                resetError("Error while loading", true);
                CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
            }
        }

        #region ---------------CustomerPO Details--------------
        //Cancel CustomerPODetails
        //protected void gvCustPODetails_RowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
        protected void gvCustPODetails_RowCancelingEdit(object sender, EventArgs e)
        {

            //test case ID (TC_066)
            //cancel modification in the line item


            /* if (Convert.ToBoolean(ViewState["IsCustmerInserting"]))
             {
                 String customID = ((Literal)gvCustPODetails.Rows[e.RowIndex].FindControl("ltcustomPoID_Edit")).Text;
                 String sCmdDeletePO="Delete from ORD_CustomerPO where CustomerPOID="+customID;
                 try
                 {
                     DB.ExecuteSQL(sCmdDeletePO);
                     resetCustomerPOgridError("Lineitem Canceled", false);
                 }
                 catch (Exception ex)
                 {
                     resetCustomerPOgridError(ex.ToString(),true);
                 }

             }*/

            //ltCustomerStatus.Text = "";
            gvCustPODetails.EditIndex = -1;
            ViewState["CustomerPOListCommand"] = "dbo.sp_ORD_CustomerPOList @SOHeaderID=" + ViewState["HeaderID"].ToString();
            CustmerPoList_BuildGridView(CustmerPoList_BuildGridView());


        }

        //Edit CustomerPODetails line Item
        //protected void gvCustPODetails_RowEditing(object sender, GridViewEditEventArgs e)
        protected void gvCustPODetails_RowEditing(object sender, EventArgs e)
        {
            if (gvSODetails.EditIndex == 0)
            {

                gvSODetails.EditIndex = -1;
                SOQuantityList_BuildGridData(SOQuantityList_BuildGridData());

            }
            int editIndex = ((GridViewRow)(((LinkButton)sender).Parent.Parent)).RowIndex;//e.NewEditIndex;
            gvCustPODetails.EditIndex = editIndex;
            ViewState["IsCustmerInserting"] = false;
            ViewState["CustomerPOListCommand"] = "dbo.sp_ORD_CustomerPOList @SOHeaderID=" + ViewState["HeaderID"].ToString();
            CustmerPoList_BuildGridView(CustmerPoList_BuildGridView());
            if (editIndex < gvCustPODetails.Rows.Count)
                ((TextBox)gvCustPODetails.Rows[editIndex].FindControl("txtCustomerPONumber")).Focus();
            //ltCustomerStatus.Text = "";
        }

        //UpDate CustomerPODetails lineItem
        //protected void gvCustPODetails_RowUpdating(object sender, GridViewUpdateEventArgs e)
        protected void gvCustPODetails_RowUpdating(object sender, EventArgs e)
        {

            //test case ID (TC_068)
            //Update modification in the record

            Page.Validate("UpdateCustomer");
            if (!IsValid)
            {
                resetCustomerPOgridError("Please check all mandatory fields", true);
                return;
            }
            int editIndex = ((GridViewRow)(((Button)sender).Parent.Parent)).RowIndex;//e.NewEditIndex;
            GridViewRow gvrUpDateRow = gvCustPODetails.Rows[editIndex];
            if (gvrUpDateRow != null)
            {
                Literal ltcustomPoID = (Literal)gvrUpDateRow.FindControl("ltcustomPoID_Edit");
                TextBox txtCustomerPONumber = (TextBox)gvrUpDateRow.FindControl("txtCustomerPONumber");
                TextBox txtCustPODate = (TextBox)gvrUpDateRow.FindControl("txtCustPODate");
                TextBox txtCurrency = (TextBox)gvrUpDateRow.FindControl("atcCurrency");
                //TextBox txtInvoiceNumber = (TextBox)gvrUpDateRow.FindControl("txtInvoiceNumber");
                TextBox txtExchangeRate = (TextBox)gvrUpDateRow.FindControl("txtExchangeRate");
                TextBox txtCustomerPOValue = (TextBox)gvrUpDateRow.FindControl("txtCustPOValue");
                HiddenField hifcurrencyID = (HiddenField)gvrUpDateRow.FindControl("hifPOCurrency");

                StringBuilder sCmdUpdatesql = new StringBuilder();
                sCmdUpdatesql.Append("dbo.sp_ORD_UpsertCustomerPO ");
                sCmdUpdatesql.Append("@CustomerPOID=" + ltcustomPoID.Text.Trim());
                if (txtCustomerPONumber.Text.Trim() == "")
                {
                    resetCustomerPOgridError("Enter Customer PO Number", true);
                    return;
                }

                sCmdUpdatesql.Append(",@SOHeaderID=" + ViewState["HeaderID"].ToString());
                sCmdUpdatesql.Append(",@CustPONumber=" + DB.SQuote(txtCustomerPONumber.Text.Trim()));
                String poDate = "";
                if (txtCustPODate.Text.Trim() != "")
                    //poDate = DB.SQuote(CommonLogic.GetConfigValue(cp.TenantID, "DateFormat") == "dd/MM/yyyy" ? DateTime.ParseExact(txtCustPODate.Text.Trim(), "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("MM/dd/yyyy") : txtCustPODate.Text.Trim());

                    poDate = DB.SQuote(CommonLogic.GetConfigValue(Convert.ToInt16(hifTenant.Value), "DateFormat") == "dd-M-yy" ? DateTime.ParseExact(txtCustPODate.Text.Trim(), "dd-M-yy", CultureInfo.InvariantCulture).ToString("MM/dd/yyyy") : txtCustPODate.Text.Trim());
                else
                    poDate = "NULL";

                sCmdUpdatesql.Append(",@CustPODate=" + poDate);
                String currency = txtCurrency.Text.Trim() != "" && Request.Form[hifcurrencyID.UniqueID] != "" ? Request.Form[hifcurrencyID.UniqueID] : "NULL";
                sCmdUpdatesql.Append(",@CurrencyID=" + currency);
                String Exchangerate = txtExchangeRate.Text.Trim() != "" ? txtExchangeRate.Text.Trim() : "NULL";
                sCmdUpdatesql.Append(",@ExchangeRate=" + Exchangerate);
                String POvalue = txtCustomerPOValue.Text.Trim() != "" ? txtCustomerPOValue.Text.Trim() : "NULL";
                sCmdUpdatesql.Append(",@CustPOValue=" + POvalue);
                sCmdUpdatesql.Append(",@CreatedBy=" + cp.UserID);
                //sCmdUpdatesql.Append(",@InvoiceNumber="+DB.SQuote(txtInvoiceNumber.Text.Trim()));


                try
                {
                    //IDataReader GetShipmentreceive = DB.GetRS("[sp_ORD_GetMaterialReceivedOrNot] @SOHeaderID=" + ViewState["HeaderID"].ToString());
                    //if (GetShipmentreceive.Read())
                    //{

                    //    gvCustPODetails.EditIndex = -1;
                    //    ViewState["CustomerPOListCommand"] = "dbo.sp_ORD_CustomerPOList @SOHeaderID=" + ViewState["HeaderID"].ToString();
                    //    CustmerPoList_BuildGridView(CustmerPoList_BuildGridView());
                    //    resetCustomerPOgridError("Cannot edit, as the sales order is configured in outbound/job order", true);
                    //    GetShipmentreceive.Close();
                    //    return;
                    //}
                    //GetShipmentreceive.Close();

                    //<!--------Procedure Conversion------------->
                    // int custPoinoutBoud = DB.GetSqlN("select Outbound_CustomerPOID as N from OBD_Outbound_ORD_CustomerPO where CustomerPOID=" + ltcustomPoID.Text);
                    int custPoinoutBoud = DB.GetSqlN("Exec [dbo].[USP_CheckCustomerPOconfiguredOBD] @CustomerPOID = " + ltcustomPoID.Text);

                    if (custPoinoutBoud != 0)
                    {
                        resetCustomerPOgridError("Cannot edit, as the CustomerPO is configured in outbound", true);
                        return;
                    }


                    DB.ExecuteSQL(sCmdUpdatesql.ToString());
                    gvCustPODetails.EditIndex = -1;
                    ViewState["CustomerPOListCommand"] = "dbo.sp_ORD_CustomerPOList @SOHeaderID=" + ViewState["HeaderID"].ToString();
                    CustmerPoList_BuildGridView(CustmerPoList_BuildGridView());
                    resetCustomerPOgridError("Successfully Updated", false);

                    if (gvCustPODetails.Rows.Count != 0 || gvSODetails.Rows.Count != 0)
                    {
                        txtCustomname.Enabled = false;
                        txtTenant.Enabled = false;
                    }
                    else
                    {
                        txtCustomname.Enabled = true;
                        txtTenant.Enabled = true;
                    }
                }

                catch (SqlException sqlex)
                {
                    CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), sqlex.Source, sqlex.Message, sqlex.StackTrace);
                    if (sqlex.ErrorCode == -2146232060)
                    {
                        //test case id (TC_065)
                        //Customer PO No is already existed

                        resetCustomerPOgridError("Customer PO Number already exists", true);
                        return;
                    }
                    resetCustomerPOgridError("Error while updating", true);
                }
                catch (Exception ex)
                {
                    resetCustomerPOgridError("Error while updating", true);
                    CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
                }
            }
        }

        protected void gvCustPODetails_PageIndexChanging(object sender, GridViewPageEventArgs e)
        {
            gvCustPODetails.PageIndex = e.NewPageIndex;
            ViewState["CustomerPOListCommand"] = "dbo.sp_ORD_CustomerPOList @SOHeaderID=" + ViewState["HeaderID"].ToString();
            CustmerPoList_BuildGridView(CustmerPoList_BuildGridView());
        }

        private DataSet CustmerPoList_BuildGridView()
        {
            DataSet dsCustomerPO = null;
            String sCmdCustomerPO = ViewState["CustomerPOListCommand"].ToString();
            try
            {
                dsCustomerPO = DB.GetDS(sCmdCustomerPO, false);
            }
            catch (Exception ex)
            {
                resetError("Error while loading", true);
                CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
            }
            return dsCustomerPO;
        }

        private void CustmerPoList_BuildGridView(DataSet dsCustomerPO)
        {

            gvCustPODetails.DataSource = dsCustomerPO.Tables[0];
            gvCustPODetails.DataBind();
            if (gvCustPODetails.Rows.Count > 0)
            {
                gvCustPODetails.ShowFooter = true;
                gvCustPODetails.Columns[5].Visible = true;

            }
            else
            {
                gvCustPODetails.ShowFooter = false;
                gvCustPODetails.Columns[5].Visible = false;

            }
            dsCustomerPO.Dispose();
        }

        //Delete line items
        protected void lntDeleteItems_Click(object sender, EventArgs e)
        {
            //test case ID (TC_071)
            //delete selected Line Items

            String CustomerPOIds = "";
            CheckBox checkBox;
            Literal literal;
            int count = 0;
            foreach (GridViewRow gvrEachRow in gvCustPODetails.Rows)
            {

                if (gvrEachRow.RowType == DataControlRowType.DataRow)
                {
                    CheckBox c = (CheckBox)gvrEachRow.FindControl("chkDelete");
                    var c1 = (CheckBox)gvrEachRow.FindControl("chkDelete");
                    if (c != null)
                    {
                        if (c.Checked)
                        {
                            count++;
                        }
                    }
                }


                if (gvrEachRow.RowState != DataControlRowState.Edit)
                {
                    checkBox = (CheckBox)gvrEachRow.FindControl("chkDelete");
                    if (checkBox.Checked)
                    {
                        literal = (Literal)gvrEachRow.FindControl("ltcustomPoID");
                        CustomerPOIds += literal.Text + ",";
                    }
                }
            }
            if (count == 0)
            {
                resetCustomerPOgridError("Please select checkbox", true);
                return;
            }
            try
            {
                if (CustomerPOIds != "")
                {
                    //IDataReader GetShipmentreceive = DB.GetRS("[sp_ORD_GetMaterialReceivedOrNot] @SOHeaderID=" + ViewState["HeaderID"].ToString());
                    //if (GetShipmentreceive.Read())
                    //{
                    //    resetCustomerPOgridError("Cannot delete line items, as the Sales Order is configured in outbound/job order", true);
                    //    GetShipmentreceive.Close();
                    //    return;
                    //}
                    //GetShipmentreceive.Close();

                    String cn = "sp_ORD_DeleteCustomerPO @CustomerPOIDs=" + DB.SQuote(CustomerPOIds) + ",@UpdatedBy=" + cp.UserID.ToString();
                    DB.ExecuteSQL(cn);
                    ViewState["CustomerPOListCommand"] = "dbo.sp_ORD_CustomerPOList @SOHeaderID=" + ViewState["HeaderID"].ToString();
                    CustmerPoList_BuildGridView(CustmerPoList_BuildGridView());
                    resetCustomerPOgridError("Successfully deleted", false);

                    if (gvCustPODetails.Rows.Count != 0 || gvSODetails.Rows.Count != 0)
                    {
                        txtCustomname.Enabled = false;
                        txtTenant.Enabled = false;
                    }
                    else
                    {
                        txtCustomname.Enabled = true;
                        txtTenant.Enabled = true;
                    }
                }
            }
            catch (Exception ex)
            {
                resetCustomerPOgridError("Error while deleting", true);
                CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
            }
        }
        //Add new CustomerPODetails item
        protected void lnkButAddNewd_Click(object sender, EventArgs e)
        {

            //test case ID (TC_053)
            //Create dummy row for insert new record
            if (gvSODetails.EditIndex == 0)
            {
                gvSODetails.EditIndex = -1;
                SOQuantityList_BuildGridData(SOQuantityList_BuildGridData());

            }
            String sCmdCustPO = "dbo.sp_ORD_CustomerPOList @SOHeaderID=" + ViewState["HeaderID"].ToString();
            DataSet dsCustomPO = null;
            try
            {
                //IDataReader GetShipmentreceive = DB.GetRS("[sp_ORD_GetMaterialReceivedOrNot] @SOHeaderID=" + ViewState["HeaderID"].ToString());
                //if (GetShipmentreceive.Read())
                //{
                //    resetError("Cannot add new item, as the sales order is configured in outbound/job order", true);
                //    GetShipmentreceive.Close();
                //    return;
                //}
                //GetShipmentreceive.Close();

                dsCustomPO = DB.GetDS(sCmdCustPO, false);
                DataRow drCustPO = dsCustomPO.Tables[0].NewRow();
                drCustPO["CustomerPOID"] = 0;
                drCustPO["CustPONumber"] = "";
                dsCustomPO.Tables[0].Rows.InsertAt(drCustPO, 0);
                //resetCustomerPOgridError("Enter Customer PO details", false);
                gvCustPODetails.EditIndex = 0;
                gvCustPODetails.PageIndex = 0;
                CustmerPoList_BuildGridView(dsCustomPO);
                // resetCustomerPOgridError("Enter Customer PO details", false);              
                Page.Validate();
                ((TextBox)gvCustPODetails.Rows[0].FindControl("txtCustomerPONumber")).Focus();
            }
            catch (Exception ex)
            {
                resetCustomerPOgridError("Error try again", true);
                CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
            }
        }

        protected void resetCustomerPOgridError(string error, bool isError)
        {

            /* string str = "<font class=\"noticeMsg\">NOTICE:</font>&nbsp;&nbsp;&nbsp;";
             if (isError)
                 str = "<font class=\"errorMsg\">ERROR:</font>&nbsp;&nbsp;&nbsp;";

             if (error.Length > 0)
                 str += error + "";
             else
                 str = "";


             ltCustomerStatus.Text = str;*/
            ScriptManager.RegisterStartupScript(this, this.GetType(), "test", "showStickyToast(" + (isError.ToString().ToLower() == "true" ? "false" : "true") + ",\"" + error + "\");", true);

        }

        #endregion

        protected void lnkClose_Click(object sender, EventArgs e)
        {
            cp = HttpContext.Current.User as CustomPrincipal;
            try
            {
                IDataReader GetShipmentreceive = DB.GetRS("[sp_ORD_GetMaterialReceivedOrNot] @SOHeaderID=" + ViewState["HeaderID"].ToString());
                if (GetShipmentreceive.Read())
                {
                    resetError("Cannot close, as the Sales Order is configured in Outbound/Job Order", true);
                    GetShipmentreceive.Close();
                    return;
                }
                GetShipmentreceive.Close();

                //String sCmdClosepo = "update ORD_SOHeader set SOStatusID=4 where SOHeaderID=" + ViewState["HeaderID"].ToString();
                string sCmdCloseso = "Exec [dbo].[USP_UpsertSOStatusByClose] @SOHeaderID=" + ViewState["HeaderID"].ToString();
                DB.ExecuteSQL(sCmdCloseso);
            }
            catch (Exception ex)
            {
                resetError("Error while closing", true);
                CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
            }
            Response.Redirect("SalesOrderInfo.aspx?soid=" + ViewState["HeaderID"].ToString());
        }

        protected void lnksearch_Click(object sender, EventArgs e)
        {
            cp = HttpContext.Current.User as CustomPrincipal;
            //test case ID (TC_100)
            //Part number listed only the materials that are configured in material details

            String text = txtSearch.Text.Trim();
            if (text == "Search Part Number...")
                text = "";

            ViewState["GetSOitemList"] = "Exec [dbo].[sp_ORD_SODetailsList] @SOHeaderID=" + ViewState["HeaderID"].ToString() + ",@MCode='" + text + "'";
            SOQuantityList_BuildGridData(SOQuantityList_BuildGridData());

            if (gvSODetails.Rows.Count == 0)
            {
                pnlgvSoDetails.Visible = false;
            }
            else
            {
                pnlgvSoDetails.Visible = true;
            }
        }

        protected void gvCustPODetails_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            cp = HttpContext.Current.User as CustomPrincipal;
            if (e.Row.RowType == DataControlRowType.DataRow && !(e.Row.RowState == DataControlRowState.Edit))
            {

                DataRow row = ((DataRowView)e.Row.DataItem).Row;
                bool IsInInbound = Convert.ToBoolean(row["IsInOutbound"]);
                if (IsInInbound)
                {
                    e.Row.Controls[5].Controls[1].Visible = false;
                    //e.Row.Controls[7].Controls[0].Visible = false;
                    e.Row.Controls[6].Controls[1].Visible = false;
                }
                //LinkButton lntDeleteItems = (LinkButton)e.Row.FindControl("lntDeleteItems1");

                //string query = "select * from OBD_Outbound_ORD_CustomerPO where SOHeaderID=" + CommonLogic.QueryString("soid");
                //DataSet ds = DB.GetDS(query, false);
                //if (ds.Tables[0].Rows.Count != 0)
                //{

                //    lntDeleteItems.Enabled = false;
                //}
                //else
                //{

                //    lntDeleteItems.Enabled = true;
                //}
            }
        }

        protected void visable()
        {
            tdCusPODet.Visible = true;
        }

        protected void txtCustomname_TextChanged(object sender, EventArgs e)
        {
            resetError(hifCustomerName.Value, true);
        }

        protected void lnkGetCustomerDetails_Click(object sender, EventArgs e)
        {
            //resetError("data",true);
            //txtShipmentCharges.Text = "Data";
            SetCustomerAddress();
           // SetCustomerBillingAddress();
        }

        private void SetCustomerAddress()
        {
            // StringBuilder sCmdCustmer = new StringBuilder("Select CustomerName,Address1,Address2,City,State,GENC.CountryName,Zip,Phone1 from GEN_Customer gen LEFT JOIN GEN_CountryMaster GENC ON gen.CountryMasterID=GENC.CountryMasterID where CustomerID=" + hifCustomerName.Value + "  and TenantID=" + hifTenant.Value);
            //StringBuilder sCmdCustmer = new StringBuilder("Select CustomerName,Address1,Address2,City,State,GENC.CountryName,Zip,Phone1 from GEN_Customer gen LEFT JOIN GEN_CountryMaster GENC ON gen.CountryMasterID=GENC.CountryMasterID where CustomerID=" + hifCustomerName.Value + "  and TenantID=" + hifTenant.Value);

            // added by Meena
            //<!------------------Procedure Conversion-------------->
            //  StringBuilder sCmdCustmer = new StringBuilder("select GEN_MST_Address_ID,GEN_MST_AddressType_ID,[dbo].[UDF_ParseAndReturnLocaleString](AddressLine1,'en') as Address1 ,dbo.UDF_ParseAndReturnLocaleString (AddressLine2,'en') AS Address2 ,CT.CityName as City,ST.StateName as State,CON.CountryName ,ZP.ZipCode as Zip from GEN_MST_Addresses ADS join GEN_CityMaster CT on CT.CityMasterID=ADS.GEN_MST_City_ID join GEN_CountryMaster CON on CON.CountryMasterID=ADS.GEN_MST_Country_ID join GEN_StateMaster ST on ST.StateMasterID=ADS.GEN_MST_State_ID join GEN_ZipCode ZP ON ZP.ZipCodeID=ADS.GEN_MST_ZipCode_ID where GEN_MST_Address_ID=" + hdnaddresstypeid.Value);
            StringBuilder sCmdCustmer = new StringBuilder("[dbo].[USP_GetCustomerAddressData] @GEN_MST_Address_ID =" + hdnaddresstypeid.Value);
            cp = HttpContext.Current.User as CustomPrincipal;

            IDataReader rsCustomer = null;
            try
            {
                rsCustomer = DB.GetRS(sCmdCustmer.ToString());
            }
            catch (Exception ex)
            {
                resetError("Error while loading", true);
                CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
            }
            sCmdCustmer.Clear();
            if (rsCustomer.Read())
            {
                txtCustomname.Text = DB.RSField(rsCustomer, "CustomerName");
                sCmdCustmer.Append("<table class='CustomerAddress'>");
                sCmdCustmer.Append("<tr> <td>Customer Name</td> <td>:</td> <td>" + DB.RSField(rsCustomer, "CustomerName") + "</td> </tr>");
                sCmdCustmer.Append("<tr> <td>Address1</td> <td>:</td> <td> " + DB.RSField(rsCustomer, "Address1") + "</td> </tr>");
                sCmdCustmer.Append("<tr><td>Address2</td><td>:</td><td>" + DB.RSField(rsCustomer, "Address2") + "</td>     </tr>");
                sCmdCustmer.Append("<tr><td>City</td><td>:</td><td>" + DB.RSField(rsCustomer, "City") + "</td>     </tr>");
                sCmdCustmer.Append("<tr><td>State</td><td>:</td><td>" + DB.RSField(rsCustomer, "State") + "</td>     </tr>");
                sCmdCustmer.Append("<tr><td>Country</td><td>:</td><td>" + DB.RSField(rsCustomer, "CountryName") + "</td>     </tr>");
                sCmdCustmer.Append("<tr><td>Zip</td><td>:</td><td>" + DB.RSField(rsCustomer, "Zip") + "</td>     </tr>");
                sCmdCustmer.Append("<tr><td>Phone No.</td><td>:</td><td>" + DB.RSField(rsCustomer, "Phone1") + "</td>     </tr>");
                sCmdCustmer.Append("</table>");
            }
            rsCustomer.Close();

            //lblCustomerAddress.Text = sCmdCustmer.ToString();
        }

        private void SetCustomerBillingAddress()
        {
            //  StringBuilder sCmdCustmer = new StringBuilder("select GC.CustomerName, dbo.UDF_ParseAndReturnLocaleString (MA.AddressLine1,'en') AS AddressLine1, dbo.UDF_ParseAndReturnLocaleString (MA.AddressLine2,'en')  AS AddressLine2,CM.CityName,SM.StateName,GENC.CountryName,ZC.ZipCode,GC.Phone1 from GEN_MST_EntityAddresses MEA JOIN GEN_MST_Addresses MA ON MA.GEN_MST_Address_ID = MEA.GEN_MST_Address_ID JOIN GEN_Customer GC ON GC.CustomerID = MEA.EntityID JOIN GEN_CityMaster CM ON CM.CityMasterID = MA.GEN_MST_City_ID JOIN GEN_StateMaster SM ON SM.StateMasterID = MA.GEN_MST_State_ID JOIN GEN_ZipCode ZC ON ZC.CityMasterID = CM.CityMasterID JOIN GEN_CountryMaster GENC ON GC.CountryMasterID = GENC.CountryMasterID WHERE MA.GEN_MST_AddressType_ID = 3 AND GEN_MST_OrgEntity_ID = 2 AND GC.IsActive = 1 AND GC.IsDeleted = 0 and MA.GEN_MST_Address_ID="+hdnaddresstypeid+" AND CustomerID = " + hifCustomerName.Value );
            // added by Meena
            //  StringBuilder sCmdCustmer = new StringBuilder("select GC.CustomerName,[dbo].[UDF_ParseAndReturnLocaleString](AT.AddressType,'en')+'-'+CONVERT(NVARCHAR(10),DeliveryPoint) as AddressType, dbo.UDF_ParseAndReturnLocaleString (MA.AddressLine1,'en') AS AddressLine1, dbo.UDF_ParseAndReturnLocaleString (MA.AddressLine2,'en')  AS AddressLine2,CM.CityName,SM.StateName,GENC.CountryName,ZC.ZipCode,GC.Phone1 from GEN_MST_EntityAddresses MEA JOIN GEN_MST_Addresses MA ON MA.GEN_MST_Address_ID = MEA.GEN_MST_Address_ID INNER JOIN GEN_MST_AddressTypes AT ON AT.GEN_MST_AddressType_ID = MA.GEN_MST_AddressType_ID AND AT.IsActive = 1 AND AT.IsDeleted = 0  JOIN GEN_Customer GC ON GC.CustomerID = MEA.EntityID JOIN GEN_CityMaster CM ON CM.CityMasterID = MA.GEN_MST_City_ID JOIN GEN_StateMaster SM ON SM.StateMasterID = MA.GEN_MST_State_ID JOIN GEN_ZipCode ZC ON ZC.CityMasterID = CM.CityMasterID JOIN GEN_CountryMaster GENC ON GC.CountryMasterID = GENC.CountryMasterID WHERE  GEN_MST_OrgEntity_ID = 2 and MA.GEN_MST_Address_ID = " + hdnaddresstypeid.Value + " AND GC.IsActive = 1 AND GC.IsDeleted = 0  AND CustomerID = " + hifCustomerName.Value);
            StringBuilder sCmdCustmer = new StringBuilder("Exec [dbo].[USP_GetCustomerBillingAddress] @CustomerID=" + hifCustomerName.Value + ",@GEN_MST_Address_ID=" + hdnaddresstypeid.Value + "");
            IDataReader rsCustomer = null;
            try
            {
                rsCustomer = DB.GetRS(sCmdCustmer.ToString());
            }
            catch (Exception ex)
            {
                resetError("Error while loading", true);
                CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
            }
            sCmdCustmer.Clear();
            if (rsCustomer.Read())
            {
                //txtCustomname.Text = DB.RSField(rsCustomer, "CustomerName");
                //sCmdCustmer.Append("<table class='CustomerAddress'>");
                //sCmdCustmer.Append("<tr> <td>Customer Name</td> <td>:</td> <td>" + DB.RSField(rsCustomer, "CustomerName") + "</td> </tr>");
                //sCmdCustmer.Append("<tr> <td>Address1</td> <td>:</td> <td> " + DB.RSField(rsCustomer, "Address1") + "</td> </tr>");
                //sCmdCustmer.Append("<tr><td>Address2</td><td>:</td><td>" + DB.RSField(rsCustomer, "Address2") + "</td>     </tr>");
                //sCmdCustmer.Append("<tr><td>City</td><td>:</td><td>" + DB.RSField(rsCustomer, "City") + "</td>     </tr>");
                //sCmdCustmer.Append("<tr><td>State</td><td>:</td><td>" + DB.RSField(rsCustomer, "State") + "</td>     </tr>");
                //sCmdCustmer.Append("<tr><td>Country</td><td>:</td><td>" + DB.RSField(rsCustomer, "CountryName") + "</td>     </tr>");
                //sCmdCustmer.Append("<tr><td>Zip</td><td>:</td><td>" + DB.RSField(rsCustomer, "Zip") + "</td>     </tr>");
                //sCmdCustmer.Append("<tr><td>Phone No.</td><td>:</td><td>" + DB.RSField(rsCustomer, "Phone1") + "</td>     </tr>");
                //sCmdCustmer.Append("</table>");
                txtaddresstype.Text = DB.RSField(rsCustomer, "AddressType");
                txtCustomname.Text = DB.RSField(rsCustomer, "CustomerName");
                txtBCustName.Text = DB.RSField(rsCustomer, "CustomerName");
                txtBAddress1.Text = DB.RSField(rsCustomer, "AddressLine1");
                txtBAddress2.Text = DB.RSField(rsCustomer, "AddressLine2");
                txtBCity.Text = DB.RSField(rsCustomer, "CityName");
                txtBState.Text = DB.RSField(rsCustomer, "StateName");
                txtBCountyMaster.Text = DB.RSField(rsCustomer, "CountryName");
                txtBZip.Text = DB.RSField(rsCustomer, "ZipCode");
                //txtBPhoneNo.Text = DB.RSField(rsCustomer, "Phone1");
            }
            rsCustomer.Close();

            //lblCustomerBillingAddress.Text = sCmdCustmer.ToString();
        }

        //protected void lnkClear_Click(object sender, EventArgs e)
        //{
        //    txtSOType.Text = "";
        //    txtSoDate.Text = "";
        //    txtTenant.Text = "";
        //    txtCustomname.Text = "";
        //    txtProjectCode.Text = "";
        //    txtRequirementNumber.Text = "";
        //    txtFreightCompany.Text = "";
        //    txtShipmentCharges.Text = "";
        //    txtGrossValue.Text = "";
        //    txtNetValue.Text = "";
        //    txtlCurrency.Text = "";
        //    txtSOTax.Text = "";
        //    txtDeliverydate.Text = "";
        //}

        [WebMethod]
        public static string getCustomerData(string CustomerID)
        {
            try
            {
                DataSet ds = DB.GetDS("EXEC [dbo].[USP_GetCustomerBillingAddress] @CustomerID=" + CustomerID, false);
                return JsonConvert.SerializeObject(ds);
            }
            catch (Exception ex)
            {
                return "Error : " + ex;
            }
        }
    }
}
