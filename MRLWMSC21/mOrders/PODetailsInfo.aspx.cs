using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using MRLWMSC21Common;
using System.Data.SqlClient;
using System.Text;
using System.Web.Security;
using System.Security.Principal;
using System.Data;
using System.Globalization;
using ClosedXML.Excel;
using System.IO;
using System.Resources;
using System.Threading;
using OfficeOpenXml;
using OfficeOpenXml.Style;
using System.Web.Services;

//using DocumentFormat.OpenXml.Packaging;

namespace MRLWMSC21.mOrders
{
    //Author    :   Gvd Prasad
    //Created On:   3-Oct-2013
    //Use case ID:  Purchase order_UC_008

    //This class for generating phurchase Order
    public partial class PODetailsInfo : System.Web.UI.Page
    {

        //int Tenant = 1;
        //int CreatedBy = 1;
        LinkButton button;

        public CustomPrincipal cp = HttpContext.Current.User as CustomPrincipal;
        public static CustomPrincipal cp1 = null;
        public static string POID;

        protected void Page_PreInit(object sender, EventArgs e)
        {
            cp1 = HttpContext.Current.User as CustomPrincipal;
            Page.Theme = "Orders";//_sit";
        }

        protected void page_Init(object sender, EventArgs e)
        {

            // AddDynamicColumns();

        }

        protected void Page_Load(object sender, EventArgs e)
        {
            cp = HttpContext.Current.User as CustomPrincipal;
            // DesignLogic.SetInnerPageSubHeading(this.Page, "PO Details");
            ScriptManager scriptManager = ScriptManager.GetCurrent(this.Page);
            scriptManager.RegisterPostBackControl(this.ImgExport);

            Page.Validate();
            //if (!cp.IsInAnyRoles(CommonLogic.GetRolesAllowed(CommonLogic.GetRolesAllowedForthisPage("New Purchase Order"))))
            //{
            //    Response.Redirect("../Login.aspx?eid=6");
            //}

            if (!IsPostBack)
            {
                Page.Form.Attributes.Add("enctype", "multipart/form-data");
                DesignLogic.SetInnerPageSubHeading(this.Page, "Inward Order Details");
                txtSearch.ForeColor = System.Drawing.Color.Black;
                try
                {
                    IDataReader configreader = DB.GetRS("EXEC sp_SYS_GetSystemConfigValue @SysConfigKey=N'purchaseorder.aspx.cs.PONumberAutoGenerated',@TenantID=" + cp.TenantID);
                    configreader.Read();
                    Boolean autogenerate = Convert.ToBoolean(configreader[0]);
                    configreader.Close();
                    if (!autogenerate)
                    {
                        txtPONumber.Enabled = true;
                        IbutNew.Visible = false;
                        txtPONumber.Focus();
                    }
                    else

                    {
                        txtPONumber.Enabled = false;
                        //IbutNew.Visible = true;
                        IbutNew.Visible = false;
                        IbutNew.Focus();
                    }

                }
                catch (Exception ex)
                {
                    CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
                    txtPONumber.Enabled = true;
                    IbutNew.Visible = false;
                }

                if (CommonLogic.QueryString("poid") != "")
                {
                    ViewState["HeaderID"] = CommonLogic.QueryString("poid");
                    POID = CommonLogic.QueryString("poid");

                    lnkaddnewrow.Visible = true;

                    tdPODetails.Visible = true;
                    tdSupinvoice.Visible = true;
                    BuildFormData();
                    lnkUpdate.Text = "Save" + CommonLogic.btnfaUpdate;
                    lnkClear.Visible = false;

                    string sql = "select POStatusID from ORD_POHeader where POHeaderID = " + ViewState["HeaderID"].ToString();
                    DataSet ds = DB.GetDS(sql, false);
                    int status = 0;
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                         status = Convert.ToInt32(ds.Tables[0].Rows[0]["POStatusID"]);
                    }
                    if (status == 3)
                    {
                        lnkUpdate.Visible = false;
                        lnkaddnewrow.Enabled = false;
                    }
                    
                        if (CommonLogic.QueryString("cancelstatus") == "true")
                    {
                       // resetError("Successfully Cancelled", true);
                    }
                    if (CommonLogic.QueryString("Createsuccess") == "true")
                    {
                        resetError("Successfully Saved", false);
                    }
                    else if (CommonLogic.QueryString("Updatesuccess") == "true")
                    {
                        resetError("Successfully Saved", false);
                    }

                    #region added by kashyap on 25-01-2018
                  //  <!----------------------Procedure Conversion------>
                  //  string query = "select * from INB_Inbound_ORD_SupplierInvoice where POHeaderID=" + ViewState["HeaderID"].ToString();
                    string query = "Exec [dbo].[USP_Inbound_SupplierInvoiceCount] @POHeaderID=" + ViewState["HeaderID"].ToString();
                    DataSet _ds = DB.GetDS(query, false);
                    int inbStatusID = DB.GetSqlN("EXEC [dbo].[USP_ORD_CheckInboundStatusWithPO] @POHeaderID=" + ViewState["HeaderID"].ToString());
                    if (inbStatusID > 2)  //=================== Commented By M.D.Prasad On 01 - Dec - 2020 =====================
                    {
                        if (_ds.Tables[0].Rows.Count != 0)
                        {
                            lnkaddnewrow.Enabled = false;
                            // lnkUpdate.Enabled = false;
                        }
                    }
                    else
                    {
                        //if (status == 3 || status == 2 || status == 4) =================== Commented By M.D.Prasad On 01-Dec-2020 =====================
                        if (status == 3 || status == 4)
                        {
                            lnkaddnewrow.Enabled = false;
                            // lnkimport.Enabled = false;
                            lnkimport.Enabled = false;
                        }
                        else
                        {
                            lnkaddnewrow.Enabled = true;
                        }



                        // lnkUpdate.Enabled = true;
                    }
                    #endregion
                }
                else
                {
                    ViewState["HeaderID"] = 0;
                    //ltsearch.Visible = false;
                    txtSearch.Visible = false;
                    Inksearch.Visible = false;

                    pnlgvPODetails.Visible = false;
                    chkIsActive.Checked = true;
                    lnkNewInv.Visible = false;
                    tdPODetails.Visible = false;
                    tdSupinvoice.Visible = false;
                    lnkClose.Enabled = false;
                    lnkCancel.Visible = false;
                    lnkUpdate.Text = "Save" + CommonLogic.btnfaSave;
                    lnkCancel.Text = "Cancel" + CommonLogic.btnfaClear;
                }

                //string MMid = hifMaterialMasterId.Value;
                //if (MMid != "")
                //{
                //    string ISrequired = "0";
                //    string ParameterName = "";
                //    string _Query = "select mm.MaterialMaster_MaterialStorageParameterID,mm.MaterialMasterID,mm.IsRequired,mm.MaterialStorageParameterID,msp.ParameterName from MMT_MaterialMaster_MSP mm join MMT_MSP msp on mm.MaterialStorageParameterID = msp.MaterialStorageParameterID where mm.MaterialMasterID=" + MMid;
                //    DataSet DS = DB.GetDS(_Query, false);
                //    if (DS.Tables[0].Rows.Count != 0)
                //    {
                //        foreach (DataRow Row1 in DS.Tables[0].Rows)
                //        {
                //            ISrequired = Row1["IsRequired"].ToString();
                //            ParameterName = Row1["ParameterName"].ToString();
                //            if (DS.Tables != null)
                //            {
                //                if (ParameterName == "MfgDate" && ISrequired == "True")
                //                {
                //                    hdnmfgdate.Value = "1";
                //                }
                //                else if (ParameterName == "MfgDate" && ISrequired == "False")
                //                {
                //                    hdnmfgdate.Value = "0";
                //                }
                //                else if (ParameterName == "ExpDate" && ISrequired == "True")
                //                {
                //                    hdnexpdate.Value = "1";

                //                }
                //                else if (ParameterName == "ExpDate" && ISrequired == "False")
                //                {
                //                    hdnmfgdate.Value = "0";

                //                }
                //                else if (ParameterName == "BatchNo" && ISrequired == "True")
                //                {
                //                    hdnbatchno.Value = "1";

                //                }
                //                else if (ParameterName == "BatchNo" && ISrequired == "False")
                //                {
                //                    hdnmfgdate.Value = "0";

                //                }

                //                else if (ParameterName == "ProjectRefNo" && ISrequired == "True")
                //                {
                //                    hdnprojrefno.Value = "1";

                //                }
                //                else if (ParameterName == "ProjectRefNo" && ISrequired == "False")
                //                {
                //                    hdnmfgdate.Value = "0";

                //                }
                //            }
                //        }
                //    }
                //    else
                //    {
                //        hdnmfgdate.Value = "0";
                //        hdnexpdate.Value = "0";
                //        hdnbatchno.Value = "0";
                //        hdnprojrefno.Value = "0";
                //    }
                //}


            }
            else
            {
                #region added by kashyap on 25-01-2018
                //<!---------------Procedure Conversion----------->
               // string Query = "select * from INB_Inbound_ORD_SupplierInvoice where POHeaderID=" + ViewState["HeaderID"].ToString();
                string Query = "Exec [dbo].[USP_Inbound_SupplierInvoiceCount] @POHeaderID=" + ViewState["HeaderID"].ToString();
                DataSet _Ds = DB.GetDS(Query, false);

                int inbStatusID = DB.GetSqlN("EXEC [dbo].[USP_ORD_CheckInboundStatusWithPO] @POHeaderID=" + ViewState["HeaderID"].ToString()); //==================== Added By M.D.Prasad On 01-Jan-2020 =====================

                if (inbStatusID > 2) //==================== Added By M.D.Prasad On 01-Jan-2020 =====================//
                {
                    if (_Ds.Tables[0].Rows.Count != 0)
                    {
                        lnkaddnewrow.Enabled = false;
                        // lnkUpdate.Enabled = false;
                    }
                }                   
                else
                {
                    lnkaddnewrow.Enabled = true;
                    // lnkUpdate.Enabled = true;
                }
                #endregion
            }
        }
        protected void Page_PreRender(object sender, EventArgs e)
        {
        }
        public void ExportDataToExcell(DataSet p_dsSrc, string fileName, List<int> notReqiredCoulumnIndex)
        {
            cp = HttpContext.Current.User as CustomPrincipal;
            string strOperationNumber = string.Empty;
            ExcelPackage objExcelPackage = new ExcelPackage();
            foreach (DataTable dtSrc in p_dsSrc.Tables)
            {


                //Create the worksheet    
                ExcelWorksheet objWorksheet = objExcelPackage.Workbook.Worksheets.Add(dtSrc.TableName);
                //Load the datatable into the sheet, starting from cell A1. Print the column names on row 1    
                //Rows
                //Adding Headers
                for (int index = 0; index < dtSrc.Rows.Count; index++)
                {
                    //Columns
                    for (int colindex = 0; colindex < dtSrc.Columns.Count; colindex++)
                    {
                        // Checking for row index and wring header data
                        if (index == 0)
                        {
                            if (notReqiredCoulumnIndex.IndexOf(colindex) == -1)
                            {
                                objWorksheet.Cells[index + 1, colindex + 1].RichText.Text = dtSrc.Columns[colindex].Caption;
                                objWorksheet.Cells[index + 2, colindex + 1].RichText.Text = dtSrc.Rows[index][colindex].ToString();
                            }
                        }
                        else
                        {
                            if (notReqiredCoulumnIndex.IndexOf(colindex) == -1)
                            {
                                objWorksheet.Cells[index + 2, colindex + 1].RichText.Text = dtSrc.Rows[index][colindex].ToString();
                            }
                        }
                    }
                }
                objWorksheet.Cells.Style.Font.SetFromFont(new System.Drawing.Font("Calibri", 12));
                objWorksheet.Cells.AutoFitColumns();
                //Format the header    
                using (ExcelRange objRange = objWorksheet.Cells["A1:XFD1"])
                {
                    objRange.Style.Font.Bold = true;
                    objRange.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    objRange.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                }
            }
            try
            {
                string strUploadPath = System.Web.HttpContext.Current.Server.MapPath("..\\ExcelData");
                objExcelPackage.SaveAs(new System.IO.FileInfo(strUploadPath + "\\" + fileName + ".xlsx"));
                DownLoad(fileName);
            }

            catch (Exception ex)
            {

            }

        }
        public void DownLoad(string FName)
        {
            cp = HttpContext.Current.User as CustomPrincipal;
            string Filpath = Server.MapPath("~/ExcelData/" + FName + ".xlsx");

            string path = FName + ".xlsx";
            System.IO.FileInfo file = new System.IO.FileInfo(Filpath);

            if (file.Exists)
            {
                try
                {
                    Response.Clear();
                    Response.ContentType = "text/plain";
                    Response.AppendHeader("Content-Disposition", "attachment; filename=" + path + ";");
                    Response.WriteFile(Filpath);
                    Response.Flush();
                }
                catch (Exception ex)
                {
                    // any error handling mechanism
                }
                finally
                {
                    if (System.IO.File.Exists(Filpath))
                    {
                        System.IO.File.Delete(Filpath);
                    }
                    HttpContext.Current.ApplicationInstance.CompleteRequest();
                }
            }

        }

        public static void ExportToSpreadsheet(DataTable table, string name)
        {
            cp1 = HttpContext.Current.User as CustomPrincipal;
            HttpContext context = HttpContext.Current;
            context.Response.Clear();
            foreach (DataColumn column in table.Columns)
            {
                context.Response.Write(column.ColumnName + ",");
            }
            context.Response.Write(Environment.NewLine);
            foreach (DataRow row in table.Rows)
            {
                for (int i = 0; i < table.Columns.Count; i++)
                {
                    context.Response.Write(row[i].ToString().Replace(",", string.Empty) + ",");
                }
                context.Response.Write(Environment.NewLine);
            }
            context.Response.ContentType = "application/vnd.ms-excel";
            context.Response.AppendHeader("Content-Disposition", "attachment; filename=" + name + ".xlsx");
            context.Response.Flush();
            context.Response.End();
        }

        //This Method for Build Form Data
        private void BuildFormData()
        {
            cp = HttpContext.Current.User as CustomPrincipal;
            try
            {


                IDataReader rsPODetails = DB.GetRS("EXEC dbo.sp_ORD_GetPOHeaderDetails @POHeaderID=" + ViewState["HeaderID"].ToString());
                if (!rsPODetails.Read())
                {
                    // ltsearch.Visible = false;
                    txtSearch.Visible = false;
                    Inksearch.Visible = false;
                    pnlgvPODetails.Visible = false;
                    resetError("No details available", true);
                    rsPODetails.Close();
                    return;
                }
                ltheaderId.Text = CommonLogic.QueryString("mfgid");
                txtPONumber.Text = DB.RSField(rsPODetails, "PONumber");
                txtPODate.Text = DB.RSFieldDateTime(rsPODetails, "PODate").ToString("dd-MMM-yyyy");
                hidSupplier.Value = "" + DB.RSFieldInt(rsPODetails, "SupplierID");
                atcSupplier.Text = DB.RSField(rsPODetails, "SupplierName");
                txtDateRequested.Text = (DB.RSFieldDateTime(rsPODetails, "DateRequested") != DateTime.MinValue ? DB.RSFieldDateTime(rsPODetails, "DateRequested").ToString("dd-MMM-yyyy") : "");
                txtDateDue.Text = (DB.RSFieldDateTime(rsPODetails, "DateDue") != DateTime.MinValue ? DB.RSFieldDateTime(rsPODetails, "DateDue").ToString("dd-MMM-yyyy") : "");
                hifTenant.Value = DB.RSFieldInt(rsPODetails, "TenantID").ToString();
                txtTenant.Text = DB.RSField(rsPODetails, "CompanyName");

                hidCurrency.Value = "" + DB.RSFieldInt(rsPODetails, "CurrencyID");
                atcCurrency.Text = DB.RSField(rsPODetails, "Currency");


                txtExchangeRate.Text = eliminateZero(DB.RSFieldDecimal(rsPODetails, "ExchangeRate"));

                txtTotalValue.Text = eliminateZero(DB.RSFieldDecimal(rsPODetails, "TotalValue"));

                //atcDivision.Text = DB.RSField(rsPODetails, "Division");
                //hifDivision.Value =""+ DB.RSFieldInt(rsPODetails, "DivisionID");

                //atcDepartment.Text = DB.RSField(rsPODetails, "Department");
                //hifDeparment.Value =""+ DB.RSFieldInt(rsPODetails, "DepartmentID");

                txtareaInstructions.Text = DB.RSField(rsPODetails, "Instructions");

                txtareaRemarks.Text = DB.RSField(rsPODetails, "Remarks");
                ltPOStatus.Text = DB.RSField(rsPODetails, "StatusName");
                ltPOStatus.Text = DB.RSField(rsPODetails, "StatusName");
                if (DB.RSFieldInt(rsPODetails, "IsReceived") == 1)
                {
                    lnkCancel.Visible = false;
                }
                if (DB.RSFieldInt(rsPODetails, "POStatusID") != 1 && DB.RSFieldInt(rsPODetails, "POStatusID") != 2 )
                {
                    gvInvoicDetails.Enabled = false;
                    //GVPODetails.Enabled = false;
                    gvSupplerInvoiceMaterialList.Enabled = false;
                    lnkNewinvoiceItemDetials.Enabled = false;
                    //lnkaddnewrow.Enabled = false; ================== Commented By M.D.Prasad ==================
                    lnkClose.Enabled = false;
                    lnkCancel.Visible = false;
                    lnkNewInv.Enabled = false;
                    lnkUpdate.Enabled = false;
                    lnkimport.Enabled = false;
                    FUImport.Enabled = false;


                }
                txtPOTax.Text = eliminateZero(DB.RSFieldDecimal(rsPODetails, "POTax"));

                atcPOType.Text = DB.RSField(rsPODetails, "POType");
                hifPOType.Value = "" + DB.RSFieldInt(rsPODetails, "POtypeID");

                IbutNew.Visible = false;
                txtPONumber.Enabled = false;



                ViewState["PODetailsList"] = "EXEC dbo.sp_ORD_PODetailsList  @POHeaderID=" + ViewState["HeaderID"].ToString() + " ,@MCode=''";
                RFDDetails_buildGridData(RFDDetails_buildGridData());

                ViewState["InvoiceSQl"] = "sp_ORD_SupplierInvoiceList @POHeaderId=" + ViewState["HeaderID"].ToString();
                Build_gvInvoice(Build_gvInvoice());

                chkIsActive.Checked = DB.RSFieldBool(rsPODetails, "IsActive");

                rsPODetails.Close();

                if (gvInvoicDetails.Rows.Count != 0 || GVPODetails.Rows.Count != 0)
                {
                    atcSupplier.Enabled = false;
                    txtTenant.Enabled = false;
                }

                if (GVPODetails.Rows.Count == 0)
                {
                    //ltsearch.Visible = false;
                    txtSearch.Visible = false;
                    Inksearch.Visible = false;
                    pnlgvPODetails.Visible = false;
                }
            }
            catch (Exception ex)
            {
                resetError("Error while updating", true);
                CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
            }
        }

        private String eliminateZero(Decimal Value)
        {
            return (Value != 0 ? Value.ToString() : "");
        }

        private void RFDDetails_buildGridData(DataSet ds)
        {

            if (ds != null)
            {
                GVPODetails.DataSource = ds.Tables[0];
                GVPODetails.DataBind();

                ds.Dispose();
            }

        }

        private DataSet RFDDetails_buildGridData()
        {
            cp = HttpContext.Current.User as CustomPrincipal;
            try
            {
                String sql = ViewState["PODetailsList"].ToString();
                DataSet ds = DB.GetDS(sql, false);
                return ds;
            }
            catch (Exception ex)
            {
                resetgridError("Error while build data", true);
                CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
                return null;
            }
        }

        #region --------------Controls Handling------------

        //Add new Line Item
        protected void btaddnewrow_Click1(object sender, EventArgs e)
        {
         //<!------------Procedure Converting--------------->
          //  string Query = "select POStatusID AS N from ORD_POHeader where POHeaderID=" + ViewState["HeaderID"].ToString();
          string Query= "Exec [dbo].[USP_MST_POStatusDrop] @POHeaderID=" + ViewState["HeaderID"].ToString();
            cp = HttpContext.Current.User as CustomPrincipal;
            int StatusID = DB.GetSqlN(Query);
            int inbStatusID = DB.GetSqlN("EXEC [dbo].[USP_ORD_CheckInboundStatusWithPO] @POHeaderID=" + ViewState["HeaderID"].ToString());

            if (inbStatusID > 2)
            {
                if (StatusID != 1)
                {
                    lnkaddnewrow.Enabled = false;

                    resetError("Unable to add new materials", true);
                    return;
                }
            }
            else
            {
                DataSet dsPODetails = null;
                int LineNumber = 0;
                if (gvInvoicDetails.EditIndex == 0)
                {
                    gvInvoicDetails.EditIndex = -1;
                    Build_gvInvoice(Build_gvInvoice());

                }
                String cmdPodetailsList = "EXEC dbo.sp_ORD_PODetailsList  @POHeaderID=" + ViewState["HeaderID"].ToString() + " ,@MCode=''";
                try
                {
                    /*IDataReader GetShipmentreceive = DB.GetRS("[sp_ORD_GetMaterialReceivedOrNot] @POHeaderID=" + ViewState["HeaderID"].ToString());
                    if (GetShipmentreceive.Read())
                    {
                        resetgridError("Purchase Order is received,cannot add new item", true);
                        return;
                    }*/


                    dsPODetails = DB.GetDS(cmdPodetailsList, false);
                    //<!----------------Procedure conversion-------------------->
                    //  LineNumber = DB.GetSqlN("select Max(LineNumber) as N from ORD_PODetails where IsDeleted=0 AND POHeaderID=" + ViewState["HeaderID"].ToString());
                    LineNumber = DB.GetSqlN("Exec [dbo].[USP_MaxLineNumber] @POHeaderID = " + ViewState["HeaderID"].ToString());
                    DataRow drNewRow = dsPODetails.Tables[0].NewRow();
                    drNewRow["PODetailsID"] = 0;
                    drNewRow["RequirementNumber"] = "";
                    drNewRow["LineNumber"] = ++LineNumber;
                    drNewRow["IsKitParent"] = 1;
                    drNewRow["InvoiceIDs"] = "No Invoice";

                    dsPODetails.Tables[0].Rows.InsertAt(drNewRow, 0);
                    GVPODetails.EditIndex = 0;
                    GVPODetails.PageIndex = 0;
                    RFDDetails_buildGridData(dsPODetails);
                    ((TextBox)GVPODetails.Rows[0].FindControl("atcMCode")).Focus();

                    Page.Validate();
                    //ltsearch.Visible = true;
                    txtSearch.Visible = true;
                    Inksearch.Visible = true;
                    pnlgvPODetails.Visible = true;

                    // resetgridError("Enter new lineitem details", false);
                }
                catch (Exception ex)
                {
                    resetError("Error try again", true);
                    CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
                }
                // lnkUpdate.Enabled = true;
            }

            // Test case ID (TC_041)
            //Create dummy Row for adding new Item details

            //DataSet dsPODetails = null;
            //int LineNumber = 0;

            //String cmdPodetailsList = "EXEC dbo.sp_ORD_PODetailsList  @POHeaderID=" + ViewState["HeaderID"].ToString() + " ,@MCode=''";
            //try
            //{
            //    /*IDataReader GetShipmentreceive = DB.GetRS("[sp_ORD_GetMaterialReceivedOrNot] @POHeaderID=" + ViewState["HeaderID"].ToString());
            //    if (GetShipmentreceive.Read())
            //    {
            //        resetgridError("Purchase Order is received,cannot add new item", true);
            //        return;
            //    }*/


            //    dsPODetails = DB.GetDS(cmdPodetailsList, false);

            //    LineNumber = DB.GetSqlN("select Max(LineNumber) as N from ORD_PODetails where IsDeleted=0 AND POHeaderID=" + ViewState["HeaderID"].ToString());
            //    DataRow drNewRow = dsPODetails.Tables[0].NewRow();
            //    drNewRow["PODetailsID"] = 0;
            //    drNewRow["RequirementNumber"] = "";
            //    drNewRow["LineNumber"] = ++LineNumber;
            //    drNewRow["IsKitParent"] =1;
            //    drNewRow["InvoiceIDs"] = "No Invoice";

            //    dsPODetails.Tables[0].Rows.InsertAt(drNewRow,0);
            //    GVPODetails.EditIndex = 0;
            //    GVPODetails.PageIndex = 0;
            //    RFDDetails_buildGridData(dsPODetails);
            //    ((TextBox)GVPODetails.Rows[0].FindControl("atcMCode")).Focus();

            //    Page.Validate();
            //    //ltsearch.Visible = true;
            //    txtSearch.Visible = true;
            //    Inksearch.Visible = true;
            //    pnlgvPODetails.Visible = true;

            //   // resetgridError("Enter new lineitem details", false);
            //}
            //catch (Exception ex)
            //{
            //    resetError("Error try again", true);
            //     CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
            //}

        }

        //Add new Form
        protected void lbutAddNew_Click(object sender, EventArgs e)
        {
            Response.Redirect("PODetailsInfo.aspx");
        }

        //get Initial Form Commented By MD.Prasad //
        //protected void lnkCancel_Click(object sender, EventArgs e)
        //{

        //    //test case ID (TC_040)
        //    //close the Po by forcibly

        //    try
        //    {
        //        IDataReader GetShipmentreceive = DB.GetRS("[sp_ORD_GetMaterialReceivedOrNot] @POHeaderID=" + ViewState["HeaderID"].ToString());
        //        if (GetShipmentreceive.Read())
        //        {
        //            resetError("Cannot cancel, as the Purchase order is configured in Inbound", true);
        //            GetShipmentreceive.Close();
        //            return;
        //        }
        //        GetShipmentreceive.Close();
        //    }
        //    catch (Exception ex)
        //    {
        //        resetError("Error while canceling", true);
        //        CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
        //        return;
        //    }
        //    //BuildFormData();
        //    String sCmdClosePO = "update ORD_POHeader set POStatusID=3 where POHeaderID=" + ViewState["HeaderID"].ToString();
        //    DB.ExecuteSQL(sCmdClosePO);
        //    Response.Redirect("PODetailsInfo.aspx?poid=" + ViewState["HeaderID"].ToString());
        //}


        //========================== Added By MD.Prasad For Confirmation Popup Window ========================== //
        [WebMethod]
        public static string CancelPO()
        {
            try
            {
                IDataReader GetShipmentreceive = DB.GetRS("[sp_ORD_GetMaterialReceivedOrNot] @POHeaderID=" + POID);
                if (GetShipmentreceive.Read())
                {
                    GetShipmentreceive.Close();
                    return "-1";
                }
                GetShipmentreceive.Close();
            }
            catch (Exception ex)
            {
                CommonLogic.createErrorNode(cp1.UserID + " / " + cp1.FirstName, "PoDeatilsInfo", ex.Source, ex.Message, ex.StackTrace);
                return "1";
            }
            //<!--------------Procedure Conversion----------------->
           // String sCmdClosePO = "update ORD_POHeader set POStatusID=3 where POHeaderID=" + POID;
            String sCmdClosePO = "Exec [dbo].[USP_UpdatePoStatus] @POHeaderID = " + POID;
            DB.ExecuteSQL(sCmdClosePO);
            return POID;
        }
        //========================== Added By MD.Prasad For Confirmation Popup Window ========================== //

        //Update Phurchase Order 
        protected void lnkUpdate_Click(object sender, EventArgs e)
        {
            cp = HttpContext.Current.User as CustomPrincipal;
            if (GVPODetails.EditIndex == 0)
            {
                GVPODetails.EditIndex = -1;
                RFDDetails_buildGridData(RFDDetails_buildGridData());

            }
            Page.Validate("save");

            if (!Page.IsValid) {
                resetError("Please check all mandatory fields", true);
                return;
            }
            int POHeaderID = 0;
            try
            {
                IDataReader GetShipmentreceive = DB.GetRS("[sp_ORD_GetMaterialReceivedOrNot] @POHeaderID=" + ViewState["HeaderID"].ToString());
                if (GetShipmentreceive.Read())
                {
                    resetError("PO is mapped to an inbound, Cannot update", true);
                    GetShipmentreceive.Close();
                    return;
                }
                GetShipmentreceive.Close();

                StringBuilder sCmdPoHeadr = new StringBuilder();
                sCmdPoHeadr.Append("DECLARE @UpdatePOHeaderID int EXEC ");
                sCmdPoHeadr.Append("[dbo].[sp_ORD_UpsertPOHeader] ");


                sCmdPoHeadr.Append("@POHeaderID=" + ViewState["HeaderID"].ToString());
                sCmdPoHeadr.Append(",@PONumber=" + DB.SQuote(txtPONumber.Text.Trim()));

                String PODate = "";
                if (txtPODate.Text.Trim() != "")
                    PODate = DB.SQuote(CommonLogic.GetConfigValue(cp.TenantID, "DateFormat") == "dd-M-yy" ? DateTime.ParseExact(txtPODate.Text.Trim(), "dd-M-yy", CultureInfo.InvariantCulture).ToString("MM/dd/yyyy") : txtPODate.Text.Trim());
                else
                    PODate = "NULL";

                sCmdPoHeadr.Append(",@PODate=" + PODate);
                String str = Request.Form[hidSupplier.UniqueID] != "" ? Convert.ToString(Request.Form[hidSupplier.UniqueID]) : "null";
                sCmdPoHeadr.Append(",@SupplierID=" + str);

                String DateRequested = "";
               if (txtDateRequested.Text.Trim() != "")
                    DateRequested = DB.SQuote(CommonLogic.GetConfigValue(cp.TenantID, "DateFormat") == "dd-M-yy" ? DateTime.ParseExact(txtDateRequested.Text.Trim(), "dd-M-yy", CultureInfo.InvariantCulture).ToString("MM/dd/yyyy") : txtDateRequested.Text.Trim());
              else
                   DateRequested = "NULL";


                sCmdPoHeadr.Append(",@DateRequested=" + DateRequested);
                str = txtDateDue.Text.Trim() != "" ? txtDateDue.Text.Trim() : DateTime.MinValue.ToString();

                String DateDue = "";
                if (txtDateDue.Text.Trim() != "")
                    DateDue = DB.SQuote(CommonLogic.GetConfigValue(cp.TenantID, "DateFormat") == "dd-M-yy" ? DateTime.ParseExact(txtDateDue.Text.Trim(), "dd-M-yy", CultureInfo.InvariantCulture).ToString("MM/dd/yyyy") : txtDateDue.Text.Trim());
                else
                    DateDue = "NULL";
                string updatedon = DateTime.Now.ToString("MM/dd/yyyy hh:mm:ss");
                sCmdPoHeadr.Append(",@DateDue=" + DateDue);
                sCmdPoHeadr.Append(",@DepartmentID=null");// + (atcDepartment.Text!=""&&hifDeparment.Value!=""?hifDeparment.Value:"NULL"));
                sCmdPoHeadr.Append(",@CreatedBy=" + cp.UserID.ToString());
                sCmdPoHeadr.Append(",@DivisionID=null");// + (atcDivision.Text!=""&&hifDivision.Value!=""?hifDivision.Value:"NULL"));

                sCmdPoHeadr.Append(",@RequestedBy="+cp.UserID);
                sCmdPoHeadr.Append(",@LastModifiedBy="+cp.UserID);
                str = txtTotalValue.Text.Trim() != "" ? txtTotalValue.Text.Trim() : "null";
                sCmdPoHeadr.Append(",@TotalValue=" + str);
                str = Request.Form[hidCurrency.UniqueID] != ""&&atcCurrency.Text!="" ? Request.Form[hidCurrency.UniqueID] : "null";
                sCmdPoHeadr.Append(",@CurrencyID=" + str);
                str = txtExchangeRate.Text.Trim() != "" ? txtExchangeRate.Text.Trim() : "null";
                sCmdPoHeadr.Append(",@ExchangeRate=" + str);
                str = txtareaInstructions.Text.Trim() != "" ? DB.SQuote( txtareaInstructions.Text.Trim()) : "null";
                sCmdPoHeadr.Append(",@Instructions=" + str);

               // str = Request.Form[hifPOStatus.UniqueID] != "" ? Request.Form[hifPOStatus.UniqueID] : "null";
                sCmdPoHeadr.Append(",@POStatusID=1");

                str = Request.Form[hifPOType.UniqueID] != "" ? Request.Form[hifPOType.UniqueID] : "null";
                sCmdPoHeadr.Append(",@POTypeID=" + str);
                sCmdPoHeadr.Append(",@IsActive=" + Convert.ToInt16(chkIsActive.Checked));
                sCmdPoHeadr.Append(",@IsDeleted=" + Convert.ToInt16(chkIsDeleted.Checked));
                sCmdPoHeadr.Append(",@UpdatedOn=" + DB.SQuote(updatedon));
               // sCmdPoHeadr.Append(",@UpdatedBy=" + cp.UserID);

                str = txtareaRemarks.Text != "" ?DB.SQuote( txtareaRemarks.Text ): "null";
                sCmdPoHeadr.Append(",@Remarks=" + str);
                sCmdPoHeadr.Append(",@POTax=" + (txtPOTax.Text.Trim()!=""?txtPOTax.Text.Trim():"NULL"));
                sCmdPoHeadr.Append(",@AccountID= " + cp1.AccountID);
                sCmdPoHeadr.Append(",@TenantID= " + hifTenant.Value);

                sCmdPoHeadr.Append(",@NewPOHeaderID = @UpdatePOHeaderID OUTPUT Select @UpdatePOHeaderID as N");
                Boolean IsDeleted = chkIsDeleted.Checked;
                
                try
                {

                    POHeaderID = DB.GetSqlN(sCmdPoHeadr.ToString());
                    if (IsDeleted)
                    {
                        Response.Redirect("POList.aspx");
                    }
                  
                    lnkaddnewrow.Visible = true;
                    lnkNewInv.Visible = true;
                    tdPODetails.Visible = true;
                    ltPOStatus.Text = "Open";
                    tdSupinvoice.Visible = true;
                    lnkClose.Enabled = true;
                    lnkCancel.Visible = true;
               
                   
                    
                }
                catch (SqlException sqlex)
                {
                     CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), sqlex.Source, sqlex.Message,sqlex.StackTrace);
                    //if (sqlex.ErrorCode == -2146232060)
                    if (sqlex.Message.StartsWith("Cannot insert duplicate key row in object 'dbo.ORD_POHeader'"))
                    {
                        //test case ID (TC_033)
                        //PO number is already generated by other user 

                        resetError("Error duplicate PONumber generated, regenerate PONumber", true);
                         
                        return;
                    }
                    resetError("Please enter valid data", true);
                    
                }
                catch (Exception ex)
                {
                    resetError("Error while updating", true);
                     CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
                }
            }
            catch (Exception ex)
            {
                resetError("Error while updating", true);
                 CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
            }
            if (POHeaderID != 0)
            {
                //Response.Redirect("PODetailsInfo.aspx?poid=" + ViewState["HeaderID"].ToString() + "&tid=" + hifTenant.Value + "&success=true");
                if (lnkUpdate.Text == "Save" + CommonLogic.btnfaSave)
                {
                    Response.Redirect("PODetailsInfo.aspx?poid=" + POHeaderID + "&tid=" + hifTenant.Value + "&Createsuccess=true");
                   
                }
                else
                {
                    Response.Redirect("PODetailsInfo.aspx?poid=" + POHeaderID + "&tid=" + hifTenant.Value + "&Updatesuccess=true");
                   
                }               
              
                lnkUpdate.Text = "Save" + CommonLogic.btnfaUpdate;
            }

        }


        //Generate New PoNumber 
        protected void IbutNew_Click(object sender, ImageClickEventArgs e)
        {
            cp = HttpContext.Current.User as CustomPrincipal;
            //test case ID (TC_009)
            //generate new PO number
            //PO Number is default prefix+Year+ fixed lenght serialNo like  PO1300001

            ScriptManager.RegisterStartupScript(this, this.GetType(), "test", "closetooltip();", true);            
            try
            {
                String NewPONumber = DB.GetSqlS("select SysConfigValue as S from SYS_SystemConfiguration where SysConfigKeyID= (select SysConfigKeyID from SYS_SysConfigKey where SysConfigKey=N'purchaseorder.aspx.cs.PO_Prefix') ");
                NewPONumber += "" + (Convert.ToInt16(DateTime.Now.Year) % 100);           //add year code to ponumber
                int length = Convert.ToInt32(DB.GetSqlS("select SysConfigValue as S from SYS_SystemConfiguration as N where SysConfigKeyID= (select SysConfigKeyID from SYS_SysConfigKey where SysConfigKey=N'purchaseorder.aspx.cs.PO_Length') "));
                //string HeaderID = ViewState["HeaderID"].ToString();
                //String OldPONumber = DB.GetSqlS("select TOP 1 PONumber as S from ORD_POHeader where POTypeID<5 and TenantID=" + cp.TenantID + "  ORDER BY PONumber desc ");
                //String OldPONumber = DB.GetSqlS("select TOP 1 PONumber as S from ORD_POHeader where PONumber like '"+NewPONumber+"%' and TenantID=" + cp.TenantID + "  ORDER BY PONumber desc ");

                String OldPONumber = DB.GetSqlS("select TOP 1 PONumber as S from ORD_POHeader where PONumber like '" + NewPONumber + "%' and TenantID=" + hifTenant.Value + "  ORDER BY PONumber desc ");
                   int power = (Int32)Math.Pow((double)10, (double)(length - 1));          //getting minvalue of prifix length

                String newvalue = "";
                if (OldPONumber != "" && NewPONumber.Equals(OldPONumber.Substring(0, NewPONumber.Length)))        //if ponumber is existed and same year ponumber  enter
                {
                    String temp = OldPONumber.Substring(NewPONumber.Length, length);                            //getting number of last prifix
                    Int32 number = Convert.ToInt32(temp);
                    number++;


                    while (power > 1)                                                                           //add '0' to number at left side for get 
                    {
                        if (number / power > 0)
                        {
                            break;
                        }
                        newvalue += "0";
                        power /= 10;
                    }
                    newvalue += number;
                }
                else
                {                                                                                           //other wise generate first number 
                    for (int i = 0; i < length - 1; i++)
                        newvalue += "0";
                    newvalue += "1";
                }

                NewPONumber += newvalue;
                txtPONumber.Text = NewPONumber;
            }
            catch (Exception ex)
            {
                resetError("Error while generating PONumber", true);
                 CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
            }
            //txtPODate.Focus();
            atcPOType.Focus();
        }
        #endregion

        #region -------------POLineItems Handling-------------

        protected void GVPODetails_PageIndexChanging(object sender, GridViewPageEventArgs e)
        {
            GVPODetails.EditIndex = -1;
            GVPODetails.PageIndex = e.NewPageIndex;

            ViewState["PODetailsList"] = "EXEC dbo.sp_ORD_PODetailsList  @POHeaderID=" + ViewState["HeaderID"].ToString() + " ,@MCode=''";
            RFDDetails_buildGridData(RFDDetails_buildGridData());
        }

        //Get Edit Mode
        //protected void GVPODetails_RowEditing(object sender, GridViewEditEventArgs e)
        protected void GVPODetails_RowEditing(object sender, EventArgs e)
        {
            cp = HttpContext.Current.User as CustomPrincipal;
            //test case ID (TC_052)
            //for change the line item details
            if (lnkaddnewrow.Enabled == false)
            {
                return;
            }
            else
            {
                int EditIndex = ((GridViewRow)((LinkButton)sender).Parent.Parent).RowIndex;
                ViewState["IsInsertrecord"] = false;
                try
                {
                    GridViewRow gvrEditRow = GVPODetails.Rows[EditIndex];
                    GVPODetails.EditIndex = EditIndex;
                    ViewState["PODetailsList"] = "EXEC dbo.sp_ORD_PODetailsList  @POHeaderID=" + ViewState["HeaderID"].ToString() + " ,@MCode=''";
                    RFDDetails_buildGridData(RFDDetails_buildGridData());
                    gvrEditRow = GVPODetails.Rows[EditIndex];
                    ((TextBox)gvrEditRow.FindControl("atcMCode")).Focus();
                    Page.Validate();
                }
                catch (Exception ex)
                {
                    resetError("Error while editing", true);
                    CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
                }
            }


            //int EditIndex = ((GridViewRow)((LinkButton)sender).Parent.Parent).RowIndex;
            //ViewState["IsInsertrecord"] = false;
            //try
            //{
            //    GridViewRow gvrEditRow = GVPODetails.Rows[EditIndex];
            //    GVPODetails.EditIndex = EditIndex;
            //    ViewState["PODetailsList"] = "EXEC dbo.sp_ORD_PODetailsList  @POHeaderID=" + ViewState["HeaderID"].ToString() + " ,@MCode=''";
            //    RFDDetails_buildGridData(RFDDetails_buildGridData());
            //    gvrEditRow = GVPODetails.Rows[EditIndex];
            //    ((TextBox)gvrEditRow.FindControl("atcMCode")).Focus();
            //    Page.Validate();
            //}  
            //catch (Exception ex)
            //{
            //    resetError("Error while editing",true);
            //     CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
            //}UpdatePODetails
        }

        protected void GVPODetails_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            cp = HttpContext.Current.User as CustomPrincipal;
            //if (e.Row.RowType == DataControlRowType.DataRow && !(e.Row.RowState == DataControlRowState.Edit && e.Row.RowState=DataControlRowState.))
            //if (e.Row.RowState == DataControlRowState.Normal)
            if (e.Row.RowType == DataControlRowType.DataRow && (e.Row.RowState == DataControlRowState.Normal || e.Row.RowState == DataControlRowState.Alternate))
            {
                DataRow row = ((DataRowView)e.Row.DataItem).Row;
                String InvoiceNos = row["InvoiceIDs"].ToString();
                Boolean Check = Convert.ToBoolean(row["IsKitParent"]);
                LinkButton invoiceList = (LinkButton)e.Row.FindControl("lnkInvoiceIDs");
                Image Imdarrow = (Image)e.Row.FindControl("Imdarrow");
                Imdarrow.Visible = true;
                if (ltPOStatus.Text == "Canceled")
                {
                    if (InvoiceNos == "Add Invoice")
                    {
                        invoiceList.Visible = false;
                        GVPODetails.Enabled = false;
                        Imdarrow.Visible = false;
                    }
                    // invoiceList.Visible = false;
                    // Imdarrow.Visible = false;
                }
                else
                {
                    if (InvoiceNos == "Add Invoice" && Check == false)
                        invoiceList.Visible = false;
                    Imdarrow.Visible = false;
                    //Imdarrow.Visible = true;

                }

                string KitQty = row["KitQty"].ToString();

                if (KitQty != "" && KitQty != null)
                {
                    invoiceList.Visible = false;
                    Imdarrow.Visible = false;
                }


                #region added by kashyap on 25-01-2018
                LinkButton lnkCPOEdit = (LinkButton)e.Row.FindControl("lnkCPOEdit");

                // <!-------------------------Procedure Conversion---------------->
                // string query = "select * from INB_Inbound_ORD_SupplierInvoice where POHeaderID=" + ViewState["HeaderID"].ToString();
                string Query = "Exec [dbo].[USP_Inbound_SupplierInvoiceCount] @POHeaderID=" + ViewState["HeaderID"].ToString();
                DataSet _ds = DB.GetDS(Query, false);

                int inbStatusID = DB.GetSqlN("EXEC [dbo].[USP_ORD_CheckInboundStatusWithPO] @POHeaderID=" + ViewState["HeaderID"].ToString());

                if (inbStatusID > 2) //=============== Added By M.D.Prasad On 01-Jan-2020 =================
                {
                    if (_ds.Tables[0].Rows.Count != 0)
                    {
                        //lnkaddnewrow.Enabled = false;
                        lnkCPOEdit.Enabled = false;
                        lnkCPOEdit.ForeColor = System.Drawing.Color.Gray;
                        lnkCPOEdit.Style.Add("cursor", "default");
                    }
                }
                else
                {
                    lnkCPOEdit.Enabled = true;
                }
                #endregion
                //string Query1 = "select POStatusID AS N from ORD_POHeader where POHeaderID=" + ViewState["HeaderID"].ToString();
                //int StatusID = DB.GetSqlN(Query1);

                //if (StatusID == 3)
                //{
                //    e.Row.Controls[15].Controls[1].Visible = false;
                //    GVPODetails.ShowFooter = false;
                //}
                invoiceList.ForeColor = System.Drawing.Color.Red;
                if (Check == false || InvoiceNos != "Add Invoice")
                {
                    if (InvoiceNos != "Add Invoice")
                    {

                        invoiceList.ForeColor = System.Drawing.Color.Blue;
                    }
                    int columnCount = e.Row.Controls.Count;
                    try
                    {
                        //e.Row.FindControl("Delete").Visible = false;
                        //invoiceList.Visible = false;
                        e.Row.Controls[15].Controls[1].Visible = false;
                        e.Row.Controls[14].Controls[1].Visible = false;
                        //Imdarrow.Visible = false;
                        //  GVPODetails.Columns[12].Visible = false;
                    }
                    catch (Exception ex)
                    {
                        CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
                    }
                    e.Row.Controls[columnCount - 1].Controls[0].Visible = false;
                    //e.Row.Enabled = false;
                }
                if (inbStatusID > 2) //=============== Added By M.D.Prasad On 01-Jan-2020 =================
                {
                    int columnCount = e.Row.Controls.Count;
                    e.Row.Controls[15].Controls[1].Visible = false;
                    e.Row.Controls[14].Controls[1].Visible = false;
                    e.Row.Controls[columnCount - 1].Controls[0].Visible = false;
                }
            }
        }

        //protected void GVPODetails_RowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
        protected void GVPODetails_RowCancelingEdit(object sender, EventArgs e)
        {
            cp = HttpContext.Current.User as CustomPrincipal;
            //test case ID (TC_051)
            // cancel updation the details
            try
            {
                GVPODetails.EditIndex = -1;
                ViewState["PODetailsList"] = "EXEC dbo.sp_ORD_PODetailsList  @POHeaderID=" + ViewState["HeaderID"].ToString() + " ,@MCode=''";
                RFDDetails_buildGridData(RFDDetails_buildGridData());
                ltgridstatus.Text = "";
                if (GVPODetails.Rows.Count == 0)
                {
                    //ltsearch.Visible = false;
                    txtSearch.Visible = false;
                    Inksearch.Visible = false;
                    pnlgvPODetails.Visible = false;
                }       
            }
                
            catch (Exception ex)
            {
                resetgridError( "Error while canceling", true);
                 CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
            }
            
        }

        //protected void GVPODetails_RowUpdating(object sender, GridViewUpdateEventArgs e) 
        
        protected void GVPODetails_RowUpdating(object sender, EventArgs e)
        {
            cp = HttpContext.Current.User as CustomPrincipal;
            int RowIndex = ((GridViewRow)((Button)sender).Parent.Parent).RowIndex;
            StringBuilder sCmdupdatelineitem = new StringBuilder();
            String TempValue="";
            GridViewRow gvRow = GVPODetails.Rows[RowIndex];
            Page.Validate("UpdatePODetails");
            if (!IsValid)
            {
                ((TextBox)gvRow.FindControl("atcMCode")).Focus();
                resetgridError("Please check all mandatory fields ", true);
                return;
            }
            if (gvRow != null)
            {
                Literal ltPoDetailsID = (Literal)gvRow.FindControl("ltpodetailsex");
                Literal ltLineNumber =  (Literal)gvRow.FindControl("ltlinenumberEdit");
                TextBox txtRequireNumber = (TextBox)gvRow.FindControl("txtreqnumber");
                TextBox txtMaterialCode =  (TextBox)gvRow.FindControl("atcMCode");
                TextBox txtPUoM = (TextBox)gvRow.FindControl("atcPUoM");
                HiddenField hifKitPlanner = (HiddenField)gvRow.FindControl("hifKitPlanner");
                TextBox atcKitPlanner =     (TextBox)gvRow.FindControl("atcKitPlanner");

                HiddenField hifMaterialMaster = (HiddenField)gvRow.FindControl("hifMCode");
                HiddenField hifMaterialMaster_UoM = (HiddenField)gvRow.FindControl("hifPUoM_Qty");
                TextBox txtTotalQty = (TextBox)gvRow.FindControl("txtTotalqty");
                //Adding Static MSp's
                TextBox txtmfgdate  = (TextBox)gvRow.FindControl("txtmfgdate");
                TextBox txtexpdate  = (TextBox)gvRow.FindControl("txtexpdate");
                TextBox txtserialno = (TextBox)gvRow.FindControl("txtserialno");
                TextBox txtbatchno  = (TextBox)gvRow.FindControl("txtbatchno");
                TextBox txtrefno    = (TextBox)gvRow.FindControl("txtrefno");
                /* try
                 {
                     IDataReader GetShipmentreceive = DB.GetRS("[sp_ORD_GetMaterialReceivedOrNot] @PODetailsID=" + ltPoDetailsID.Text);
                     if (GetShipmentreceive.Read())
                     {
                         GVPODetails.EditIndex = -1;

                         ViewState["PODetailsList"] = "EXEC dbo.sp_ORD_PODetailsList  @POHeaderID=" + ViewState["HeaderID"].ToString() + " ,@MCode=''";
                         RFDDetails_buildGridData(RFDDetails_buildGridData());
                         resetgridError("Purchase order is received,cannot edit", true);
                         return;
                     }
                     int goodsmovementID = DB.GetSqlN("[sp_ORD_GetMaterialInGoodsIN] @PODetailsID=" + ltPoDetailsID.Text);
                     if (goodsmovementID == 0 && ltPoDetailsID.Text!="0")
                     {
                         resetgridError("line item is received in goodsin,cannot update", true);
                         return;
                     }
                 }
                 catch (Exception ex)
                 {
                     resetError(ex.ToString(),true);
                     return;
                 }*/
                sCmdupdatelineitem.Append(" EXEC dbo.sp_ORD_UpsertPODetails ");
                sCmdupdatelineitem.Append("@PODetailsID=" + ltPoDetailsID.Text);
                sCmdupdatelineitem.Append(",@POHeaderID=" + ViewState["HeaderID"].ToString());
                sCmdupdatelineitem.Append(",@LineNumber=" + ltLineNumber.Text);
                String RqiNum = txtRequireNumber.Text.Trim() != "" ? DB.SQuote(txtRequireNumber.Text.Trim()) : "NULL";
                sCmdupdatelineitem.Append(",@RequirementNumber=" + RqiNum);
                if (txtMaterialCode.Text.Trim() == "" || hifMaterialMaster.Value == "")
                {
                    resetgridError("Select Material Code ", true);
                    ((TextBox)gvRow.FindControl("atcMCode")).Focus();
                    return;
                }
                sCmdupdatelineitem.Append(",@MaterialMasterID=" + hifMaterialMaster.Value);
                if (txtPUoM.Text.Trim() == "" || hifMaterialMaster_UoM.Value == "")
                {
                    resetgridError("Select PUoM/Qty ", true);
                    ((TextBox)gvRow.FindControl("atcMCode")).Focus();
                    return;
                }
                sCmdupdatelineitem.Append(",@MaterialMaster_PUoMID=" + hifMaterialMaster_UoM.Value);

               // String Qty = txtPUoM.Text.Trim().Split('/')[1];
               // sCmdupdatelineitem.Append(",@PUoMQty=" + Qty);
                TempValue = txtTotalQty.Text.Trim() != "" ? txtTotalQty.Text.Trim() : "null";
                sCmdupdatelineitem.Append(",@POQuantity=" + TempValue);
                TempValue = hifKitPlanner.Value.Trim() != "" ? hifKitPlanner.Value.Trim() : "null";
                sCmdupdatelineitem.Append(",@KitPlannerID=" + TempValue);
               
                sCmdupdatelineitem.Append(",@CreatedBy=" + cp.UserID.ToString());
                
                String command = "";
                String ids = "";
                String values = "";
                String MSPID = "";
                String mspsql = "EXEC [sp_ORD_GetMaterialStorageParameters]  @MaterialMasterID=" + hifMaterialMaster.Value + ",@TenantID=" + cp.TenantID;

                IDataReader rsMCodeMSP = DB.GetRS(mspsql);
                while (rsMCodeMSP.Read())
                {
                    command = DB.RSField(rsMCodeMSP, "ControlType");
                    if (command == "DropDownList")
                    {
                        MSPID = "ddl" + DB.RSField(rsMCodeMSP, "ParameterName");
                        DropDownList _ddlControl = (DropDownList)gvRow.FindControl(MSPID);
                        if (_ddlControl != null)
                        {
                            String value = _ddlControl.SelectedValue;
                            if (value != "")
                            {
                                ids += DB.RSFieldInt(rsMCodeMSP, "MaterialStorageParameterID") + ",";
                                values += value + ",";
                            }

                        }
                    }

                    else if (command == "TextBox")
                    {

                        MSPID = "txt" + DB.RSField(rsMCodeMSP, "ParameterName");
                        TextBox _txtControl = (TextBox)gvRow.FindControl(MSPID);
                        if (_txtControl != null)
                        {
                            String value = _txtControl.Text;
                            if (value != "")
                            {
                                ids += DB.RSFieldInt(rsMCodeMSP, "MaterialStorageParameterID") + ",";
                                values += value + ",";
                            }
                        }

                    }

                }

                rsMCodeMSP.Close();
                String MfgDate = null;
                if (txtmfgdate.Text.Trim() != "")
                    //InvoiceDate = DB.SQuote(CommonLogic.GetConfigValue(cp.TenantID, "DateFormat") == "dd/MM/yyyy" ? DateTime.ParseExact(txtInvoiceDate.Text.Trim(), "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("MM/dd/yyyy") : txtInvoiceDate.Text.Trim());

                    MfgDate = DB.SQuote(CommonLogic.GetConfigValue(Convert.ToInt16(hifTenant.Value), "DateFormat") == "dd-M-yy" ? DateTime.ParseExact(txtmfgdate.Text.Trim(), "dd-M-yy", CultureInfo.InvariantCulture).ToString("MM/dd/yyyy") : txtmfgdate.Text.Trim());
                else
                    MfgDate = "NULL";


                String ExpDate = null;
                if (txtexpdate.Text.Trim() != "")
                    //InvoiceDate = DB.SQuote(CommonLogic.GetConfigValue(cp.TenantID, "DateFormat") == "dd/MM/yyyy" ? DateTime.ParseExact(txtInvoiceDate.Text.Trim(), "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("MM/dd/yyyy") : txtInvoiceDate.Text.Trim());

                    ExpDate = DB.SQuote(CommonLogic.GetConfigValue(Convert.ToInt16(hifTenant.Value), "DateFormat") == "dd-M-yy" ? DateTime.ParseExact(txtexpdate.Text.Trim(), "dd-M-yy", CultureInfo.InvariantCulture).ToString("MM/dd/yyyy") : txtexpdate.Text.Trim());
                else
                    ExpDate = "NULL";
                string updatedon = DateTime.Now.ToString("MM/dd/yyyy hh:mm:ss");
                sCmdupdatelineitem.Append(",@StoreParameterIDS=" + DB.SQuote(ids));
                sCmdupdatelineitem.Append(",@StoreParameterValues=" + DB.SQuote(values));

                sCmdupdatelineitem.Append(",@MfgDate=" + MfgDate);
                sCmdupdatelineitem.Append(",@ExpDate=" + ExpDate);
                sCmdupdatelineitem.Append(",@SerialNo=" + DB.SQuote(txtserialno.Text));
                sCmdupdatelineitem.Append(",@BatchNo=" + DB.SQuote(txtbatchno.Text));
                sCmdupdatelineitem.Append(",@ProjectRefNo=" + DB.SQuote(txtrefno.Text));
                sCmdupdatelineitem.Append(",@UpdatedOn=" + DB.SQuote(updatedon));
                
                try
                {
                    DB.ExecuteSQL(sCmdupdatelineitem.ToString());
                    GVPODetails.EditIndex = -1;
                    ViewState["PODetailsList"] = "EXEC dbo.sp_ORD_PODetailsList  @POHeaderID=" + ViewState["HeaderID"].ToString() + " ,@MCode=''";
                    RFDDetails_buildGridData(RFDDetails_buildGridData());
                    resetgridError("Successfully Updated", false);

                    if (gvInvoicDetails.Rows.Count != 0 || GVPODetails.Rows.Count != 0)
                    {
                        atcSupplier.Enabled = false;
                        txtTenant.Enabled = false;
                    }
                }
                catch (Exception ex)
                {
                    resetgridError("Error while updating", true);
                     CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
                }

            }

        }

        protected void DeleteItems(object sender, EventArgs e)
        {
            cp = HttpContext.Current.User as CustomPrincipal;
            string gvchkIDs = "";

            int count = 0;
            foreach (GridViewRow gv in GVPODetails.Rows)
            {
                if (gv.RowType == DataControlRowType.DataRow)
                {
                    CheckBox c = (CheckBox)gv.FindControl("chkDele");
                    var c1 = (CheckBox)gv.FindControl("chkDele");
                    if (c != null)
                    {
                        if (c.Checked)
                        {
                            count++;
                        }
                    }
                }
              
                if (gv.RowState != DataControlRowState.Edit)
                {
                    CheckBox isDeletedchkbxItem = (CheckBox)gv.FindControl("chkDele");

                    if (isDeletedchkbxItem.Checked)
                    {
                        gvchkIDs += ((Literal)gv.FindControl("ltpodetails")).Text.ToString() + ",";
                    }
                }

            }
            if (count == 0)
            {
                resetgridError("Please select Line Items to Delete", true);
            }

            StringBuilder sql = new StringBuilder();
            sql.Append("EXEC dbo.sp_ORD_DeletePOItems @PODetailsIDs=" + DB.SQuote(gvchkIDs) + ",@UpdatedBy=" + cp.UserID.ToString());

            // Execute SQL Query only if checkboxes are checked to avoid any error with initial null string
            try
            {

                /* IDataReader GetShipmentreceive = DB.GetRS("[sp_ORD_GetMaterialReceivedOrNot] @POHeaderID=" + ViewState["HeaderID"].ToString());
                    if (GetShipmentreceive.Read())
                    {
                        resetgridError("Purchase Order is received,cannot delete lineItems", true);
                        return;
                    }*/



                if (gvchkIDs != "")
                {
                    DB.ExecuteSQL(sql.ToString());


                    ViewState["PODetailsList"] = "EXEC dbo.sp_ORD_PODetailsList  @POHeaderID=" + ViewState["HeaderID"].ToString() + " ,@MCode=''";
                    RFDDetails_buildGridData(RFDDetails_buildGridData());
                    resetgridError("Successfully deleted the selected line items", false);
                    if (GVPODetails.Rows.Count == 0)
                    {
                        //ltsearch.Visible = false;
                        txtSearch.Visible = false;
                        Inksearch.Visible = false;
                        pnlgvPODetails.Visible = false;
                    }
                    //if (GVPODetails.Rows.Count == 0)
                    //   pnlgvSoDetails.Visible = false;pnlgvSoDetails

                    if (gvInvoicDetails.Rows.Count == 0 && GVPODetails.Rows.Count == 0)
                    {
                        atcSupplier.Enabled = true;
                        txtTenant.Enabled = true;
                    }
                }
                RFDDetails_buildGridData(RFDDetails_buildGridData());
            }
            catch (Exception ex)
            {
                resetgridError("Error while deleting", true);
                CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
            }       
        }

        #endregion

        #region--------------Suporting Methods-----------------

        protected void resetError(string error, bool isError)
        {

            /*string str = "<font class=\"noticeMsg\">NOTICE:</font>&nbsp;&nbsp;&nbsp;";
            if (isError)
                str = "<font class=\"errorMsg\">ERROR:</font>&nbsp;&nbsp;&nbsp;";

            if (error.Length > 0)
                str += error + "";
            else
                str = "";


            lblStatus.Text = str;*/
            ScriptManager.RegisterStartupScript(this, this.GetType(), "test", "showStickyToast(" + (isError.ToString().ToLower() == "true" ? "false" : "true") + ",\"" + error + "\");", true);

        }

        protected void resetgridError(string error, bool isError)
        {

           /* string str = "<font class=\"noticeMsg\">NOTICE:</font>&nbsp;&nbsp;&nbsp;";
            if (isError)
                str = "<font class=\"errorMsg\">ERROR:</font>&nbsp;&nbsp;&nbsp;";

            if (error.Length > 0)
                str += error + "";
            else
                str = "";


            ltgridstatus.Text = str;*/
            ScriptManager.RegisterStartupScript(this, this.GetType(), "test", "showStickyToast(" + (isError.ToString().ToLower() == "true" ? "false" : "true") + ",\"" + error + "\");", true);

        }

        protected void resetInvgridError(string error, bool isError)
        {

          /*  string str = "<font class=\"noticeMsg\">NOTICE:</font>&nbsp;&nbsp;&nbsp;";
            if (isError)
                str = "<font class=\"errorMsg\">ERROR:</font>&nbsp;&nbsp;&nbsp;";

            if (error.Length > 0)
                str += error + "";
            else
                str = "";


            ltinvStatus.Text = str;*/
            ScriptManager.RegisterStartupScript(this, this.GetType(), "test", "showStickyToast(" + (isError.ToString().ToLower() == "true" ? "false" : "true") + ",\"" + error + "\");", true);

        }

        protected void resetSupplierDetailsError(string error, bool isError)
        {

           /* string str = "<font class=\"noticeMsg\">NOTICE:</font>&nbsp;&nbsp;&nbsp;";
            if (isError)
                str = "<font class=\"errorMsg\">ERROR:</font>&nbsp;&nbsp;&nbsp;";

            if (error.Length > 0)
                str += error + "";
            else
                str = "";


            ltSupplierDetailsStatus.Text = str;*/
            ScriptManager.RegisterStartupScript(this, this.GetType(), "test", "showStickyToast(" + (isError.ToString().ToLower() == "true" ? "false" : "true") + ",\"" + error + "\");", true);

        }
        //unUsed
        private void BuildEditData(int index)
        {
            cp = HttpContext.Current.User as CustomPrincipal;
            try
            {
                String MaterialId = ((DropDownList)GVPODetails.Rows[index].FindControl("ddmaterialcode")).SelectedValue;
                DropDownList ddUom = (DropDownList)GVPODetails.Rows[index].FindControl("ddpuom");
                DropDownList ddkitPlanner = (DropDownList)GVPODetails.Rows[index].FindControl("ddlKitPlanner");
                DropDownList ddInvUoM = (DropDownList)GVPODetails.Rows[index].FindControl("ddlIUoM");
                // BuildDropDown(ddUom, "select gu.UoM,gu.UoMID,mmgu.UoMQty from GEN_UoM gu LEFT JOIN MMT_MaterialMaster_GEN_UoM mmgu on gu.UoMID=mmgu.UoMID where mmgu.UoMTypeID!=1 AND mmgu.MaterialMasterID=" + MaterialId , "UoM", "UoMID", "Select UoM");
                BuildDropDown(ddUom, "Exec [dbo].[USP_LoadUoMByMID] @MaterialID=" + MaterialId, "UoM", "UoMID", "Select UoM");
                BuildDropDown(ddkitPlanner, "select KitPlannerID from MMT_KitPlanner where IsActive=1 and IsDeleted=0 and ParentMaterialMasterID=" + MaterialId, "KitPlannerID", "KitPlannerID", "Select Kitplanner");
              //  BuildDropDown(ddInvUoM,"select gu.UoM,gu.UoMID,mmgu.UoMQty from GEN_UoM gu LEFT JOIN MMT_MaterialMaster_GEN_UoM mmgu on gu.UoMID=mmgu.UoMID where mmgu.UoMTypeID!=1 AND mmgu.MaterialMasterID=" + MaterialId , "UoM", "UoMID", "Select UoM");
                BuildDropDown(ddInvUoM, "Exec [dbo].[USP_LoadUoMByMID] @MaterialID=" + MaterialId, "UoM", "UoMID", "Select UoM");

                IDataReader MSPreader = DB.GetRS("EXEC sp_ORD_GetMaterialStorageParameters @MaterialMasterID=" + MaterialId);
               

                DataTable table = ViewState["MaterialStorageParameter"] as DataTable;
                int n = table.Rows.Count;
                for (int i = 0; i < n; i++)
                {
                    if (table.Rows[i]["ControlType"].ToString() == "DropDownList")
                        MaterialId = "ddl" + Convert.ToString(table.Rows[i][1]);
                    else
                        MaterialId = "txt" + Convert.ToString(table.Rows[i][1]);
                    GVPODetails.Rows[index].FindControl(MaterialId).Visible = false;

                }



                while (MSPreader.Read())
                {
                    int position = Convert.ToInt16(MSPreader.GetValue(0));
                    if (table.Rows[position - 1]["ControlType"].ToString() == "DropDownList")
                        GVPODetails.Rows[index].FindControl("ddl" + table.Rows[position - 1][1]).Visible = true;
                    else
                        GVPODetails.Rows[index].FindControl("txt" + table.Rows[position - 1][1]).Visible = true;



                }
                MSPreader.Close();
            }
            catch (Exception ex)
            {
                 CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
            }
               


              
            
        }

        //Unused
        private void BuildDropDown(DropDownList dropdown, String sql, String ListName, String ListValue, String Defaultvalue)
        {
            cp = HttpContext.Current.User as CustomPrincipal;
            dropdown.Items.Clear();

            dropdown.Items.Add(new ListItem());
            try
            {
                dropdown.Items.Clear();

                IDataReader dropdownReader = DB.GetRS(sql);

                dropdown.Items.Add(new ListItem(Defaultvalue, ""));
                while (dropdownReader.Read())
                {
                    if (dropdown.ID == "ddpuom" || dropdown.ID == "ddlIUoM")
                        dropdown.Items.Add(new ListItem(dropdownReader[ListName].ToString() + "/" + dropdownReader["UoMQty"].ToString(), dropdownReader[ListValue].ToString()));
                    else
                        dropdown.Items.Add(new ListItem(dropdownReader[ListName].ToString(), dropdownReader[ListValue].ToString()));
                }
                dropdownReader.Close();
            }
            catch (Exception ex)
            {
                 CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
            }
        }
        //unused
        protected void ddmaterialcode_SelectedIndexChanged(object sender, EventArgs e)
        {
            int EditIndex = GVPODetails.EditIndex;
            BuildEditData(EditIndex);
        }

        //Add Dynamic Column
        private void AddDynamicColumns()
        {
            cp = HttpContext.Current.User as CustomPrincipal;
            TemplateField field;
            IDataReader rsMSPList = null;
            try
            {
                rsMSPList = DB.GetRS("sp_GEN_GetAllMaterialStorageParameters @ParameterUsageTypeID=1,@TenantID=" + cp.TenantID);
            }
            catch (Exception ex)
            {
                resetError("Error while loading",true);
                 CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
                return;
            }

            while (rsMSPList.Read())
            {
                field = new TemplateField();

                field.HeaderTemplate = new DynamicallyTemplatedGridViewHandler(ListItemType.Header, DB.RSField(rsMSPList, "DisplayName"), "Literal");

                field.ItemTemplate = new DynamicallyTemplatedGridViewHandler(ListItemType.Item, DB.RSField(rsMSPList, "ParameterName"), "Literal");



                field.HeaderStyle.Width = 150;

                field.ItemStyle.Width = 150;
                
               /* switch (DB.RSField(rsMSPList, "ControlType"))
                {
                    case "DropDownList":
                        field.EditItemTemplate = new DynamicallyTemplatedGridViewHandler(ListItemType.EditItem, DB.RSField(rsMSPList, "ParameterName"), "DropDownList", DB.RSField(rsMSPList, "DataSource"));
                        break;

                    case "TextBox":
                        field.EditItemTemplate = new DynamicallyTemplatedGridViewHandler(ListItemType.EditItem, DB.RSField(rsMSPList, "ParameterName"), "TextBox");
                        break;

                    case "DateTime":
                        field.EditItemTemplate = new DynamicallyTemplatedGridViewHandler(ListItemType.EditItem, DB.RSField(rsMSPList, "ParameterName"), "DateTime");
                        break;
                }*/
                field.EditItemTemplate = new DynamicallyTemplatedGridViewHandler(ListItemType.EditItem, DB.RSField(rsMSPList, "ParameterName"), DB.RSField(rsMSPList, "ControlType"), DB.RSField(rsMSPList, "ParameterDataType"), DB.RSField(rsMSPList, "DataSource"), DB.RSField(rsMSPList, "MinTolerance"), DB.RSField(rsMSPList, "MaxTolerance"));
               
                    GVPODetails.Columns.Add(field);

                
            }

            rsMSPList.Close();

            field = new TemplateField();
            field.HeaderTemplate = new DynamicallyTemplatedGridViewHandler(ListItemType.Header, "Delete", "Literal");
            field.ItemTemplate = new DynamicallyTemplatedGridViewHandler(ListItemType.Item, "Delete", "CheckBox");
            field.EditItemTemplate = new DynamicallyTemplatedGridViewHandler(ListItemType.EditItem, "Delete", "Empty");
            button = new LinkButton();
            button.ID = "deleteButton";
            button.Text = "Delete";
            button.ForeColor = System.Drawing.Color.Blue;
            button.OnClientClick = "return confirm('Are you sure want to delete the selected line items?')";
            button.Click += new EventHandler(DeleteItems);
            button.Font.Underline = false;
            field.FooterTemplate = new DynamicallyTemplatedGridViewHandler(ListItemType.Footer, button);


            GVPODetails.Columns.Add(field);
            
             
            //BoundField editfield;
            //editfield = new BoundField();
            //editfield.DataField = "EditName";
            //editfield.ReadOnly = true;
            //editfield.Visible = false;
           // GVPODetails.Columns.Add(editfield);

            //CommandField cmdfield = new CommandField();

            ////cmdfield.ControlStyle.CssClass = "cmdField";
            //cmdfield.CausesValidation = false;
            //cmdfield.ButtonType = ButtonType.Link;
            //cmdfield.CancelText = "Cancel";
            //cmdfield.FooterStyle.Font.Underline = false;
            //cmdfield.EditText = "<nobr> Edit <img src='../Images/redarrowright.gif' border='0' /></nobr>";
            //cmdfield.ShowEditButton = true;
            //cmdfield.ControlStyle.Font.Underline = false;
            //cmdfield.ItemStyle.Font.Underline = false;
            //cmdfield.UpdateImageUrl = "icons/update.gif";
            //cmdfield.UpdateText = "Update";

            
            //GVPODetails.Columns.Add(cmdfield);

            field = new TemplateField();
            field.ItemStyle.Width = 200;
            field.ItemTemplate = new DynamicallyTemplatedGridViewHandler(ListItemType.Item, "Command", GVPODetails_RowEditing);

            field.EditItemTemplate = new DynamicallyTemplatedGridViewHandler(ListItemType.EditItem, "Command", GVPODetails_RowUpdating, GVPODetails_RowCancelingEdit);

            GVPODetails.Columns.Add(field);

        }               

        #endregion

        #region ------------Invoice Handling---------------
       
        protected void gvInvoicDetails_PageIndexChanging(object sender, GridViewPageEventArgs e)
        {
            gvInvoicDetails.PageIndex = e.NewPageIndex;
            ViewState["InvoiceSQl"] = "sp_ORD_SupplierInvoiceList";
            Build_gvInvoice(Build_gvInvoice());
        }

        //protected void gvInvoicDetails_RowEditing(object sender, GridViewEditEventArgs e)
        protected void gvInvoicDetails_RowEditing(object sender, EventArgs e)
        {
            //test case ID (TC_079)
            //Modify the invoice details
            int Editindex = ((GridViewRow)((LinkButton)sender).Parent.Parent).RowIndex;
            gvInvoicDetails.EditIndex = Editindex;
            ViewState["InvoiceSQl"] = "sp_ORD_SupplierInvoiceList @POHeaderId=" + ViewState["HeaderID"].ToString();
            Build_gvInvoice(Build_gvInvoice());
            GridViewRow gvRow=gvInvoicDetails.Rows[Editindex];
            ((TextBox)gvRow.FindControl("txtInvNumber")).Focus();
            ltinvStatus.Text = "";

        }

        //protected void gvInvoicDetails_RowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
        protected void gvInvoicDetails_RowCancelingEdit(object sender, EventArgs e)
        {
            //test case ID (TC_078)
            //cancel updation the line item

            try
            {
                gvInvoicDetails.EditIndex = -1;
                ViewState["InvoiceSQl"] = "sp_ORD_SupplierInvoiceList @POHeaderId=" + ViewState["HeaderID"].ToString();
                Build_gvInvoice(Build_gvInvoice());
                //resetInvgridError("Invoice LineNumber is canceled ", false);
            }
            catch (Exception ex)
            {
                resetInvgridError("Error while canceling", true);
                 CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
            }
        }
        
        //protected void gvInvoicDetails_RowUpdating(object sender, GridViewUpdateEventArgs e)
        protected void gvInvoicDetails_RowUpdating(object sender, EventArgs e)
        {
            //test case ID (TC_080)
            //Update new changes in the line item
            
            int RowIndex = ((GridViewRow)((Button)sender).Parent.Parent).RowIndex;
            GridViewRow gvRow= gvInvoicDetails.Rows[RowIndex];
            Page.Validate("UpdateInvoice");
            if (!IsValid)
            {
                ((TextBox)gvRow.FindControl("txtInvNumber")).Focus();
                resetgridError("Please check all mandatory fields ", true);
                return;
            }
            
            if (gvRow != null)
            {
                StringBuilder sql = new StringBuilder();
                String TempValue = "";

                Literal ltInvId = (Literal)gvRow.FindControl("ltInvID_Edit");
                
                TextBox txtInvNumber = (TextBox)gvRow.FindControl("txtInvNumber");
                TextBox txtInvDate = (TextBox)gvRow.FindControl("txtInvDate");
                TextBox txtInvValue = (TextBox)gvRow.FindControl("txtInvValue");
                TextBox atcInvCurrency = (TextBox)gvRow.FindControl("atcInvCurrency");
                HiddenField hifInvCurrency = (HiddenField)gvRow.FindControl("hifInvCurrency");
                //TextBox txtExchange = (TextBox)gvRow.FindControl("txtExchange");
                TextBox txtNoofPackages = (TextBox)gvRow.FindControl("txtNoofPackages");
                TextBox txtGrossWeight = (TextBox)gvRow.FindControl("txtGrossWeight");
                TextBox txtNetWeight = (TextBox)gvRow.FindControl("txtNetWeight");
                HiddenField hifInvCountryofOrigin = (HiddenField)gvRow.FindControl("hifInvCountryofOrigin");
                TextBox atcInvCountryofOrigin=(TextBox)gvRow.FindControl("atcInvCountryofOrigin");
               // TextBox txtInvVATCode = (TextBox)gvRow.FindControl("txtInvVATCode");

                sql.Append("EXEC dbo.sp_ORD_UpsertSupplierInvoice ");

                sql.Append("@SupplierInvoiceID=" + ltInvId.Text);


                sql.Append(",@POHeaderID=" + ViewState["HeaderID"].ToString());

               
                if (txtInvNumber.Text.Trim() == "")
                {

                    resetInvgridError("Enter invoice number", true);
                    return;
                }
                sql.Append(",@InvoiceNumber=" + DB.SQuote(txtInvNumber.Text.Trim()));

               

                if (txtInvDate.Text.Trim() != "")
                    TempValue = CommonLogic.GetConfigValue(cp.TenantID, "DateFormat") == "dd-M-yyyy" ? DateTime.ParseExact(txtInvDate.Text.Trim(), "dd-M-yyyy", CultureInfo.InvariantCulture).ToString("MM/dd/yyyy") : txtInvDate.Text.Trim();
                else
                    TempValue = "NULL";
                if(TempValue=="NULL")
                {
                    resetInvgridError("Please enter Invoice Date", true);
                    return;
                }

                sql.Append(",@InvoiceDate=" + (TempValue == "NULL" ? "NULL" : DB.DateQuote(TempValue)));
                TempValue = txtNoofPackages.Text.Trim() != "" ? txtNoofPackages.Text.Trim() : "null";
                sql.Append(",@NoofPackages=" + TempValue);
                TempValue = txtGrossWeight.Text.Trim() != "" ? txtGrossWeight.Text.Trim() : "null";
                sql.Append(",@GrossWeight=" + TempValue);
                TempValue = txtNetWeight.Text.Trim() != "" ? txtNetWeight.Text.Trim() : "null";
                sql.Append(",@NetWeight=" + TempValue);
                String Currency = atcInvCurrency.Text.Trim() != "" && hifInvCurrency.Value != "" ? hifInvCurrency.Value : "NULL";
                sql.Append(",@CurrencyID=" + Currency);
               // TempValue = txtExchange.Text != "" ? txtExchange.Text : "null";
               // sql.Append(",@ExchangeRate=" + TempValue);
                TempValue = txtInvValue.Text != "" ? txtInvValue.Text : "null";
                sql.Append(",@InvoiceValue=" + TempValue);
                sql.Append(",@InvCountryofOriginID=" + (hifInvCountryofOrigin.Value != ""&&atcInvCountryofOrigin.Text!="" ? hifInvCountryofOrigin.Value : "NULL"));
               // sql.Append(",@InvVATCode="+(txtInvVATCode.Text!=""?DB.SQuote( txtInvVATCode.Text):"NULL"));
                sql.Append(",@CreatedBy=" + cp.UserID);

                String NewInvNumber = txtInvNumber.Text.Trim();





                try
                {
                   /* IDataReader GetShipmentreceive = DB.GetRS("[sp_ORD_GetMaterialReceivedOrNot] @SupplierInvoiceID=" + ltInvId.Text);
                    if (GetShipmentreceive.Read())
                    {
                        gvInvoicDetails.EditIndex = -1;
                        ViewState["InvoiceSQl"] = "sp_ORD_SupplierInvoiceList @POHeaderId=" + ViewState["HeaderID"].ToString();
                        Build_gvInvoice(Build_gvInvoice());
                        resetInvgridError("Purchase Order is received,cannot edit", true);
                        return;
                    }*/

                    DB.ExecuteSQL(sql.ToString());
                    gvInvoicDetails.EditIndex = -1;
                    ViewState["InvoiceSQl"] = "sp_ORD_SupplierInvoiceList @POHeaderId=" + ViewState["HeaderID"].ToString();
                    Build_gvInvoice(Build_gvInvoice());

                    if (gvInvoicDetails.Rows.Count != 0 || GVPODetails.Rows.Count != 0)
                    {
                        atcSupplier.Enabled = false;
                        txtTenant.Enabled = false;
                    }

                    resetInvgridError("Successfully Updated", false);
                }
                catch (SqlException sqlex)
                {
                    CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), sqlex.Source, sqlex.Message, sqlex.StackTrace);
                    if (sqlex.ErrorCode == -2146232060)
                    {
                        //test case Id (TC_077)
                        //if invoice no is already in this criteria then

                        resetInvgridError("Invoice Number already exists", true);
                        return;
                    }
                    resetInvgridError("Error while updating", true);
                }
                catch (Exception ex)
                {
                    resetInvgridError("Error while updating   ", true);
                    CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);

                }
            }
          
        }

        protected void gvInvoicDetails_RowDataBound(object sender, GridViewRowEventArgs e)
        {
           // int RowIndex = ((GridViewRow)((Button)sender).Parent.Parent).RowIndex;
           // GridViewRow gvRow = gvInvoicDetails.Rows[RowIndex];

           //// DataRow row = ((DataRowView)e.Row.DataItem).Row;
           // Literal ltInvId = (Literal)gvRow.FindControl("lnkDelete");
           // LinkButton lnkCPOEdit = (LinkButton)e.Row.FindControl("lnkDelete");
           // string query = "select * from ORD_PODetails where POHeaderID=" + ViewState["HeaderID"].ToString();
           // DataSet _ds = DB.GetDS(query, false);
           // if (_ds.Tables[0].Rows.Count == 0)
           // {
           //     ltInvId.Visible = false;
           // }
            if (e.Row.RowType == DataControlRowType.DataRow && (e.Row.RowState == DataControlRowState.Normal ||(e.Row.RowState==DataControlRowState.Alternate&& !(e.Row.RowState==DataControlRowState.Edit))))
            {
                //int RowIndex = ((GridViewRow)((Button)sender).Parent.Parent).RowIndex;
                //GridViewRow gvRow = gvInvoicDetails.Rows[RowIndex];

                DataRow row = ((DataRowView)e.Row.DataItem).Row;
                bool IsInInbound = Convert.ToBoolean(row["IsInInbound"]);
              //  Literal ltInvId = (Literal)gvRow.FindControl("lnkDelete");
                if (IsInInbound)
                {
                    e.Row.Controls[8].Controls[1].Visible = false;
                  //  ltInvId.Visible = false;
                    e.Row.Controls[9].Controls[1].Visible = false;
                }
                else
                {
                    e.Row.Controls[8].Controls[1].Visible = true;
                    //  ltInvId.Visible = false;
                    e.Row.Controls[9].Controls[1].Visible = true;
                    // ltInvId.Visible = true;
                }


                //LinkButton lnkCPOEdit = (LinkButton)e.Row.FindControl("lnkCPOEdit");
                //string query = "select * from INB_Inbound_ORD_SupplierInvoice where POHeaderID=" + ViewState["HeaderID"].ToString();
                //DataSet _ds = DB.GetDS(query, false);
                //if (_ds.Tables[0].Rows.Count != 0)
                //{
                //    //lnkaddnewrow.Enabled = false;
                //    lnkCPOEdit.Enabled = false;
                //    lnkCPOEdit.ForeColor = System.Drawing.Color.Gray;
                //    lnkCPOEdit.Style.Add("cursor", "default");

                    //}
                    //else
                    //{
                    //    lnkCPOEdit.Enabled = true;
                    //}
            }
        }

        private DataSet Build_gvInvoice()
        {
            DataSet ds=null;
            try
            {
                String sql = ViewState["InvoiceSQl"].ToString();
                ds = DB.GetDS(sql, false);
            }
            catch (Exception ex)
            {
                resetInvgridError("Error while building data",true);
                 CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
            }
            return ds;
        }

        private void Build_gvInvoice(DataSet ds)
        {
            if (ds != null)
            {
                gvInvoicDetails.DataSource = ds.Tables[0];
                gvInvoicDetails.DataBind();
                ds.Dispose();
            }
           
        }

        protected void lnkNewInv_Click(object sender, EventArgs e)
        {

            //test case ID (TC_061)
            //Create dummy row for add new invoice details
            if (GVPODetails.EditIndex == 0)
            {
                GVPODetails.EditIndex = -1;
                RFDDetails_buildGridData(RFDDetails_buildGridData());

            }

            DataSet dsInvlist = null;
            String scmdInvlist = "sp_ORD_SupplierInvoiceList @POHeaderId=" + ViewState["HeaderID"].ToString();
            try
            {
               /* IDataReader GetShipmentreceive = DB.GetRS("[sp_ORD_GetMaterialReceivedOrNot] @POHeaderID=" + ViewState["HeaderID"].ToString());
                if (GetShipmentreceive.Read())
                {
                    resetInvgridError("Purchase Order is received,cannot add new item", true);
                    return;
                }*/

                dsInvlist = DB.GetDS(scmdInvlist, false);
                DataRow drNewRow = dsInvlist.Tables[0].NewRow();
                drNewRow["SupplierInvoiceID"] = 0;
                drNewRow["InvoiceNumber"] = "";
                dsInvlist.Tables[0].Rows.InsertAt(drNewRow, 0);
                gvInvoicDetails.EditIndex = 0;
                gvInvoicDetails.PageIndex = 0;
                Build_gvInvoice(dsInvlist);
                Page.Validate();
                ((TextBox)gvInvoicDetails.Rows[0].FindControl("txtInvNumber")).Focus();
                //resetInvgridError("Enter Invoice details", false);
            }
            catch (Exception ex)
            {
                resetInvgridError("Error while process", true);
                 CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
            }
           
            /*

            StringBuilder sql = new StringBuilder();
            sql.Append("Insert into ORD_SupplierInvoice (POHeaderID,CurrencyID,InvoiceNumber,CreatedBy) values (" + ViewState["HeaderID"].ToString() + ",1," + DB.SQuote(DateTime.Now.ToLongTimeString())   +"," + CreatedBy + ")");
            try
            {
                DB.ExecuteSQL(sql.ToString());
                gvInvoicDetails.EditIndex = 0;
                gvInvoicDetails.PageIndex = 0;
                ViewState["InvoiceSQl"] = "sp_ORD_SupplierInvoiceList @POHeaderId=" + ViewState["HeaderID"].ToString();
                Build_gvInvoice(Build_gvInvoice());
                ((TextBox)gvInvoicDetails.Rows[0].FindControl("txtInvNumber")).Text = "";
                ((TextBox)gvInvoicDetails.Rows[0].FindControl("atcCurrency")).Text = "";
                ((TextBox)gvInvoicDetails.Rows[0].FindControl("txtInvNumber")).Focus();
                hifgvCurrency.Value = "";
                ViewState["InsertInvDetails"] = true;
                resetInvgridError("Enter Invoice details",false);
            }
            catch (Exception ex)
            {
                resetInvgridError(ex.ToString(), true);
            }*/
        }

        protected void lnkDelete_Click(object sender, EventArgs e)
        {
            //test case ID (TC_083)
            //Deleted selected line item
            int count = 0;
            String SupplierinvIds = "";
            CheckBox checkBox;
            Literal literal;
            foreach (GridViewRow gvRow in gvInvoicDetails.Rows)
            {
                if (gvRow.RowType == DataControlRowType.DataRow)
                {
                    CheckBox c = (CheckBox)gvRow.FindControl("chkDelete");
                    if (c != null)
                    {
                      //  var c1 = (CheckBox)gvRow.FindControl("chkDelete");
                        if (c.Checked)
                        {
                            count++;
                        }
                    }
                }
               
                if (gvRow.RowState != DataControlRowState.Edit)
                {
                    checkBox = (CheckBox)gvRow.FindControl("chkDelete");
                    if (checkBox.Checked)
                    {
                        literal = (Literal)gvRow.FindControl("ltInvID");
                        SupplierinvIds += literal.Text + ",";
                    }
                }
            }
            if (count == 0)
            {
                resetgridError("Please select Line Items to Delete", true);
            }
            try
            {
               /* IDataReader GetShipmentreceive = DB.GetRS("[sp_ORD_GetMaterialReceivedOrNot] @POHeaderID=" + ViewState["HeaderID"].ToString());
                if (GetShipmentreceive.Read())
                {
                    resetInvgridError("Purchase Order is received,cannot delete lineitems", true);
                    return;
                }*/
                if (SupplierinvIds != "")
                {
                    DB.ExecuteSQL("sp_ORD_DeleteSupplierInvoice @SupplierInvoiceIDs=" + DB.SQuote(SupplierinvIds)+ ",@UpdatedBy="+cp.UserID.ToString());
                    ViewState["InvoiceSQl"] = "sp_ORD_SupplierInvoiceList @POHeaderId=" + ViewState["HeaderID"].ToString();
                    Build_gvInvoice(Build_gvInvoice());

                    if (gvInvoicDetails.Rows.Count == 0 && GVPODetails.Rows.Count == 0)
                    {
                        atcSupplier.Enabled = true;
                        txtTenant.Enabled = true;
                    }

                    resetInvgridError("Successfully deleted the selected Supplier Invoice Details", false);
                    Build_gvInvoice(Build_gvInvoice());
                }
                
            }
            catch (Exception ex)
            {
                resetInvgridError("Error while deleting", true);
                 CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
            }
        }

        #endregion

        protected void atcMCode_TextChanged(object sender, EventArgs e)
        {

        }

        protected void inkClose_Click(object sender, EventArgs e)
        {
            cp = HttpContext.Current.User as CustomPrincipal;
            try
            {
                IDataReader GetShipmentreceive = DB.GetRS("[sp_ORD_GetMaterialReceivedOrNot] @POHeaderID=" + ViewState["HeaderID"].ToString());
                if (GetShipmentreceive.Read())
                {
                    resetError("Purchase Order is received, cannot close", true);
                    GetShipmentreceive.Close();
                    return;
                }
                GetShipmentreceive.Close();
            }
            catch (Exception ex)
            {
                resetError("Error while closing",true);
                CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
                return;
            }
            //<!--------------------Procedure Conversion-------------->
           // String sCmdClosePO = "update ORD_POHeader set POStatusID=3 where POHeaderID=" + ViewState["HeaderID"].ToString();
            String sCmdClosePO = "Exec [dbo].[USP_UpdatePoStatus] @POHeaderID = " + ViewState["HeaderID"].ToString();
            // DB.ExecuteSQL(sCmdClosePO);
            Response.Redirect("PODetailsInfo.aspx?poid=" + ViewState["HeaderID"].ToString() + "&tid=" + hifTenant.Value);
        }

        protected void Inksearch_Click(object sender, EventArgs e)
        {

            //test case ID (TC_058)
            //Searches for a material with the provided part no.

            String text=txtSearch.Text.Trim();
            if (text == "Search Part Number...")
                text = "";
            ViewState["PODetailsList"] = "EXEC dbo.sp_ORD_PODetailsList  @POHeaderID=" + ViewState["HeaderID"].ToString() + " ,@MCode='" + text + "'";
            RFDDetails_buildGridData(RFDDetails_buildGridData());
            if (GVPODetails.Rows.Count == 0)
            {
                pnlgvPODetails.Visible = false;
            }
            else
            {
                pnlgvPODetails.Visible = true;
            }
        }

        #region ------------Invoice Details Handling---------------

        protected void lnkNewinvoiceItemDetials_Click(object sender, EventArgs e)
        {
            cp = HttpContext.Current.User as CustomPrincipal;
            string MMid = hifMaterialMasterId.Value;
            if (MMid != "")
            {
                string ISrequired = "0";
                string ParameterName = "";
                //<!----------------Procedure Conversion---------------------->
                // string _Query = "select mm.MaterialMaster_MaterialStorageParameterID,mm.MaterialMasterID,mm.IsRequired,mm.MaterialStorageParameterID,msp.ParameterName from MMT_MaterialMaster_MSP mm join MMT_MSP msp on mm.MaterialStorageParameterID = msp.MaterialStorageParameterID where mm.MaterialMasterID=" + MMid;
                string _Query = "Exec [dbo].[USP_MMT_MaterialMaster_MSPList] @MaterialMasterID=" + MMid;
                DataSet DS = DB.GetDS(_Query, false);
                if (DS.Tables[0].Rows.Count != 0)
                {
                    foreach (DataRow Row1 in DS.Tables[0].Rows)
                    {
                        ISrequired = Row1["IsRequired"].ToString();
                        ParameterName = Row1["ParameterName"].ToString();
                        if (DS.Tables != null)
                        {
                            if (ParameterName == "MfgDate" && ISrequired == "True")
                            {
                                hdnmfgdate.Value = "1";
                            }
                            else if (ParameterName == "MfgDate" && ISrequired == "False")
                            {
                                hdnmfgdate.Value = "0";
                            }
                            else if (ParameterName == "ExpDate" && ISrequired == "True")
                            {
                                hdnexpdate.Value = "1";

                            }
                            else if (ParameterName == "ExpDate" && ISrequired == "False")
                            {
                                hdnexpdate.Value = "0";

                            }
                            else if (ParameterName == "BatchNo" && ISrequired == "True")
                            {
                                hdnbatchno.Value = "1";

                            }
                            else if (ParameterName == "BatchNo" && ISrequired == "False")
                            {
                                hdnbatchno.Value = "0";

                            }

                            else if (ParameterName == "ProjectRefNo" && ISrequired == "True")
                            {
                                hdnprojrefno.Value = "1";

                            }
                            else if (ParameterName == "ProjectRefNo" && ISrequired == "False")
                            {
                                hdnprojrefno.Value = "0";

                            }
                            else if (ParameterName == "SerialNo" && ISrequired == "True")
                            {
                                hdnSerialNo.Value = "1";                             

                            }
                            else if (ParameterName == "SerialNo" && ISrequired == "False")
                            {
                                hdnSerialNo.Value = "0";

                            }

                            // added by lalitha on 28/02/2019  
                            else if (ParameterName == "MRP" && ISrequired == "True")
                            {
                                hdnMRP.Value = "1";

                            }
                            else if (ParameterName == "MRP" && ISrequired == "False")
                            {
                                hdnMRP.Value = "0";

                            }
                            // added by lalitha on 28/02/2019  
                        }
                    }
                }
                else
                {
                    hdnmfgdate.Value = "0";
                    hdnexpdate.Value = "0";
                    hdnbatchno.Value = "0";
                    hdnprojrefno.Value = "0";
                    hdnSerialNo.Value = "0";
                    hdnMRP.Value = "0";
                }
            }

            //test case ID (TC_087)
            //Create a dummy row to insert new values

            try
            {
                DataSet dsSupplierInvoiceList = Build_SupplierMaterialList();
                DataRow row = dsSupplierInvoiceList.Tables[0].NewRow();
                row["SupplierInvoiceDetailsID"] = 0;
                row["SupplierInvoiceID"] = 0;
                row["InvoiceNumber"] = "";
                row["InvCountryofOrigin"] = "";

                dsSupplierInvoiceList.Tables[0].Rows.InsertAt(row, 0);
                gvSupplerInvoiceMaterialList.PageIndex = 0;
                gvSupplerInvoiceMaterialList.EditIndex = 0;
                Build_SupplierMaterialList(dsSupplierInvoiceList);

                ScriptManager.RegisterStartupScript(this, this.GetType(), "test", "DisableAstricks('"+hdnmfgdate.Value+","+hdnexpdate.Value+","+hdnbatchno.Value+","+hdnprojrefno.Value+","+ hdnSerialNo.Value + ","+ hdnMRP.Value+ "');", true);

            }
            catch (Exception ex)
            {
                resetSupplierDetailsError("Error while process",true);
                 CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
            }
        }

        private DataSet Build_SupplierMaterialList()
        {
            String sCmdSupplerMaterialList = ViewState["SupplerMaterialList"].ToString();
            DataSet dsSupplierInvoiceList = DB.GetDS(sCmdSupplerMaterialList,false);
            return dsSupplierInvoiceList;
        }

        private void Build_SupplierMaterialList(DataSet dsSupplierInvoiceList)
        {
            gvSupplerInvoiceMaterialList.DataSource = dsSupplierInvoiceList;
            gvSupplerInvoiceMaterialList.DataBind();
            dsSupplierInvoiceList.Dispose();

            ScriptManager.RegisterStartupScript(this, this.GetType(), "unblockDialog", "NProgress.done();unblockDialog();btnclose();", true);	
        }
        //protected void gvSupplerInvoiceMaterialList_RowEditing(object sender, GridViewEditEventArgs e)
        protected void gvSupplerInvoiceMaterialList_RowEditing(object sender, EventArgs e)
        {
            string MMid = hifMaterialMasterId.Value;
            if (MMid != "")
            {
                string ISrequired = "0";
                string ParameterName = "";
                //<!-------------------Procedure conversion-------------->
               // string _Query = "select mm.MaterialMaster_MaterialStorageParameterID,mm.MaterialMasterID,mm.IsRequired,mm.MaterialStorageParameterID,msp.ParameterName from MMT_MaterialMaster_MSP mm join MMT_MSP msp on mm.MaterialStorageParameterID = msp.MaterialStorageParameterID where mm.MaterialMasterID=" + MMid;

                string _Query = "Exec [dbo].[USP_MMT_MaterialMaster_MSPList] @MaterialMasterID=" + MMid;
                DataSet DS = DB.GetDS(_Query, false);
                if (DS.Tables[0].Rows.Count != 0)
                {
                    foreach (DataRow Row1 in DS.Tables[0].Rows)
                    {
                        ISrequired = Row1["IsRequired"].ToString();
                        ParameterName = Row1["ParameterName"].ToString();
                        if (DS.Tables != null)
                        {
                            if (ParameterName == "MfgDate" && ISrequired == "True")
                            {
                                hdnmfgdate.Value = "1";
                            }
                            else if (ParameterName == "MfgDate" && ISrequired == "False")
                            {
                                hdnmfgdate.Value = "0";
                            }
                            else if (ParameterName == "ExpDate" && ISrequired == "True")
                            {
                                hdnexpdate.Value = "1";

                            }
                            else if (ParameterName == "ExpDate" && ISrequired == "False")
                            {
                                hdnexpdate.Value = "0";

                            }
                            else if (ParameterName == "BatchNo" && ISrequired == "True")
                            {
                                hdnbatchno.Value = "1";

                            }
                            else if (ParameterName == "BatchNo" && ISrequired == "False")
                            {
                                hdnbatchno.Value = "0";

                            }

                            else if (ParameterName == "ProjectRefNo" && ISrequired == "True")
                            {
                                hdnprojrefno.Value = "1";

                            }
                            else if (ParameterName == "ProjectRefNo" && ISrequired == "False")
                            {
                                hdnprojrefno.Value = "0";

                            }
                            else if (ParameterName == "MRP" && ISrequired == "True")
                            {
                                hdnMRP.Value = "1";

                            }
                            else if (ParameterName == "MRP" && ISrequired == "False")
                            {
                                hdnMRP.Value = "0";

                            }

                            else if (ParameterName == "SerialNo" && ISrequired == "True")
                            {
                                hdnSerialNo.Value = "1";

                            }
                            else if (ParameterName == "SerialNo" && ISrequired == "False")
                            {
                                hdnSerialNo.Value = "0";

                            }
                        }
                    }
                }
                else
                {
                    hdnmfgdate.Value = "0";
                    hdnexpdate.Value = "0";
                    hdnbatchno.Value = "0";
                    hdnprojrefno.Value = "0";
                    hdnSerialNo.Value = "0";
                    hdnMRP.Value = "0";
                }
            }
            try
            {
                int EditIndex = ((GridViewRow)((LinkButton)sender).Parent.Parent).RowIndex;
                gvSupplerInvoiceMaterialList.EditIndex = EditIndex;
                Build_SupplierMaterialList(Build_SupplierMaterialList());

                ScriptManager.RegisterStartupScript(this, this.GetType(), "test", "DisableAstricks('" + hdnmfgdate.Value + "," + hdnexpdate.Value + "," + hdnbatchno.Value + "," + hdnprojrefno.Value + "," + hdnSerialNo.Value + "," + hdnMRP.Value + "');", true);
                //RegisterStartupScript("jsUnblockDialog", "overlay();");
            }
            catch (Exception ex)
            {
                resetSupplierDetailsError("Error while editing", true);
                CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
            }
        }

        //protected void gvSupplerInvoiceMaterialList_RowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
        protected void gvSupplerInvoiceMaterialList_RowCancelingEdit(object sender, EventArgs e)
        {
            //test case ID ()
            //cance modification in the line item

            try
            {
                gvSupplerInvoiceMaterialList.EditIndex = -1;
                Build_SupplierMaterialList(Build_SupplierMaterialList());
            }
            catch (Exception ex)
            {
                resetSupplierDetailsError("Error while canceling", true);
                CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
            }
        }

        //protected void gvSupplerInvoiceMaterialList_RowUpdating(object sender, GridViewUpdateEventArgs e)
        protected void gvSupplerInvoiceMaterialList_RowUpdating(object sender, EventArgs e)
        {
            //test case ID(TC_103)
            //Update modification in the line item
            int RowIndex = ((GridViewRow)((Button)sender).Parent.Parent).RowIndex;
            GridViewRow row = gvSupplerInvoiceMaterialList.Rows[RowIndex];

            Literal ltSupplierInvoiceDetailsID = (Literal)row.FindControl("ltSupplierInvoiceDetailsID");
            HiddenField hifSupplierInvoiceID = (HiddenField)row.FindControl("hifSupplierInvoiceID");
            TextBox atcInvoiceNumber = (TextBox)row.FindControl("atcInvoiceNumber");
            TextBox txtInvoiceQuantity = (TextBox)row.FindControl("txtInvoiceQuantity");
            HiddenField hifMaterialMaster_InvUoM = (HiddenField)row.FindControl("hifMaterialMaster_InvUoM");
            TextBox txtInvDiscountInPercentage = (TextBox)row.FindControl("txtInvDiscountInPercentage");
            TextBox txtUnitPrice = (TextBox)row.FindControl("txtUnitPrice");
            TextBox txtTax = (TextBox)row.FindControl("txtTax");
            TextBox txtMfgDate = (TextBox)row.FindControl("txtMfgDate1");
            TextBox txtexpdate = (TextBox)row.FindControl("txtExpDate1");
            TextBox txtBatchNo = (TextBox)row.FindControl("txtBatchNo");
            TextBox txtprojectrefno = (TextBox)row.FindControl("txtProjectrefno");
            TextBox MRP = (TextBox)row.FindControl("txtMRP");
            TextBox txtSerialNo = (TextBox)row.FindControl("txtSerialNo");
            Label lblMfgDate = (Label)row.FindControl("lblmfgdate");
            Label lblexpdate = (Label)row.FindControl("lblexpdate");
            Label lblBatchNo = (Label)row.FindControl("lblBatchNo");
            Label lblprojectrefno = (Label)row.FindControl("lblProjrefno");
            Label lblMRP = (Label)row.FindControl("lblMRP");
            Label lblSerialNo = (Label)row.FindControl("lblSerialNo");
            int linenumber = Convert.ToInt32(ltLineNo.Text);
            //if (txtInvoiceQuantity.Text == "")
            //{
            //    txtInvoiceQuantity.Text = "0";
            //}
            if (hifSupplierInvoiceID.Value == "" || hifSupplierInvoiceID.Value == "0")
            {
                resetSupplierDetailsError("Please Select Invoice No.", true);
                // atcInvoiceNumber.Text = "";
                return;
            }
            if (hifMaterialMaster_InvUoM.Value == "" || hifMaterialMaster_InvUoM.Value == "0")
            {
                resetSupplierDetailsError("Please Select Invoice UoM.", true);
                // atcInvoiceNumber.Text = "";
                return;
            }
            if (txtInvoiceQuantity.Text == "")
            {
                resetSupplierDetailsError("Please enter Invoice Qty", true);
                txtInvoiceQuantity.Text = "";
                return;
            }

            string mmid = hifMaterialMasterId.Value;
            string Isrequired = "0";
            string Parametername = "";
            //<!-------------Procedure Converting-------------------------->
            //string Query = "select mm.MaterialMaster_MaterialStorageParameterID,mm.MaterialMasterID,mm.IsRequired,mm.MaterialStorageParameterID,msp.ParameterName from MMT_MaterialMaster_MSP mm join MMT_MSP msp on mm.MaterialStorageParameterID = msp.MaterialStorageParameterID where mm.MaterialMasterID=" + mmid;
            string Query = "Exec [dbo].[USP_MMT_MaterialMaster_MSPList] @MaterialMasterID=" + mmid;
            DataSet ds = DB.GetDS(Query, false);
            if (ds.Tables[0].Rows.Count != 0)
            {
                foreach (DataRow Row1 in ds.Tables[0].Rows)
                {
                    Isrequired = Row1["IsRequired"].ToString();
                    Parametername = Row1["ParameterName"].ToString();
                    if (ds.Tables != null)
                    {
                        if (Parametername == "MfgDate" && Isrequired == "True")
                        {
                            if (txtMfgDate.Text == "")
                            {
                                resetError("Please Select Mandatory Mfg. Date", true);
                                lblMfgDate.Style["display"] = "block";
                                return;
                            }
                        }
                        else if (Parametername == "ExpDate" && Isrequired == "True")
                        {
                            if (txtexpdate.Text.Trim() == "")
                            {
                                resetError("Please Enter Mandatory Exp. Date", true);
                                lblexpdate.Style["display"] = "block";
                                return;
                            }

                        }
                        else if (Parametername == "BatchNo" && Isrequired == "True")
                        {
                            if (txtBatchNo.Text.Trim() == "")
                            {
                                resetError("Please Enter Mandatory Batch No", true);

                                lblBatchNo.Style["display"] = "block";
                                return;
                            }

                        }

                        else if (Parametername == "MRP" && Isrequired == "True")
                        {
                            if (MRP.Text.Trim() == "")
                            {
                                resetError("Please Enter Mandatory MRP ", true);
                                lblMRP.Style["display"] = "block";

                                return;
                            }

                        }
                        else if (Parametername == "ProjectRefNo" && Isrequired == "True")
                        {
                            if (txtprojectrefno.Text.Trim() == "")
                            {
                                resetError("Please Enter Mandatory 	Project RefNo  ", true);
                                lblprojectrefno.Style["display"] = "block";

                                return;
                            }

                        }
                        else if (Parametername == "SerialNo" && Isrequired == "True")
                        {
                            if (txtSerialNo.Text.Trim() == "")
                            {
                                resetError("Please Enter Mandatory SerialNo. ", true);
                                lblSerialNo.Style["display"] = "block";
                                return;
                            }

                        }
                    }
                }
            }


            //HiddenField hifInvCountryofOriginID = (HiddenField)row.FindControl("hifInvCountryofOriginID");

            int inbStatusID = DB.GetSqlN("EXEC [dbo].[USP_ORD_CheckInboundStatusWithPO] @POHeaderID=" + ViewState["HeaderID"].ToString());

            IDataReader GetShipmentreceive = DB.GetRS("[sp_ORD_GetMaterialReceivedOrNot] @SupplierInvoiceDetailsID=" + ltSupplierInvoiceDetailsID.Text);
            if (inbStatusID > 2)
            {               
                if (GetShipmentreceive.Read())
                {
                    resetgridError("Invoice number is received, cannot edit", true);
                    GetShipmentreceive.Close();
                    return;
                }
            }

            if (txtMfgDate.Text != "" && txtexpdate.Text != "")
            {
                if (Convert.ToDateTime(txtMfgDate.Text) > Convert.ToDateTime(txtexpdate.Text))
                {
                    resetError("Exp Date Should be greater than Mfg Date", true);
                    //lblSerialNo.Style["display"] = "block";
                    return;
                }

            }
            String MfgDate = null;
            if (txtMfgDate.Text.Trim() != "")
                //InvoiceDate = DB.SQuote(CommonLogic.GetConfigValue(cp.TenantID, "DateFormat") == "dd/MM/yyyy" ? DateTime.ParseExact(txtInvoiceDate.Text.Trim(), "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("MM/dd/yyyy") : txtInvoiceDate.Text.Trim());

                MfgDate = DB.SQuote(CommonLogic.GetConfigValue(Convert.ToInt16(hifTenant.Value), "DateFormat") == "dd-M-yyyy" ? DateTime.ParseExact(txtMfgDate.Text.Trim(), "dd-M-yyyy", CultureInfo.InvariantCulture).ToString("MM/dd/yyyy") : txtMfgDate.Text.Trim());
            else
                MfgDate = "NULL";

            String ExpDate = null;
            if (txtexpdate.Text.Trim() != "")
                //InvoiceDate = DB.SQuote(CommonLogic.GetConfigValue(cp.TenantID, "DateFormat") == "dd/MM/yyyy" ? DateTime.ParseExact(txtInvoiceDate.Text.Trim(), "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("MM/dd/yyyy") : txtInvoiceDate.Text.Trim());

                ExpDate = DB.SQuote(CommonLogic.GetConfigValue(Convert.ToInt16(hifTenant.Value), "DateFormat") == "dd-M-yyyy" ? DateTime.ParseExact(txtexpdate.Text.Trim(), "dd-M-yyyy", CultureInfo.InvariantCulture).ToString("MM/dd/yyyy") : txtexpdate.Text.Trim());
            else
                ExpDate = "NULL";
            GetShipmentreceive.Close();

            if (txtSerialNo.Text.Trim() != "")
            {
                //<!------------------Procedure Conversion------------------------>
                // int serialnocount = DB.GetSqlN("select COUNT(SerialNo) as N from ORD_SupplierInvoiceDetails where PODetailsID="+ hifPODetailsID.Value+" and isactive=1 and isdeleted=0 and SerialNo='"+txtSerialNo.Text.Trim()+ "' and SupplierInvoiceDetailsID !="+ ltSupplierInvoiceDetailsID.Text);
                int serialnocount = DB.GetSqlN("Exec [dbo].[USP_SupplierInvoiceSerialNOCount]  @PODetailsID=" + hifPODetailsID.Value + ", @SupplierInvoiceDetailsID=" + ltSupplierInvoiceDetailsID.Text + ", @SerialNo='" + txtSerialNo.Text.Trim() + "'");
                if (serialnocount>0)
                {
                    resetSupplierDetailsError("Serial No. already Exists", true);
                    return;
                }
                int count = DB.GetSqlN("Exec [dbo].[sp_GET_SERIAL_COUNT] @SerialNo='" + txtSerialNo.Text + "',@MMID='" + mmid + "'");
                if(count>0)
                {
                    resetSupplierDetailsError("Serial No. already Exists", true);
                    return;
                }
                txtInvoiceQuantity.Text = "1";
            }
            StringBuilder sCmdUpdateSupplierInvoiceMaterialList = new StringBuilder();
            sCmdUpdateSupplierInvoiceMaterialList.Append("Declare @UPResult int exec [dbo].[sp_ORD_UpsertSupplierInvoiceDetails] ");
            sCmdUpdateSupplierInvoiceMaterialList.Append("@SupplierInvoiceDetailsID=" + ltSupplierInvoiceDetailsID.Text);
            sCmdUpdateSupplierInvoiceMaterialList.Append(",@PODetailsID="+hifPODetailsID.Value);
            sCmdUpdateSupplierInvoiceMaterialList.Append(",@SupplierInvoiceID="+hifSupplierInvoiceID.Value);
            sCmdUpdateSupplierInvoiceMaterialList.Append(",@InvoiceQuantity="+txtInvoiceQuantity.Text);
            sCmdUpdateSupplierInvoiceMaterialList.Append(",@InvDiscountInPercentage="+(txtInvDiscountInPercentage.Text!=""?txtInvDiscountInPercentage.Text:"NULL"));
            sCmdUpdateSupplierInvoiceMaterialList.Append(",@UnitPrice="+(txtUnitPrice.Text!=""?txtUnitPrice.Text:"NULL"));
            sCmdUpdateSupplierInvoiceMaterialList.Append(",@Tax="+(txtTax.Text!=""?txtTax.Text:"NULL"));
            //sCmdUpdateSupplierInvoiceMaterialList.Append(",@InvCountryofOriginID="+(hifInvCountryofOriginID.Value!=""?hifInvCountryofOriginID.Value:"NULL"));
            sCmdUpdateSupplierInvoiceMaterialList.Append(",@MaterialMaster_InvUoMID="+hifMaterialMaster_InvUoM.Value);
            sCmdUpdateSupplierInvoiceMaterialList.Append(",@MfgDate=" + MfgDate);
            sCmdUpdateSupplierInvoiceMaterialList.Append(",@ExpDate=" + ExpDate);
            //sCmdUpdateSupplierInvoiceMaterialList.Append(",@MfgDate=" + DB.DateQuote(txtMfgDate.Text) + "");
            //sCmdUpdateSupplierInvoiceMaterialList.Append(",@ExpDate=" + DB.DateQuote(txtexpdate.Text) + "");           
            sCmdUpdateSupplierInvoiceMaterialList.Append(",@BatchNo=" + DB.SQuote(txtBatchNo.Text) + "");
            sCmdUpdateSupplierInvoiceMaterialList.Append(",@ProjectRefNo=" + DB.SQuote(txtprojectrefno.Text) + "");
            sCmdUpdateSupplierInvoiceMaterialList.Append(",@SerialNo=" + DB.SQuote(txtSerialNo.Text) + "");
            sCmdUpdateSupplierInvoiceMaterialList.Append(",@POHeaderID=" + ViewState["HeaderID"].ToString());
            sCmdUpdateSupplierInvoiceMaterialList.Append(",@KitPlannerID=" + (hdnkitid.Value!=""? hdnkitid.Value:"NULL"));
            sCmdUpdateSupplierInvoiceMaterialList.Append(",@LineNumber=" + linenumber);
            sCmdUpdateSupplierInvoiceMaterialList.Append(",@MRP=" + (MRP.Text.Trim() != "" ? MRP.Text.Trim() : "NULL"));

            sCmdUpdateSupplierInvoiceMaterialList.Append(",@CreatedBy="+cp.UserID);
            sCmdUpdateSupplierInvoiceMaterialList.Append(",@Result=@UPResult out select @UPResult as N");
            try
            {
                int Result = DB.GetSqlN(sCmdUpdateSupplierInvoiceMaterialList.ToString());
                gvSupplerInvoiceMaterialList.EditIndex = -1;
                Build_SupplierMaterialList(Build_SupplierMaterialList());
                if(Result==0)
                    resetSupplierDetailsError("Successfully Updated", false);
                else
                    resetSupplierDetailsError("Successfully Updated, but total 'Invoice Quantity' is greater than 'PO Quantity'", false);
            }
            catch (Exception ex)
            {
                resetSupplierDetailsError("Error while updating", true);
                 CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
            }
            Build_SupplierMaterialList(Build_SupplierMaterialList());
        }

        protected void gvSupplerInvoiceMaterialList_PageIndexChanging(object sender, GridViewPageEventArgs e)
        {
            try
            {
                gvSupplerInvoiceMaterialList.PageIndex = e.NewPageIndex;
                Build_SupplierMaterialList(Build_SupplierMaterialList());
            }
            catch (Exception ex)
            {
                 CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
                //resetSupplierDetailsError(ex.ToString(),true);
            }
        }

        #endregion

        protected void GVPODetails_RowCommand(object sender, GridViewCommandEventArgs e)
        {
            cp = HttpContext.Current.User as CustomPrincipal;
            if (e.CommandName == "InvoiceIDs")
            {
                String[] Arguments = e.CommandArgument.ToString().Split(',');
                hifMaterialMasterId.Value=Arguments[1];
                hifPODetailsID.Value = Arguments[0];
                ltLineNo.Text = Arguments[2];
                ltMaterialCode.Text = Arguments[3];
                hdnkitid.Value = Arguments[4];
                hdnIsKitParent.Value= Arguments[5];
                ViewState["SupplerMaterialList"] = "[dbo].[sp_ORD_GetSupplierInvoiceDetails]  @PODetailsID=" + hifPODetailsID.Value;
                try
                {
                    Build_SupplierMaterialList(Build_SupplierMaterialList());
                }
                catch (Exception ex)
                {
                     CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
                   // resetSupplierDetailsError(ex.ToString(),true);
                }
                ltSupplierDetailsStatus.Text = "";
                //RegisterStartupScript("jsUnblockDialog", "openDialog();");
                
            }
           
        }

        private void RegisterStartupScript(string key, string script)
        {
            ScriptManager.RegisterStartupScript(this, this.GetType(), key, script, true);
        }

        protected void lnkinvDelete_Click(object sender, EventArgs e)
        {
            cp = HttpContext.Current.User as CustomPrincipal;
            //test case ID (TC_108)
            // Delete select  line items
            int count = 0;
            int InvoiceId=0;
          
            StringBuilder sCmdDeleteInvoiceDetails = new StringBuilder();
            StringBuilder sCmdDeleteInvoiceIDS = new StringBuilder();
            foreach (GridViewRow row in gvSupplerInvoiceMaterialList.Rows)
            {
              
                if (row.RowType == DataControlRowType.DataRow)
                {
                    CheckBox c = (CheckBox)row.FindControl("chkDelete2");
                    var c1 = (CheckBox)row.FindControl("chkDelete2");
                    try
                    {
                        if (c1.Checked)
                        {
                            count++;
                            Literal ltsup = (Literal)row.FindControl("ltinvoiceID");
                            InvoiceId = Convert.ToInt32(ltsup.Text);
                        }
                    }
                    catch (Exception ex)
                    {
                    }

                   

                }
                          
                if (row.RowIndex!=gvSupplerInvoiceMaterialList.EditIndex &&((CheckBox)row.FindControl("chkDelete2")).Checked)
                {               

                    sCmdDeleteInvoiceDetails.Append(((Literal)row.FindControl("ltSupplierInvoiceDetailsID")).Text+",");
                   // sCmdDeleteInvoiceIDS.Append(((HiddenField)row.FindControl("ltinvoiceID")).Value + ",");

                    // InvoiceId = Convert.ToInt32(hifSupplierInvoiceID.Value);
                    // InvoiceId = Convert.ToInt32(hifSupplierInvoiceID.Value);

                    //DataSet ds=DB.GetDS("[dbo].[sp_ORD_GetSupplierInvoiceDetails]  @PODetailsID="+ ((Literal)row.FindControl("ltSupplierInvoiceDetailsID")).Text,false);
                    //int inbid = Convert.ToInt32(ds.Tables[0].Rows[0]["IsInInbound"].ToString());
                    //if(inbid==1)
                    //{
                    //    resetSupplierDetailsError("Unable delete the line item", false);
                    //}
                }

                // InvoiceId = Convert.ToInt32(hifSupplierInvoiceID.Value);
            }
            if (count == 0)
            {
                resetgridError("Please select Line Items to Delete", true);
            }
            else
            {
                try
                {
                    int inbStatusID = DB.GetSqlN("EXEC [dbo].[USP_ORD_CheckInboundStatusWithPO] @POHeaderID=" + ViewState["HeaderID"].ToString());

                    if (inbStatusID > 2)
                    {
                        resetSupplierDetailsError("Invoice number is received, cannot delete", false);
                    }
                    else
                    {
                        if (sCmdDeleteInvoiceDetails.ToString() != "")
                        {
                            DB.ExecuteSQL("[dbo].[sp_ORD_DeleteSupplierInvoiceDetails] @SupplierInvoiceDetailsIDs=" + DB.SQuote(sCmdDeleteInvoiceDetails.ToString()) + ",@SupplierInvoiceID =" + InvoiceId + ",@LineNumber=" + ltLineNo.Text + ",@POHeaderID=" + ViewState["HeaderID"].ToString() + ",@UpdatedBy=" + cp.UserID.ToString());
                            Build_SupplierMaterialList(Build_SupplierMaterialList());

                            RFDDetails_buildGridData(RFDDetails_buildGridData());
                            Build_gvInvoice(Build_gvInvoice());
                            resetSupplierDetailsError("Successfully deleted", false);
                        }
                    }
                }
                catch (Exception ex)
                {
                    CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
                    resetSupplierDetailsError("Error while deleting", true);
                }
            }
            
        }

        protected void lnkInvclose_Click(object sender, EventArgs e)
        {
            cp = HttpContext.Current.User as CustomPrincipal;
            try
            {
                gvInvoicDetails.EditIndex = -1;
                Build_gvInvoice(Build_gvInvoice());
                gvSupplerInvoiceMaterialList.EditIndex = -1;
                Build_SupplierMaterialList(Build_SupplierMaterialList());
                GVPODetails.EditIndex = -1;
                RFDDetails_buildGridData(RFDDetails_buildGridData());
              //  RegisterStartupScript("jsUnblockDialog", "closeDialog();");
                //Response.Redirect("PODetailsInfo.aspx?poid=" + ViewState["HeaderID"]);
                PODetailsScript.RegisterDataItem(gvInvoicDetails, DateTime.Now.ToString());
               ScriptManager.RegisterStartupScript(this, this.GetType(), "test", "closeDialog();", true);
            }
            catch (Exception ex)
            {
                 CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
                //lblStatus.Text = ex.ToString();
                //resetSupplierDetailsError(ex.ToString(), true);
            }
        }

        protected void gvSupplerInvoiceMaterialList_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            cp = HttpContext.Current.User as CustomPrincipal;
            if (e.Row.RowType == DataControlRowType.DataRow && (e.Row.RowState == DataControlRowState.Edit))
            {
                string MMid = hifMaterialMasterId.Value;

                if (MMid != "")
                {
                    string ISrequired = "0";
                    string ParameterName = "";
                    //<!-------------------Procedure conversion-------------->
                    // string _Query = "select mm.MaterialMaster_MaterialStorageParameterID,mm.MaterialMasterID,mm.IsRequired,mm.MaterialStorageParameterID,msp.ParameterName from MMT_MaterialMaster_MSP mm join MMT_MSP msp on mm.MaterialStorageParameterID = msp.MaterialStorageParameterID where mm.MaterialMasterID=" + MMid;

                    string _Query = "Exec [dbo].[USP_MMT_MaterialMaster_MSPList] @MaterialMasterID=" + MMid;
                    DataSet DS = DB.GetDS(_Query, false);
                    if (DS.Tables[0].Rows.Count != 0)
                    {
                        foreach (DataRow Row1 in DS.Tables[0].Rows)
                        {
                            ISrequired = Row1["IsRequired"].ToString();
                            ParameterName = Row1["ParameterName"].ToString();
                            if (DS.Tables != null)
                            {
                                if (ParameterName == "MfgDate" && ISrequired == "True")
                                {
                                    hdnmfgdate.Value = "1";
                                    ((Label)e.Row.FindControl("lblMfgDate")).Style["display"] = "block";

                                }
                                else if (ParameterName == "MfgDate" && ISrequired == "False")
                                {
                                    hdnmfgdate.Value = "0";
                                }
                                else if (ParameterName == "ExpDate" && ISrequired == "True")
                                {
                                    hdnexpdate.Value = "1";
                                    ((Label)e.Row.FindControl("lblexpdate")).Style["display"] = "block";
                                }
                                else if (ParameterName == "ExpDate" && ISrequired == "False")
                                {
                                    hdnexpdate.Value = "0";

                                }
                                else if (ParameterName == "BatchNo" && ISrequired == "True")
                                {
                                    hdnbatchno.Value = "1";
                                    ((Label)e.Row.FindControl("lblBatchNo")).Style["display"] = "block";
                                }
                                else if (ParameterName == "BatchNo" && ISrequired == "False")
                                {
                                    hdnbatchno.Value = "0";

                                }

                                else if (ParameterName == "ProjectRefNo" && ISrequired == "True")
                                {
                                    hdnprojrefno.Value = "1";
                                    ((Label)e.Row.FindControl("lblProjrefno")).Style["display"] = "block";
                                }
                                else if (ParameterName == "ProjectRefNo" && ISrequired == "False")
                                {
                                    hdnprojrefno.Value = "0";

                                }
                                else if (ParameterName == "MRP" && ISrequired == "True")
                                {
                                    hdnMRP.Value = "1";
                                    ((Label)e.Row.FindControl("lblMRP")).Style["display"] = "block";
                                }
                                else if (ParameterName == "MRP" && ISrequired == "False")
                                {
                                    hdnMRP.Value = "0";

                                }

                                else if (ParameterName == "SerialNo" && ISrequired == "True")
                                {
                                    hdnSerialNo.Value = "1";
                                    ((Label)e.Row.FindControl("lblSerialNo")).Style["display"] = "block";
                                }
                                else if (ParameterName == "SerialNo" && ISrequired == "False")
                                {
                                    hdnSerialNo.Value = "0";

                                }
                            }
                        }
                    }
                    else
                    {
                        hdnmfgdate.Value = "0";
                        hdnexpdate.Value = "0";
                        hdnbatchno.Value = "0";
                        hdnprojrefno.Value = "0";
                        hdnSerialNo.Value = "0";
                        hdnMRP.Value = "0";
                    }
                }
            }

            if (e.Row.RowType == DataControlRowType.DataRow && !(e.Row.RowState == DataControlRowState.Edit))
            {
                DataRow row = ((DataRowView)e.Row.DataItem).Row;
                bool IsInInbound = Convert.ToBoolean(row["IsInInbound"]);

                int inbStatusID = DB.GetSqlN("EXEC [dbo].[USP_ORD_CheckInboundStatusWithPO] @POHeaderID=" + ViewState["HeaderID"].ToString());

                if (inbStatusID > 2)
                {
                    if (IsInInbound)
                    {
                        e.Row.Controls[13].Controls[1].Visible = false;
                    }
                    if (hdnkitid.Value != "" && hdnIsKitParent.Value == "0")
                    {
                        e.Row.Controls[13].Controls[1].Visible = false;
                    }
                }
              
                #region added by kashyap on 25-01-2018
                LinkButton lnkCPOEdit = (LinkButton)e.Row.FindControl("lnkCPOEdit");
                //<!---------------Procedure conversion------------->
               // string query = "select * from INB_Inbound_ORD_SupplierInvoice where POHeaderID=" + ViewState["HeaderID"].ToString();
               string query= "Exec [dbo].[USP_Inbound_SupplierInvoiceCount1] @POHeaderID=" + ViewState["HeaderID"].ToString() +", @SupplierInvoiceID = "+ row.ItemArray[2].ToString();
                DataSet _ds = DB.GetDS(query, false);
                if (inbStatusID > 2)
                {
                    if (_ds.Tables[0].Rows.Count != 0)
                    {
                        lnkCPOEdit.Enabled = false;
                        lnkCPOEdit.ForeColor = System.Drawing.Color.Gray;
                        lnkCPOEdit.Style.Add("cursor", "default");
                    }
                }
                //<!------------------------Procedure Converting---------------------------->
               // string Query1 = "select POStatusID AS N from ORD_POHeader where POHeaderID=" + ViewState["HeaderID"].ToString();
                string Query1= "Exec [dbo].[USP_MST_POStatusDrop] @POHeaderID=" + ViewState["HeaderID"].ToString();
                int StatusID = DB.GetSqlN(Query1);

                if (StatusID == 3)
                {
                    e.Row.Controls[13].Controls[1].Visible = false;
                    e.Row.Controls[14].Controls[1].Visible = false;
                }
                #endregion
            }
        }

        private void downLoadExcel(DataSet ds)
        {
            cp = HttpContext.Current.User as CustomPrincipal;
            try
            {
                string FileName = "PO_Invoice_Material_Data_" + txtPONumber.Text;
                using (XLWorkbook wb = new XLWorkbook())
                {
                   // wb.Worksheets.Add(ds);
                   // DataTable dt = ds.Tables[0];
                    IXLWorksheet sheet;
                    sheet = (wb.AddWorksheet(ds.Tables[0]));
                    sheet.Table("Table1").ShowAutoFilter = false;

                    wb.Worksheet(1).Rows(1, 1).Style.Fill.BackgroundColor = XLColor.FromHtml("219,229,241");
                    wb.Worksheet(1).Rows(1, 1).Style.Font.FontColor = XLColor.RichBlack;
                    wb.Worksheet(1).Cells("C1").Style.Font.FontColor = XLColor.Red;
                    wb.Worksheet(1).Cells("G1").Style.Font.FontColor = XLColor.Red;
                    wb.Worksheet(1).Cells("H1").Style.Font.FontColor = XLColor.Red;
                    


                    Response.Clear();
                    Response.Buffer = true;
                    Response.Charset = "";
                    Response.ContentType = "application/vnd.ms-excel";
                    Response.AddHeader("content-disposition", "attachment;filename=" + FileName + ".xlsx");
                    using (MemoryStream MyMemoryStream = new MemoryStream())
                    {
                        wb.SaveAs(MyMemoryStream);
                        MyMemoryStream.WriteTo(Response.OutputStream);
                        Response.Flush();
                        // Response.WriteFile(Response.OutputStream);
                        Response.End();
                    }
                }
            }
            catch (Exception ex)
            {
                // ------------------ added Exception log by durga on  (20/04/2017)
               // LogExceptionsInDB("PoDetailsInfo", (MethodBase)MethodBase.GetCurrentMethod(), (MethodInfo)MethodInfo.GetCurrentMethod(), ex, "");
            }


        }

        /*PoExcel Export*/
        public DataSet GetspORDPOExcelData(int PoHeaderID)
        {
            return DB.GetDS("EXEC [dbo].[sp_POExcelExport]  @POHeaderID=" + PoHeaderID + " ", false);
        }

        //============== OLD Code Using ImageButton But submit type validations fie that y we convert into link button ===================
        //protected void ImgExport_Click(object sender, ImageClickEventArgs e)

            //========================== New Code FOR Linkbutton ===================//
        protected void ImgExport_Click(object sender, EventArgs e)
        {

            //<!-----------------Procedure Converting-------------------->
            //string Query = "select POStatusID AS N from ORD_POHeader where POHeaderID=" + ViewState["HeaderID"].ToString();
            string Query = "Exec[dbo].[USP_MST_POStatusDrop] @POHeaderID = " + ViewState["HeaderID"].ToString();
            int StatusID = DB.GetSqlN(Query);

            //if (StatusID != 1)
            //{
            //    ImgExport.Enabled = false;

            //    resetError("Unable to Export", true);
            //    return;
            //}

            if (StatusID == 1 || StatusID == 2) {
                try
                {
                    int poheaderid = Convert.ToInt32(ViewState["HeaderID"]);
                    //DataSet ds = DB.GetDS(sql, false);

                    DataSet ds = GetspORDPOExcelData(poheaderid);
                    if (ds == null || ds.Tables[0].Rows.Count == 0)
                    {
                        resetSupplierDetailsError("No Items found to download excel", true);
                    }
                    else
                    {
                        //ds.Tables[0].Rows[0].[""]
                        string FileName = "PO_Invoice_Material_Data_" + txtPONumber.Text;
                        //  ExportDSToExcelOpen(ds);
                        // ExportDataToExcell(ds, FileName, new List<int>());
                        // ExportToSpreadsheet(ds.Tables[0], FileName);

                        downLoadExcel(ds);
                    }

                }
                catch (Exception ex)
                {
                    // ------------------ added Exception log by durga on  (20/04/2017)

                }
            }
            else
            {
                ImgExport.Enabled = false;

                resetError("Unable to Export", true);
                return;
            }

        }
        public void upsertInvoiceDetails(string InvoiceNumber,string LineNumber, string PONumber, string invoiceDate, string SupplierCode, string CountryName, string Currency, decimal InvoiceValue, int NoofPackages, decimal NetWeight, decimal GrossWeight, string MaterialCode, decimal InvoiceQty, int UnitPrice, string InvoiceUOM, Decimal InvoiceUOMQty,string CreatedOn, int CreatedBy, int IsActive, int IsDeleted,string MfgDate,string ExpDate, string BatchNo,string SerialNo,string ProjectRefNo,string MRP)
        {
            cp = HttpContext.Current.User as CustomPrincipal;
            StringBuilder sCmdupdatelineitem = new StringBuilder();
            sCmdupdatelineitem.Append(" EXEC dbo.Sp_ORD_AddInvoice ");
            sCmdupdatelineitem.Append("@InvoiceNumber='" + InvoiceNumber + "'");
            sCmdupdatelineitem.Append(",@PONumber='" + PONumber + "'");
            sCmdupdatelineitem.Append(",@LineNumber=" + Convert.ToInt32(LineNumber));
            sCmdupdatelineitem.Append(", @invoiceDate=" + DB.SQuote(invoiceDate));
            sCmdupdatelineitem.Append(",@SupplierCode='" + SupplierCode + "'");
            sCmdupdatelineitem.Append(", @CountryName='" + CountryName + "'");       
            sCmdupdatelineitem.Append(",@Currency='" + Currency + "'");
            sCmdupdatelineitem.Append(", @InvoiceValue=" + InvoiceValue);
            sCmdupdatelineitem.Append(",@NoofPackages=" + NoofPackages);
            sCmdupdatelineitem.Append(",@NetWeight=" + NetWeight);
            sCmdupdatelineitem.Append(",@GrossWeight=" + GrossWeight);
            sCmdupdatelineitem.Append(",@MaterialCode='" + MaterialCode + "'");
            sCmdupdatelineitem.Append(",@InvoiceQty=" + InvoiceQty);
            sCmdupdatelineitem.Append(",@UnitPrice=" + UnitPrice);
            sCmdupdatelineitem.Append(",@InvoiceUOM='" + InvoiceUOM + "'");
            sCmdupdatelineitem.Append(",@InvoiceUOMQty=" + InvoiceUOMQty);    
            sCmdupdatelineitem.Append(",@CreatedOn='" + CreatedOn + "'");
            sCmdupdatelineitem.Append(",@CreatedBy="+cp.UserID);
            sCmdupdatelineitem.Append(",@AccountID=" + cp.AccountID);
            sCmdupdatelineitem.Append(",@IsActive=" + IsActive);
            sCmdupdatelineitem.Append(",@IsDeleted=" + IsDeleted);
            sCmdupdatelineitem.Append(",@MfgDate='" + MfgDate + "'");
            sCmdupdatelineitem.Append(",@ExpDate='" + ExpDate + "'");
            sCmdupdatelineitem.Append(",@BatchNo='" + BatchNo + "'");
            sCmdupdatelineitem.Append(",@SerialNo='" + SerialNo + "'");
            sCmdupdatelineitem.Append(",@ProjectRefNo='" + ProjectRefNo + "'");
            sCmdupdatelineitem.Append(",@MRP='" + MRP+"'");

            DB.ExecuteSQL(sCmdupdatelineitem.ToString());
        }

        protected void lnkimport_Click(object sender, EventArgs e)
        {
            //string Query1 = "select POStatusID AS N from ORD_POHeader where POHeaderID=" + ViewState["HeaderID"].ToString();
            //int StatusID = DB.GetSqlN(Query1);

            //if (StatusID != 1)
            //{
            //    lnkimport.Enabled = false;

            //    resetError("Unable to Import", true);
            //    return;
            //}
            cp = HttpContext.Current.User as CustomPrincipal;
            string completePath = Server.MapPath("~/ExcelData/" + FUImport.FileName);
            if (System.IO.File.Exists(completePath))
            {

                System.IO.File.Delete(completePath);

            }
            try
            {
                if (FUImport.HasFile)
                {
                    string path = string.Concat((Server.MapPath("~/ExcelData/" + FUImport.FileName)));
                    FUImport.PostedFile.SaveAs(path);
                    string ext = Path.GetExtension(path);
                    string ponumber = txtPONumber.Text;
                    ViewState["PoNumber"] = ponumber;
                    int poheaderid = Convert.ToInt32(ViewState["HeaderID"]);
                    DataTable dt = CommonLogic.ImportDataFromExcel(path, ext);
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        if (dt.Rows[i]["PONumber"].ToString() != ponumber)
                        {
                            resetSupplierDetailsError("Unable to import Excel file in supplier invoice", true);
                        }
                        if (dt.Rows[i]["PONumber"].ToString() != string.Empty && dt.Rows[i]["PONumber"].ToString() == ponumber)
                        {

                            string invoicenumber = dt.Rows[i]["InvoiceNo"].ToString();
                            string PONumber = dt.Rows[i]["PONumber"].ToString();
                            string LineNumber = dt.Rows[i]["LineNumber"].ToString();
                            string suppliercode = atcSupplier.Text.Split('-')[1];
                            // string InvoiceDate = dt.Rows[i]["InvoiceDate"].ToString();
                            // string InvoiceDate = DateTime.Now.ToString("yyyy-MM-dd h:mm tt");
                            // InvoiceDate = InvoiceDate.Split(' ')[0];
                            string country = dt.Rows[i]["Country"].ToString().Trim() != "" ? dt.Rows[i]["Country"].ToString() : "Null";
                            string Currency = dt.Rows[i]["Currency"].ToString().Trim() != "" ? dt.Rows[i]["Currency"].ToString() : "Null";
                            Decimal invoicevalue = dt.Rows[i]["InvoiceValue"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(dt.Rows[i]["InvoiceValue"].ToString());
                            int noofpackages = dt.Rows[i]["NoOfPackages"].ToString().Trim() == "" ? 0 : Convert.ToInt32(dt.Rows[i]["NoOfPackages"].ToString());
                            Decimal netweight = dt.Rows[i]["NetWeight"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(dt.Rows[i]["NetWeight"].ToString());
                            Decimal grossweight = dt.Rows[i]["NetWeight"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(dt.Rows[i]["GrossWeight"].ToString());
                            string materialcode = dt.Rows[i]["PartNo"].ToString();
                            Decimal invoiceqty = dt.Rows[i]["InvoiceQuantity"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(dt.Rows[i]["InvoiceQuantity"].ToString());
                            Decimal poqty = dt.Rows[i]["POQuantity"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(dt.Rows[i]["POQuantity"].ToString());
                            int unitprice = dt.Rows[i]["UnitPrice"].ToString().Trim() == "" ? 0 : Convert.ToInt32(dt.Rows[i]["UnitPrice"].ToString());
                            string invoiceUoM = dt.Rows[i]["InvoiceUoM"].ToString().Trim() != "" ? dt.Rows[i]["InvoiceUoM"].ToString() : "0";
                            Decimal invoiceUoMqty = dt.Rows[i]["InvoiceUoMQty"].ToString().Trim() == "" ? 0 : Convert.ToDecimal(dt.Rows[i]["InvoiceUoMQty"].ToString().Trim());
                            int invoicedertailid = 0;
                                //dt.Rows[i]["SupplierInvoiceDetailsID"].ToString().Trim() == "" ? 0 : Convert.ToInt32(dt.Rows[i]["SupplierInvoiceDetailsID"].ToString()); 
                            //  string mfgdate = dt.Rows[i]["MfgDate"].ToString().Trim();
                            // string ExpDate = dt.Rows[i]["ExpDate"].ToString().Trim();
                            string BatchNo = dt.Rows[i]["BatchNo"].ToString().Trim() != "" ? dt.Rows[i]["BatchNo"].ToString() : null;
                            string SerialNo = dt.Rows[i]["SerialNo"].ToString().Trim() != "" ? dt.Rows[i]["SerialNo"].ToString() : null;
                            string ProjectRefNo = dt.Rows[i]["ProjectRefNo"].ToString().Trim() != "" ? dt.Rows[i]["ProjectRefNo"].ToString() : null;
                            // DateTime date = DateTime.Now;
                            string date = DateTime.Now.ToString("yyyy-MM-dd h:mm tt");
                            string CreatedOn = date.Split(' ')[0];
                            String mfgdate = null;
                            String InvoiceDate = null;
                            string MRP= dt.Rows[i]["MRP"].ToString().Trim() != "" ? dt.Rows[i]["MRP"].ToString() : null;
                            // string strinvoice = "select * from ORD_PODetails where PODetailsID IN (SELECT POD.PODetailsID  FROM ORD_PODetails POD  JOIN ORD_POHeader POH ON POH.POHeaderID=POD.POHeaderID where POD.POHeaderID=" + ViewState["HeaderID"] + "  and POD.IsDeleted=0) and IsDeleted=0 and MaterialMasterID in (select MaterialMasterID from MMT_MaterialMaster where MCode='" + materialcode + "' and isdeleted=0)";

                            string strinvoice = "Exec [dbo].[USP_CHECKMCodeInPO] @POHeaderID=" + ViewState["HeaderID"] + ",@MCode='" + materialcode + "'";

                            DataSet dsinvoicedetails = DB.GetDS(strinvoice, false);
                            if (MRP!=null)
                            {
                                try
                                {
                                    int MRPvalue = Convert.ToInt32(MRP.ToString().Trim());
                                }
                                catch (Exception ex)
                                {
                                    resetSupplierDetailsError("Please enter valid MRP", true);
                                    return;
                                }

                            }

                            if (dsinvoicedetails.Tables[0].Rows.Count == 0)
                            {
                                resetSupplierDetailsError("Invalid MCode in excel", true);
                                //resetSupplierDetailsError("Please Enter Invoice Number in "+(i+1)+" row" , true);
                                return;
                            }
                            if (invoicenumber == "")
                            {

                                resetSupplierDetailsError("Please enter Invoice Number in excel", true);
                                //resetSupplierDetailsError("Please Enter Invoice Number in "+(i+1)+" row" , true);
                                return;
                            }
                            string invoicedate = "";
                            if (dt.Rows[i]["InvoiceDate(dd/MM/yyyy)"].ToString().Trim() == "")
                            {
                                resetSupplierDetailsError("Please Enter Invoice Date(dd/MM/yyyy)  in excel", true);
                                return;
                            }
                            else
                            {
                                try
                                {
                                     string invdate = (dt.Rows[i]["InvoiceDate(dd/MM/yyyy)"]).ToString();
                                    /*
                                    // invoicedate = DateTime.ParseExact((dt.Rows[i]["InvoiceDate"]).ToString().Replace("-", "/"), "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("MM/dd/yyyy");
                                    string invdate = (dt.Rows[i]["InvoiceDate(dd/MM/yyyy)"]).ToString();
                                     DateTime dDate;
                                     Boolean dateforamat = (DateTime.TryParse(invdate, out dDate));
                                    IFormatProvider fmt = new  System.Globalization.CultureInfo("en-GB",true);
                                    DateTime theDateTime = DateTime.ParseExact(invdate, "dd/MM/yyyy", fmt);
                                    invoicedate = theDateTime.ToString("MM/dd/yyyy");
                                    */
                                    //string formateddate= CommonLogic.GetDateTimeFormatWithOutNullTime(invdate);

                                    InvoiceDate = CommonLogic.Formateddate(invdate);
                                }
                                catch (Exception ex)
                                {

                                    resetSupplierDetailsError("provide Invoice Date format as dd/MM/yyyy",true);
                                    return;
                                }
                            }
                            if (invoiceqty == 0)
                            {
                                resetSupplierDetailsError("Please Enter Invoice Qty in excel", true);
                                return;
                            }


                           // DateTime str3 = Convert.ToDateTime(dt.Rows[i]["InvoiceDate"].ToString());
                            //InvoiceDate = str3.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture);
                           // InvoiceDate = invoicedate;

                            // DateTime str1 = DateTime.ParseExact(dt.Rows[i]["MfgDate"].ToString(), "dd/MM/yyyy", CultureInfo.InvariantCulture);
                            if (dt.Rows[i]["MfgDate(dd/MM/yyyy)"].ToString() != "")
                            {
                                try
                                {
                                  //  mfgdate = DateTime.ParseExact((dt.Rows[i]["MfgDate"]).ToString().Replace("-", "/"), "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("MM/dd/yyyy");
                                    string MFGdate = (dt.Rows[i]["MfgDate(dd/MM/yyyy)"]).ToString();
                                    //DateTime dDate;
                                    //Boolean dateforamat = (DateTime.TryParse(MFGdate, out dDate));
                                    //IFormatProvider fmt = new System.Globalization.CultureInfo("en-GB", true);
                                    //DateTime theDateTime = DateTime.ParseExact(MFGdate, "dd/MM/yyyy", fmt);
                                    //mfgdate = theDateTime.ToString("MM/dd/yyyy");

                                    mfgdate = CommonLogic.Formateddate(MFGdate);
                                }
                                catch (Exception ex)
                                {

                                    resetSupplierDetailsError("provide Invoice Mfg Date format as dd/MM/yyyy", true);
                                    return;
                                }
                                //DateTime str1 = Convert.ToDateTime(dt.Rows[i]["MfgDate"].ToString());
                                //mfgdate = str1.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture);
                                //mfgdate = mfgdate.Split(' ')[0];
                            }


                            string ExpDate = null;
                            if (dt.Rows[i]["ExpDate(dd/MM/yyyy)"].ToString() != "")
                            {
                                try
                                {
                                    // ExpDate = DateTime.ParseExact((dt.Rows[i]["ExpDate"]).ToString().Replace("-", "/"), "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("MM/dd/yyyy");
                                    string EXPdate = (dt.Rows[i]["ExpDate(dd/MM/yyyy)"]).ToString();
                                    //DateTime dDate;
                                    //Boolean dateforamat = (DateTime.TryParse(EXPdate, out dDate));
                                    //IFormatProvider fmt = new System.Globalization.CultureInfo("en-GB", true);
                                    //DateTime theDateTime = DateTime.ParseExact(EXPdate, "dd/MM/yyyy", fmt);
                                    //ExpDate = theDateTime.ToString("MM/dd/yyyy");
                                    ExpDate = CommonLogic.Formateddate(EXPdate);

                                }
                                catch (Exception ex)
                                {

                                    resetSupplierDetailsError("provide Invoice Exp Date format as dd/MM/yyyy", true);
                                    return;
                                }
                                //DateTime str2 = Convert.ToDateTime(dt.Rows[i]["ExpDate"].ToString());
                                //ExpDate = str2.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture);
                                //ExpDate = ExpDate.Split(' ')[0];

                            }
                            //if (dt.Rows[i]["MfgDate"].ToString() != "")
                            //    //InvoiceDate = DB.SQuote(CommonLogic.GetConfigValue(cp.TenantID, "DateFormat") == "dd/MM/yyyy" ? DateTime.ParseExact(txtInvoiceDate.Text.Trim(), "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("MM/dd/yyyy") : txtInvoiceDate.Text.Trim());

                            //    MfgDate = DB.SQuote(CommonLogic.GetConfigValue(Convert.ToInt16(hifTenant.Value), "DateFormat") == "dd/MM/yyyy" ? DateTime.ParseExact(MfgDate, "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("MM/dd/yyyy") : MfgDate);
                            //else
                            //    MfgDate = "NULL";


                            //String ExpDate = null;
                            //if (dt.Rows[i]["ExpDate"].ToString() != "")
                            //    //InvoiceDate = DB.SQuote(CommonLogic.GetConfigValue(cp.TenantID, "DateFormat") == "dd/MM/yyyy" ? DateTime.ParseExact(txtInvoiceDate.Text.Trim(), "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("MM/dd/yyyy") : txtInvoiceDate.Text.Trim());

                            //    ExpDate = DB.SQuote(CommonLogic.GetConfigValue(Convert.ToInt16(hifTenant.Value), "DateFormat") == "dd/MM/yyyy" ? DateTime.ParseExact(ExpDate, "dd/MM/yyyy", CultureInfo.InvariantCulture).ToString("MM/dd/yyyy") : ExpDate);
                            //else
                            //    ExpDate = "NULL";



                            //if (invoiceqty > poqty)
                            //{
                            //    resetSupplierDetailsError("Invoice Qty should not be greater than PO Qty. ", true);
                            //    return;
                            //}
                            //if (invoiceUoM == "0")
                            //{
                            //    resetSupplierDetailsError("Please Enter Invoice UoM in " + (i + 1) + " row", true);
                            //    return;
                            //}
                            //if (invoiceUoMqty == 0)
                            //{
                            //    resetSupplierDetailsError("Please Enter Invoice UoM Qty. in " + (i + 1) + " row", true);
                            //    return;
                            //}
                            //if (unitprice == 0)
                            //{
                            //    resetSupplierDetailsError("Please Fill Unit Price in " + (i + 1) + " row", true);
                            //    return;
                            //}
                            string Isrequired = "0";
                            string Parametername = "";
                            //string Query = "select mm.MaterialMaster_MaterialStorageParameterID,mm.MaterialMasterID,mm.IsRequired,mm.MaterialStorageParameterID,msp.ParameterName from MMT_MaterialMaster_MSP mm join MMT_MSP msp on mm.MaterialStorageParameterID = msp.MaterialStorageParameterID where mm.MaterialMasterID in (select MaterialMasterID from MMT_MaterialMaster where MCode='" + materialcode + "' and isdeleted=0)";
                            string Query = "Exec [dbo].[USP_MMT_MaterialMaster_MSPListByMcode] @MCode='" + materialcode + "'";
                            DataSet ds = DB.GetDS(Query, false);
                            if (ds.Tables[0].Rows.Count != 0)
                            {
                                foreach (DataRow Row1 in ds.Tables[0].Rows)
                                {
                                    Isrequired = Row1["IsRequired"].ToString();
                                    Parametername = Row1["ParameterName"].ToString();
                                    if (ds.Tables != null)
                                    {
                                        if (Parametername == "MfgDate" && Isrequired == "True")
                                        {
                                            if (mfgdate == null)
                                            {
                                               // resetSupplierDetailsError("Please Select Mandatory Mfg. Date in excel", true);
                                                resetError("Please Select Mandatory Mfg. Date in row " + (i + 1), true);
                                                //lblMfgDate.Style["display"] = "block";
                                                return;
                                            }
                                        }
                                        else if (Parametername == "ExpDate" && Isrequired == "True")
                                        {
                                            if (ExpDate == null)
                                            {
                                                resetSupplierDetailsError("Please Enter Mandatory Exp. Date in row " + (i + 1), true);
                                                // lblexpdate.Style["display"] = "block";
                                                return;
                                            }

                                        }
                                        else if (Parametername == "BatchNo" && Isrequired == "True")
                                        {
                                            if (BatchNo == null)
                                            {
                                                resetSupplierDetailsError("Please Enter Mandatory Batch No. in  row " + (i + 1), true);
                                                // lblBatchNo.Style["display"] = "block";
                                                return;
                                            }

                                        }

                                        else if (Parametername == "MRP" && Isrequired == "True")
                                        {
                                            if (MRP == null)
                                            {
                                                resetSupplierDetailsError("Please Enter Mandatory MRP in  row " + (i + 1), true);
                                                //lblprojectrefno.Style["display"] = "block";

                                                return;
                                            }

                                        }
                                        else if (Parametername == "ProjectRefNo" && Isrequired == "True")
                                        {
                                            if (ProjectRefNo == null)
                                            {
                                                resetSupplierDetailsError("Please Enter Mandatory ProjectRefNo in  row " + (i + 1), true);
                                                //lblprojectrefno.Style["display"] = "block";

                                                return;
                                            }

                                        }
                                        else if (Parametername == "SerialNo" && Isrequired == "True")
                                        {
                                            if (SerialNo == null)
                                            {
                                                resetSupplierDetailsError("Please Enter Mandatory SerialNo. in row " + (i + 1), true);
                                                //lblSerialNo.Style["display"] = "block";
                                                return;
                                            }

                                        }
                                    }
                                }
                            }
                            if (dt.Rows[i]["MfgDate(dd/MM/yyyy)"].ToString() != "" && dt.Rows[i]["ExpDate(dd/MM/yyyy)"].ToString() != "")
                            {
                                //if (Convert.ToDateTime(dt.Rows[i]["MfgDate(dd/MM/yyyy)"].ToString()) > Convert.ToDateTime(dt.Rows[i]["ExpDate(dd/MM/yyyy)"].ToString()))
                                DateTime dateTimemfg = formatedDatetime(dt.Rows[i]["MfgDate(dd/MM/yyyy)"].ToString());
                                DateTime dateTimeexp = formatedDatetime(dt.Rows[i]["ExpDate(dd/MM/yyyy)"].ToString());

                                if (dateTimemfg > dateTimeexp)
                                {
                                    resetSupplierDetailsError("Exp Date Should be greater than Mfg Date", true);
                                    //lblSerialNo.Style["display"] = "block";
                                    return;
                                }

                            }
                            if (SerialNo!=null)
                            {
                                //<!-------------------Procedure Conversion--------------->
                               // int podetailid = DB.GetSqlN("SELECT DISTINCT POD.PODetailsID as N from MMT_MaterialMaster MM JOIN ORD_PODetails POD ON POD.MaterialMasterID = MM.MaterialMasterID JOIN ORD_POHeader oh ON oh.POHeaderID = pod.POHeaderID WHERE mm.MCode = '"+ materialcode + "' AND oh.PONumber = '"+ PONumber + "' and pod.LineNumber = "+LineNumber+" and POD.IsDeleted = 0 and POD.IsActive = 1");
                                int podetailid = DB.GetSqlN("Exec [dbo].[USP_GETPODetailID] @MCode= '" + materialcode + "',@PONumber='" + PONumber + "',@LineNumber=" + LineNumber + "");
                                if (invoicedertailid != 0)
                                {
                                    //<!-------------Procedure Conversion---->
                                    //int serialnocount = DB.GetSqlN("select COUNT(SerialNo) as N from ORD_SupplierInvoiceDetails where PODetailsID=" + podetailid + " and isactive=1 and isdeleted=0 and SerialNo='" + SerialNo + "' and SupplierInvoiceDetailsID =" + invoicedertailid + "");
                                    int serialnocount = DB.GetSqlN("Exec [dbo].[USP_SerialNOCountWithInvoiceDetail]  @PODetailsID=" + podetailid + ",@SupplierInvoiceDetailsID=" + invoicedertailid + ", @SerialNo='" + SerialNo + "'");
                                    if (serialnocount > 0)
                                    {
                                        //resetSupplierDetailsError("Serial No. already Exists in  row " + (i + 1), true);
                                        //return;
                                    }
                                }
                                else if(invoicedertailid == 0)
                                {
                                    //<!---------------------Procedure Conversion------->
                                   /// int serialnocount = DB.GetSqlN("select COUNT(SerialNo) as N from ORD_SupplierInvoiceDetails where PODetailsID=" + podetailid + " and isactive=1 and isdeleted=0 and SerialNo='" + SerialNo + "' ");
                                    int serialnocount = DB.GetSqlN("Exec [dbo].[USP_SerialNOCountWithInvoiceDetail]  @PODetailsID=" + podetailid + ",@SerialNo='" + SerialNo + "'");
                                    if (serialnocount > 0)
                                    {
                                        resetSupplierDetailsError("Serial No. already Exists", true);
                                        return;
                                    }
                                }
                                int count = DB.GetSqlN("Exec sp_GET_SERIAL_COUNT @SerialNo='" + SerialNo + "',@MCode='" + materialcode + "'");
                                if (count > 0)
                                {
                                    resetSupplierDetailsError("Serial No. already Exists ", true);
                                    return;
                                }
                               
                                invoiceqty = 1;
                            }

                            if (invoicedertailid == 0)
                            {
                                upsertInvoiceDetails(invoicenumber, LineNumber, PONumber, InvoiceDate, suppliercode, country, Currency, invoicevalue, noofpackages, netweight, grossweight, materialcode, invoiceqty, unitprice, invoiceUoM, invoiceUoMqty, CreatedOn, 1, 1, 0, mfgdate, ExpDate, BatchNo, SerialNo, ProjectRefNo,MRP);
                            }
                                RFDDetails_buildGridData(RFDDetails_buildGridData());
                            Build_gvInvoice(Build_gvInvoice());

                        }
                        }
                    //<!Procedure Conversion----->
                    //string strinvoice1 = "select * from ORD_SupplierInvoiceDetails where PODetailsID IN (SELECT POD.PODetailsID  FROM ORD_PODetails POD  JOIN ORD_POHeader POH ON POH.POHeaderID=POD.POHeaderID where POD.POHeaderID=" + ViewState["HeaderID"] + "  and POD.IsDeleted=0) and IsDeleted=0";

                    string strinvoice1 = "Exec [dbo].[USP_GETSupplierInvoiceDetail] @POHeaderID=" + ViewState["HeaderID"] + "";

                    DataSet dsinvoicedetails1 = DB.GetDS(strinvoice1, false);


                        if (dsinvoicedetails1.Tables[0].Rows.Count != 0)
                        {

                            resetSupplierDetailsError("Excel file successfully imported in supplier invoice ", false);
                            string completePath1 = Server.MapPath("~/ExcelData/" + FUImport.FileName);
                            if (System.IO.File.Exists(completePath1))
                            {

                                System.IO.File.Delete(completePath1);

                            }
                            FUImport.Attributes.Clear();

                        }
                        else
                        {
                            resetSupplierDetailsError("Unable to import excel file in supplier invoice", true);

                        }


                }
            }

            //if (gvInvoicDetails.Rows.Count != 0 || GVPODetails.Rows.Count != 0)
            //    atcSupplier.Enabled = false;



            catch (Exception ex)
            {
                // ------------------ added Exception log by durga on  (20/04/2017)
                //  LogExceptionsInDB("PoDetailsInfo", (MethodBase)MethodBase.GetCurrentMethod(), (MethodInfo)MethodInfo.GetCurrentMethod(), ex, "");
                resetSupplierDetailsError(ex.Message, true);
            }
            Build_gvInvoice(Build_gvInvoice());

        }


        //resetSupplierDetailsError("Excel file successfully imported in supplier invoice ", false);
        //                    string completePath = Server.MapPath("~/ExcelData/" + FUImport.FileName);
        //                    if (System.IO.File.Exists(completePath))
        //                    {
        //                        System.IO.File.Delete(completePath);
        //                    }
        //                }
                 
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        resetError("Error while updating " + ex.Message, true);
        //    }
        //}

        protected void lnkClear_Click(object sender, EventArgs e)
        {
            atcPOType.Text = "";
            txtPODate.Text = "";
            txtTenant.Text = "";
            atcSupplier.Text = "";
            atcCurrency.Text = "";
            txtTotalValue.Text = "";
            txtDateRequested.Text = "";
            txtDateDue.Text = "";
            txtExchangeRate.Text = "";
            txtPOTax.Text = "";
            txtareaInstructions.Text = "";
            txtareaRemarks.Text= "";
        }

        public DateTime formatedDatetime(string inputdate)
        {
            DateTime inputDate;
            inputdate = inputdate.Replace('-', '/');

             inputdate = inputdate.Split(' ')[0].ToString();
            string[] str = inputdate.Split('/');            
            if (Convert.ToInt32(str[1]) > 12)
            {
                DateTime exdate = new DateTime(Convert.ToInt32(str[2]), Convert.ToInt32(str[0]), Convert.ToInt32(str[1]));
                inputDate = exdate;
            }
            else
            {
                DateTime exdate = new DateTime(Convert.ToInt32(str[2]), Convert.ToInt32(str[1]), Convert.ToInt32(str[0]));
                inputDate = exdate;
            }
            return  inputDate;
        }
    }
}