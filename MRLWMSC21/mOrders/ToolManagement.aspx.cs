using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Text;
using System.Data.SqlClient;
using MRLWMSC21Common;
using System.Data;
using System.Web.Security;
using System.Security.Principal;
using System.Globalization;

namespace MRLWMSC21.mOrders
{
    //Author    :   Gvd Prasad
    //Created On:   06-Apl-2014

    public partial class ToolManagement : System.Web.UI.Page
    {
        public CustomPrincipal cp = HttpContext.Current.User as CustomPrincipal;

        protected void page_PreInit(object sender, EventArgs e)
        {
            Page.Theme = "Orders";
        }

        protected void page_Init(object sender, EventArgs e)
        {
            AddDynamicColumns();
        }

        protected void Page_Load(object sender, EventArgs e)
        {
            DesignLogic.SetInnerPageSubHeading(this.Page, "Issue Details");

            Page.Validate();

            if (!cp.IsInAnyRoles(CommonLogic.GetRolesAllowed(CommonLogic.GetRolesAllowedForthisPage("New Issue"))))
            {
                //test case ID (TC_009)
                //Only authorized user can access issue details page

                Response.Redirect("../Login.aspx?eid=6");
            }
            if (!IsPostBack)
            {
                ViewState["HeaderID"] = 0;
                try
                {
                    //Get configure prifix value this cp
                    IDataReader ConfigReader = DB.GetRS("EXEC sp_SYS_GetSystemConfigValue @SysConfigKey=N'salesorder.aspx.cs.SONumberAutoGenerated',@TenantID=" + cp.TenantID);
                    ConfigReader.Read();
                    Boolean autogenerate = Convert.ToBoolean(ConfigReader[0]);
                    ConfigReader.Close();
                    if (!autogenerate)
                    {
                        txtTMOCode.Enabled = true;
                        IbtnNew.Visible = false;

                    }
                    else
                    {
                        txtTMOCode.Enabled = false;
                        IbtnNew.Visible = false;
                    }

                }
                catch (Exception ex)
                {
                    CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
                    txtTMOCode.Enabled = true;
                    IbtnNew.Visible = false;
                }
                if (CommonLogic.QueryString("tmoid") != "")
                {
                    //show the lineItems space And customerpo detaisl
                    
                    ViewState["HeaderID"] = CommonLogic.QueryString("tmoid");
                    tdTMOLineItems.Visible = true;
                    lnkAddNewItem.Visible = true;
                    BuildFormData();
                    lnkUpdate.Text = "Update" + CommonLogic.btnfaUpdate;

                    if (CommonLogic.QueryString("sucess") == "true")
                        resetError("Successfully Updated", false);
                }
                else
                {
                    //lbSoStatus.Visible = false;
                    //Hide the lineItems space And customerpo detaisl
                    lnkAddNewItem.Visible = false;
                    tdTMOLineItems.Visible = false;
                    lnkClose.Visible = false;
                    lnkReleaseTool.Visible = false;
                    pnlToolManagementDetails.Visible = false;
                    lnkUpdate.Text = "Create Issue"+CommonLogic.btnfaSave;
                }
                IbtnNew.Focus();
            }
        }

        private void BuildFormData()
        {
            try
            {

                String details = CommonLogic.QueryString("tmoid");

                IDataReader FormReader = DB.GetRS("EXEC dbo.sp_ORD_SOHeaderDetails @SOHeaderID=" + details);
                if (!FormReader.Read())
                {
                    //pnlgvSoDetails.Visible = false;
                    resetError("No details available", true);
                    FormReader.Close();
                    return;
                }
                lnksearch.Visible = true;
                txtSearch.Visible = true;
                hifEmployee.Value = DB.RSFieldInt(FormReader,"UserID").ToString();
                atcEmployee.Text = DB.RSField(FormReader, "UserName");

                txtTMOCode.Text = DB.RSField(FormReader, "SONumber");
                chkIsActive.Checked = DB.RSFieldBool(FormReader, "IsActive");
                chkIsDeleted.Checked = DB.RSFieldBool(FormReader,"IsDeleted");
               // txtSoDate.Text = DB.RSFieldDateTime(FormReader, "SODate").ToString("dd/MM/yyyy");
                ltTMOStatus.Text = DB.RSField(FormReader, "StatusName");
                if (DB.RSFieldInt(FormReader, "IsReceived") == 1)
                {
                    lnkClose.Visible = false;
                }
                if (DB.RSFieldInt(FormReader, "SOStatusID") != 1 && DB.RSFieldInt(FormReader, "SOStatusID") != 2)
                {
                    gvToolManagementDetails.Enabled = false;
                    lnkReleaseTool.Visible = false;
                    lnkAddNewItem.Visible = false;

                    lnkClose.Visible = false;
                    lnkUpdate.Enabled = false;
                }
                FormReader.Close();

                ViewState["GetToolManagementMaterialList"] = "EXEC  [dbo].[sp_ORD_SODetailsList] @SOHeaderID=" + ViewState["HeaderID"].ToString() + ",@MCode=''";
                Build_ToolManagementMaterials(Build_ToolManagementMaterials());

                txtTMOCode.Enabled = false;
                IbtnNew.Visible = false;
                if (gvToolManagementDetails.Rows.Count == 0)
                {
                    pnlToolManagementDetails.Visible = false;
                    lnkReleaseTool.Visible = false;
                }
                else
                {
                    atcEmployee.Enabled = false;
                    if (DB.GetSqlN("select Outbound_CustomerPOID as N from OBD_Outbound_ORD_CustomerPO where IsDeleted=0 and IsActive=1 and SOHeaderID=" + CommonLogic.QueryString("tmoid")) != 0)
                    //{
                    //    lnkReleaseTool.Visible = true;

                    //}
                    //else
                    {
                        gvToolManagementDetails.Enabled = false;
                        lnkAddNewItem.Visible = false;
                        lnkReleaseTool.Visible = false;
                    }
                }

            }
            catch (Exception ex)
            {
                CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
            }
        }

        protected void lnkClose_Click(object sender, EventArgs e)
        {
            //test case ID (TC_021)
            //cancel the order not configure in outbound

            try
            {
                IDataReader GetShipmentreceive = DB.GetRS("[sp_ORD_GetMaterialReceivedOrNot] @SOHeaderID=" + ViewState["HeaderID"].ToString());
                if (GetShipmentreceive.Read())
                {
                    resetError("Cannot cancel, as the Issue Order is configured", true);
                    GetShipmentreceive.Close();
                    return;
                }
                GetShipmentreceive.Close();

                String sCmdClosepo = "update ORD_SOHeader set SOStatusID=3 where SOHeaderID=" + ViewState["HeaderID"].ToString();

                DB.ExecuteSQL(sCmdClosepo);
            }
            catch (Exception ex)
            {
                resetError("Error while canceling", true);
                CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
            }
            Response.Redirect("ToolManagement.aspx?tmoid=" + ViewState["HeaderID"].ToString());
        }

        private void AddDynamicColumns()
        {
            IDataReader rsMSPList = null;
            TemplateField field;
            try
            {
                rsMSPList = DB.GetRS("sp_GEN_GetAllMaterialStorageParameters @ParameterUsageTypeID=1,@TenantID=" + cp.TenantID);
            }
            catch (Exception ex)
            {
                resetError("Error while loading",true);
                CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
                return;
            }
            while (rsMSPList.Read())
            {

                field = new TemplateField();
                field.HeaderStyle.Width = 150;
                field.ItemStyle.Width = 150;
                field.HeaderTemplate = new DynamicallyTemplatedGridViewHandler(ListItemType.Header, DB.RSField(rsMSPList, "DisplayName"), "Literal");

                field.ItemTemplate = new DynamicallyTemplatedGridViewHandler(ListItemType.Item, DB.RSField(rsMSPList, "ParameterName"), "Literal");
               
                field.EditItemTemplate = new DynamicallyTemplatedGridViewHandler(ListItemType.EditItem, DB.RSField(rsMSPList, "ParameterName"), DB.RSField(rsMSPList, "ControlType"), DB.RSField(rsMSPList, "ParameterDataType"), DB.RSField(rsMSPList, "DataSource"), DB.RSField(rsMSPList, "MinTolerance"), DB.RSField(rsMSPList, "MaxTolerance"));

               
                gvToolManagementDetails.Columns.Add(field);

               
            }

            rsMSPList.Close();

            field = new TemplateField();
            field.HeaderTemplate = new DynamicallyTemplatedGridViewHandler(ListItemType.Header, "Delete", "Literal");
            field.ItemTemplate = new DynamicallyTemplatedGridViewHandler(ListItemType.Item, "Delete", "CheckBox");
            field.EditItemTemplate = new DynamicallyTemplatedGridViewHandler(ListItemType.EditItem, "Delete", "Empty");
            LinkButton button = new LinkButton();
            button.ID = "deleteButton";
            button.Text = "Delete";
            button.ForeColor = System.Drawing.Color.Blue;
            button.OnClientClick = "return confirm('Are you sure want to delete?')";
            button.Click += new EventHandler(DeleteItems);
            button.Font.Underline = false;
            field.FooterTemplate = new DynamicallyTemplatedGridViewHandler(ListItemType.Footer, button);


            gvToolManagementDetails.Columns.Add(field);


            //CommandField cmdfield = new CommandField();


            //cmdfield.CausesValidation = false;
            //cmdfield.ButtonType = ButtonType.Link;
            //cmdfield.CancelText = "Cancel";
            //cmdfield.EditText = "<nobr> Edit <img src='../Images/redarrowright.gif' border='0' /></nobr>";
            //cmdfield.ShowEditButton = true;
            //cmdfield.ControlStyle.Font.Underline = false;
            //cmdfield.FooterStyle.Font.Underline = false;
            //cmdfield.UpdateImageUrl = "icons/update.gif";
            //cmdfield.UpdateText = "Update";


            //gvToolManagementDetails.Columns.Add(cmdfield);


            field = new TemplateField();
            field.ItemStyle.Width = 200;
            field.ItemTemplate = new DynamicallyTemplatedGridViewHandler(ListItemType.Item, "Command", gvToolManagementDetails_RowEditing);

            field.EditItemTemplate = new DynamicallyTemplatedGridViewHandler(ListItemType.EditItem, "Command", gvToolManagementDetails_RowUpdating, gvToolManagementDetails_RowCancelingEdit);

            gvToolManagementDetails.Columns.Add(field);
        }

        public void DeleteItems(object sender, EventArgs e)
        {
            //test case ID (TC_036)
            //Select line item to delete

            string gvchkIDs = "";
            foreach (GridViewRow gv in gvToolManagementDetails.Rows)
            {
                if (gv.RowState != DataControlRowState.Edit)
                {
                    CheckBox isDeletedchkbxItem = (CheckBox)gv.FindControl("Delete");

                    if (isDeletedchkbxItem.Checked)
                    {

                        gvchkIDs += ((Literal)gv.FindControl("ltSODetailsID")).Text.ToString() + ",";
                    }
                }
            }
            String cmdDeleteLineItems ="EXEC dbo.sp_ORD_DeleteSOItems @SODetailsIDs=" + DB.SQuote(gvchkIDs)+ ",@UpdatedBy="+cp.UserID.ToString();

            // Execute SQL Query only if checkboxes are checked to avoid any error with initial null string
            try
            {

                IDataReader rsGetShipmentreceive = DB.GetRS("[sp_ORD_GetMaterialReceivedOrNot] @SOHeaderID=" + ViewState["HeaderID"].ToString());
                if (rsGetShipmentreceive.Read())
                {
                    resetError("Cannot delete line items, as the Issue Order is configured in Outbound", true);
                    rsGetShipmentreceive.Close();
                    return;
                }
                rsGetShipmentreceive.Close();

                DB.ExecuteSQL(cmdDeleteLineItems);

                Build_ToolManagementMaterials(Build_ToolManagementMaterials());

                if (gvToolManagementDetails.Rows.Count == 0)
                {
                    pnlToolManagementDetails.Visible = false;
                    lnkReleaseTool.Visible = false;
                    lnkClose.Visible = true;
                    atcEmployee.Enabled = false;
                }

                resetError("Successfully deleted the selected items", false);
            }
            catch (Exception ex)
            {
                resetError("Error while deleting", true);
                CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
            }
        }

        protected void lnkUpdate_Click(object sender, EventArgs e)
        {

            //test case ID (TC_015)
            //Update emplyee request details

            Page.Validate("EmployeeData");
            if (!IsValid)
            {
                return;
            }
            int HeaderID = 0;

            try
            {
                IDataReader GetShipmentreceive = DB.GetRS("[sp_ORD_GetMaterialReceivedOrNot] @SOHeaderID=" + ViewState["HeaderID"].ToString());
                if (GetShipmentreceive.Read())
                {
                    resetError("Cannot update, as the issue order is used at outbound", true);
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "test", "MSPConfifure(1);", true);
                    GetShipmentreceive.Close();
                    return;
                }
                GetShipmentreceive.Close();

            }
            catch (Exception ex)
            {
                resetError("Error while Updating Details", true);
                CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
                return;
            }
           
            StringBuilder UpdateEmployeeToolHeaderInto = new StringBuilder();
            UpdateEmployeeToolHeaderInto.Append("DECLARE @UpdateSOHeaderID int EXEC dbo.sp_ORD_UpsertSOHeader ");
            UpdateEmployeeToolHeaderInto.Append("@SOHeaderID=" + ViewState["HeaderID"].ToString());
            UpdateEmployeeToolHeaderInto.Append(",@SONumber=" + DB.SQuote(txtTMOCode.Text.Trim()));
            UpdateEmployeeToolHeaderInto.Append(",@TenantID=" + cp.TenantID);
            UpdateEmployeeToolHeaderInto.Append(",@SOTypeID=" +9);
            UpdateEmployeeToolHeaderInto.Append(",@RequestedBy=" + cp.UserID);
            UpdateEmployeeToolHeaderInto.Append(",@UserID="+hifEmployee.Value);
            UpdateEmployeeToolHeaderInto.Append(",@SODate=" + DB.SQuote(DateTime.Now.ToString("MM/dd/yyyy")));
            UpdateEmployeeToolHeaderInto.Append(",@CreatedBy=" + cp.UserID);
            UpdateEmployeeToolHeaderInto.Append(",@LastModifiedBy=" + cp.UserID);
            UpdateEmployeeToolHeaderInto.Append(",@IsActive=" + Convert.ToInt16(chkIsActive.Checked));
            UpdateEmployeeToolHeaderInto.Append(",@IsDeleted=" + Convert.ToInt16(chkIsDeleted.Checked));
            UpdateEmployeeToolHeaderInto.Append(",@SOStatusID=1");
            UpdateEmployeeToolHeaderInto.Append(",@NewSOHeaderID=@UpdateSOHeaderID OUTPUT select @UpdateSOHeaderID as N");
            Boolean IsDeleted = chkIsDeleted.Checked;
            try
            {
                HeaderID = DB.GetSqlN(UpdateEmployeeToolHeaderInto.ToString());
                ViewState["HeaderID"] = HeaderID;
                tdTMOLineItems.Visible = true;
                lnkAddNewItem.Visible = true;
                pnlToolManagementDetails.Visible = false;
                lnksearch.Visible = true;
                txtSearch.Visible = true;
                //lbSoStatus.Visible = true;
                ltTMOStatus.Text = "Open";
                lnkUpdate.Text = "Update"+CommonLogic.btnfaUpdate;
                pnlToolManagementDetails.Visible = true;
                resetError("Successfully Updated", false);
                //ScriptManager.RegisterStartupScript(this, this.GetType(), "test", "fnMCodeAC();showStickyToast(false,\"Successfully Updated\");", true);
                ViewState["GetToolManagementMaterialList"] ="EXEC  [dbo].[sp_ORD_SODetailsList] @SOHeaderID=" + ViewState["HeaderID"].ToString() + ",@MCode=''";
            }
            catch (SqlException sqlex)
            {
                CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), sqlex.Source, sqlex.Message, sqlex.StackTrace);
                //if (sqlex.ErrorCode == -2146232060)
                if (sqlex.Message.StartsWith("Violation of UNIQUE KEY constraint 'UK_ORD_SONumber'"))
                {
                    //test case ID (TC_014)
                    //same number is updated by another use

                    resetError("Error Duplicate Issue Number generated,regenerate Issue Number and Update", true);
                    return;
                }
                resetError("Error while updating", true);
            }
            catch (Exception ex)
            {
                resetError("Error while updating", true);
                CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
            }
            if (HeaderID != 0)
            {
                Response.Redirect("ToolManagement?tmoid=" + HeaderID + "&sucess=true");
            }
        }

        //protected void gvToolManagementDetails_RowUpdating(object sender, GridViewUpdateEventArgs e)
        protected void gvToolManagementDetails_RowUpdating(object sender, EventArgs e)
        {

            //test case ID (TC_0320)
            //Update Modified Line item details

            int RowIndex = ((GridViewRow)((Button)sender).Parent.Parent).RowIndex;
            Page.Validate("UpdateSODetails");
            GridViewRow gvRow = gvToolManagementDetails.Rows[RowIndex];
            TextBox atcMCode = (TextBox)gvRow.FindControl("atcEditMCode");
            if (!IsValid)
            {
                atcMCode.Focus();
                return;
            }
            
            if (gvRow != null)
            {
                StringBuilder sCmdUpdate = new StringBuilder();
                String Temperarevarialble = "";
                Literal ltDetailsID = (Literal)gvRow.FindControl("ltSODetailsIDEdit");
                Literal ltLineNumber = (Literal)gvRow.FindControl("ltlinenumberEdit");

                //TextBox atcMCode = (TextBox)gvRow.FindControl("atcEditMCode");
                HiddenField hifmmid = (HiddenField)gvRow.FindControl("hifmmid");

                TextBox atcTMUoMID = (TextBox)gvRow.FindControl("atcTMUoMID");
                HiddenField hifTMUoMid = (HiddenField)gvRow.FindControl("hifTMUoMid");
                HiddenField hifKitPlanner = (HiddenField)gvRow.FindControl("hifKitPlanner");
                TextBox atcKitplanner = (TextBox)gvRow.FindControl("atcKitPlanner");
                TextBox txtQuantity = (TextBox)gvRow.FindControl("txtQuantity");
               
                try
                {
                    IDataReader GetShipmentreceive = DB.GetRS("[sp_ORD_GetMaterialReceivedOrNot] @SOHeaderID=" + ViewState["HeaderID"].ToString());
                    if (GetShipmentreceive.Read())
                    {
                        resetError("Cannot edit, as the Sales Order is used at Outbound", true);
                        atcMCode.Focus();
                        GetShipmentreceive.Close();
                        return;
                    }
                    GetShipmentreceive.Close();

                }
                catch (Exception ex)
                {
                    resetError("Error while updating", true);
                    atcMCode.Focus();
                    CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
                    return;
                }

                sCmdUpdate.Append("EXEC dbo.sp_ORD_UpsertSODetails ");

                sCmdUpdate.Append("@SOHeaderID=" + ViewState["HeaderID"].ToString());
                sCmdUpdate.Append(",@SODetailsID=" + ltDetailsID.Text);
                sCmdUpdate.Append(",@LineNumber=" + ltLineNumber.Text);

                if (atcMCode.Text == "" || Request.Form[hifmmid.UniqueID] == "")
                {
                    resetError("please select MCode", true);
                    atcMCode.Focus();
                    return;
                }
                if (Convert.ToDecimal(txtQuantity.Text) == 0)
                {
                    resetError("Zero quantity not update",true);
                    atcMCode.Focus();
                    return;
                }
                sCmdUpdate.Append(",@MaterialMasterID=" + Request.Form[hifmmid.UniqueID]);
                if (atcTMUoMID.Text == "" || hifTMUoMid.Value == "")
                {
                    resetError("please select SUoM", true);
                    atcMCode.Focus();
                    return;
                }
                //sCmdUpdate.Append(",@SUoMID=" + Request.Form[hifSUoMID.UniqueID]);
                // String Qty = atcSUoM.Text.Split('/')[1];
                sCmdUpdate.Append(",@MaterialMaster_SUoMID=" + hifTMUoMid.Value);
                Temperarevarialble = atcKitplanner.Text.Trim() != "" && hifKitPlanner.Value != "" ? hifKitPlanner.Value : "NULL";
                sCmdUpdate.Append(",@KitPlannerID=" + Temperarevarialble);
                Temperarevarialble = txtQuantity.Text.Trim() != "" ? txtQuantity.Text.Trim() : "NULL";
                sCmdUpdate.Append(",@SOQuantity=" + Temperarevarialble);
                sCmdUpdate.Append(",@CreatedBy=" +cp.UserID);


                String command = "";
                String ids = "";
                String values = "";
                String MSPID = "";
                String mspsql = "EXEC [sp_ORD_GetMaterialStorageParameters]  @MaterialMasterID=" + Request.Form[hifmmid.UniqueID] + ",@TenantID=" + cp.TenantID;

                IDataReader rsMCodeMSP=null;
                try
                {
                    rsMCodeMSP = DB.GetRS(mspsql);
                }
                catch (Exception ex)
                {
                    resetError("Error while Updating",true);
                    CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
                    return;
                }

                //get Msp Data 
                while (rsMCodeMSP.Read())
                {
                    command = DB.RSField(rsMCodeMSP, "ControlType");
                    if (command == "DropDownList")
                    {
                        MSPID = "ddl" + DB.RSField(rsMCodeMSP, "ParameterName");
                        String value = ((DropDownList)gvRow.FindControl(MSPID)).SelectedValue;
                        if (value != "")
                        {
                            ids += DB.RSFieldInt(rsMCodeMSP, "MaterialStorageParameterID") + ",";
                            values += value + ",";
                        }
                    }

                    else if (command == "TextBox")
                    {

                        MSPID = "txt" + DB.RSField(rsMCodeMSP, "ParameterName");
                        String value = ((TextBox)gvRow.FindControl(MSPID)).Text;
                        if (value != "")
                        {
                            ids += DB.RSFieldInt(rsMCodeMSP, "MaterialStorageParameterID") + ",";
                            values += value + ",";
                        }
                    }

                }
                rsMCodeMSP.Close();

                sCmdUpdate.Append(",@StoreParameterIDS=" + DB.SQuote(ids));
                sCmdUpdate.Append(",@StoreParameterValues=" + DB.SQuote(values));

                try
                {
                    DB.ExecuteSQL(sCmdUpdate.ToString());
                    gvToolManagementDetails.EditIndex = -1;
                    Build_ToolManagementMaterials(Build_ToolManagementMaterials());
                    //lnkClose.Visible = true;
                    atcEmployee.Enabled = false;
                    lnkReleaseTool.Visible = true;
                    resetError("Successfully Updated", false);
                }
                catch (Exception ex)
                {
                    resetError("Error while updating", true);
                    CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
                }

            }
        }

        //protected void gvToolManagementDetails_RowEditing(object sender, GridViewEditEventArgs e)
        protected void gvToolManagementDetails_RowEditing(object sender, EventArgs e)
        {

            //test case ID (TC_034)
            //Modify the line item
            int RowIndex = ((GridViewRow)((LinkButton)sender).Parent.Parent).RowIndex;
            gvToolManagementDetails.EditIndex = RowIndex;
           
            Build_ToolManagementMaterials(Build_ToolManagementMaterials());
            if (RowIndex < gvToolManagementDetails.Rows.Count)
                ((TextBox)gvToolManagementDetails.Rows[RowIndex].FindControl("atcEditMCode")).Focus();
            
        }

        //protected void gvToolManagementDetails_RowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
        protected void gvToolManagementDetails_RowCancelingEdit(object sender, EventArgs e)
        {
            //test case ID (TC_033)
            //cancel modifications in the line item

            gvToolManagementDetails.EditIndex = -1;
            try
            {
                Build_ToolManagementMaterials(Build_ToolManagementMaterials());
                if (gvToolManagementDetails.Rows.Count == 0)
                {
                    pnlToolManagementDetails.Visible = false;
                }
            }
            catch (Exception ex)
            {
                resetError("Error while build item list",true);
                CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
            }

        }

        private DataSet Build_ToolManagementMaterials()
        {
            DataSet dsGetToolManagementMaterialList = null;
            String cMdGetToolManagementMaterilList = ViewState["GetToolManagementMaterialList"].ToString();
            try
            {
                dsGetToolManagementMaterialList = DB.GetDS(cMdGetToolManagementMaterilList, false);
            }
            catch (Exception ex)
            {
                resetError("Error while loading",true);
                CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
            }
            return dsGetToolManagementMaterialList;
        }

        private void Build_ToolManagementMaterials(DataSet dsGetToolManagementMaterialList)
        {
            gvToolManagementDetails.DataSource = dsGetToolManagementMaterialList;
            gvToolManagementDetails.DataBind();
            dsGetToolManagementMaterialList.Dispose();
        }

        protected void lnkAddNewItem_Click(object sender, EventArgs e)
        {
           
            try
            {
                IDataReader GetShipmentreceive = DB.GetRS("[sp_ORD_GetMaterialReceivedOrNot] @SOHeaderID=" + ViewState["HeaderID"].ToString());
                if (GetShipmentreceive.Read())
                {
                    resetError("Cannot add new item, as the Issue Order is configured in Outbound", true);
                    GetShipmentreceive.Close();
                    return;
                }
                GetShipmentreceive.Close();

                DataSet dsToolManagementMaterialList = Build_ToolManagementMaterials();
                DataRow drToolManagementMaterialList = dsToolManagementMaterialList.Tables[0].NewRow();
                int lastRowindex = DB.GetSqlN("select max(LineNumber) as N from ORD_SODetails where IsDeleted=0 AND SOHeaderID=" + ViewState["HeaderID"].ToString());
                drToolManagementMaterialList["SODetailsID"] = 0;
                drToolManagementMaterialList["LineNumber"] = ++lastRowindex;
                drToolManagementMaterialList["MCode"] = "";
                dsToolManagementMaterialList.Tables[0].Rows.InsertAt(drToolManagementMaterialList, 0);
                gvToolManagementDetails.EditIndex = 0;
                gvToolManagementDetails.PageIndex = 0;
                Build_ToolManagementMaterials(dsToolManagementMaterialList);
                ((TextBox)gvToolManagementDetails.Rows[0].FindControl("atcEditMCode")).Focus();
                pnlToolManagementDetails.Visible = true;
                //resetError("Enter new item details ", false);
            }
            catch (Exception ex)
            {
                resetError("Error try again", false);
                CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
            }
            //gvToolManagementDetails.Rows[0].FindControl("atcEditMCode").Focus();
        }

        protected void IbtnNew_Click(object sender, ImageClickEventArgs e)
        {

            //test case ID (TC_010)
            //generate new issue number
            //Issue Number is default prefix+Year+ fixed lenght serialNo like  PO1300001

            try
            {
                String NewTMONumber = DB.GetSqlS("select SysConfigValue as S from SYS_SystemConfiguration where TenantID=" + cp.TenantID + " and SysConfigKeyID= (select SysConfigKeyID from SYS_SysConfigKey where SysConfigKey=N'toolmanagementorder.aspx.cs_TMO_Prefix') ");
                NewTMONumber += "" + (Convert.ToInt16(DateTime.Now.Year) % 100);           //add year code to ponumber

                int length = Convert.ToInt32(DB.GetSqlS("select SysConfigValue as S from SYS_SystemConfiguration as N where TenantID=" + cp.TenantID + " and SysConfigKeyID= (select SysConfigKeyID from SYS_SysConfigKey where SysConfigKey=N'toolmanagementorder.aspx.cs_TMO_lenght') "));

                //String OldPONumber = DB.GetSqlS("select TOP 1 SONumber as S from ORD_SOHeader where SOTypeID=9 and TenantID=" + cp.TenantID + "  ORDER BY SONumber desc ");
                String OldPONumber = DB.GetSqlS("select TOP 1 SONumber as S from ORD_SOHeader where SONumber like '"+NewTMONumber+"%' and TenantID=" + cp.TenantID + "  ORDER BY SONumber desc ");
                
                int power = (Int32)Math.Pow((double)10, (double)(length - 1));          //getting minvalue of prifix length

                String newvalue = "";
                if (OldPONumber != "" && NewTMONumber.Equals(OldPONumber.Substring(0, NewTMONumber.Length)))        //if ponumber is existed and same year ponumber  enter
                {
                    String temp = OldPONumber.Substring(NewTMONumber.Length, length);                            //getting number of last prifix
                    Int32 number = Convert.ToInt32(temp);
                    number++;


                    while (power > 1)                                                                           //add '0' to number at left side for get 
                    {
                        if (number / power > 0)
                        {
                            break;
                        }
                        newvalue += "0";
                        power /= 10;
                    }
                    newvalue += number;
                }
                else
                {                                                                                           //other wise generate first number 
                    for (int i = 0; i < length - 1; i++)
                        newvalue += "0";
                    newvalue += "1";
                }

                NewTMONumber += newvalue;
                txtTMOCode.Text = NewTMONumber;
            }
            catch (Exception ex)
            {
                resetError("Error while generating Issue Number", true);
                CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
            }
            atcEmployee.Focus();
        }

        protected void resetError(string error, bool isError)
        {

            /*string str = "<font class=\"noticeMsg\">NOTICE:</font>&nbsp;&nbsp;&nbsp;";
            if (isError)
                str = "<font class=\"errorMsg\">ERROR:</font>&nbsp;&nbsp;&nbsp;";

            if (error.Length > 0)
                str += error + "";
            else
                str = "";


            lblStatus.Text = str;*/
            ScriptManager.RegisterStartupScript(this, this.GetType(), "test", "showStickyToast(" + (isError.ToString().ToLower() == "true" ? "false" : "true") + ",\"" + error + "\");", true);

        }

        protected void gvToolManagementDetails_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            if (e.Row.RowType == DataControlRowType.DataRow && !(e.Row.RowState == DataControlRowState.Edit))
            {
                DataRow row = ((DataRowView)e.Row.DataItem).Row;
                Boolean Check = Convert.ToBoolean(row["IsKitParent"]);
                String IsInOutbount = row["IsInOutbound"].ToString();

                if (Check == false || IsInOutbount == "0")
                {
                    int columnCount = e.Row.Controls.Count;
                    try
                    {
                        e.Row.FindControl("Delete").Visible = false;
                    }
                    catch (Exception ex)
                    {
                        CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
                    }
                    e.Row.Controls[columnCount - 1].Controls[0].Visible = false;
                }
            }
        }

        protected void gvToolManagementDetails_PageIndexChanging(object sender, GridViewPageEventArgs e)
        {
            gvToolManagementDetails.PageIndex = e.NewPageIndex;
            Build_ToolManagementMaterials(Build_ToolManagementMaterials());
        }

        protected void lnkReleaseTool_Click(object sender, EventArgs e)
        {
            //test case ID (TC_038)
            //autometic create outbound when no outbound is configure to this


            String OBDNumber = GetOBDNumber();
            if (OBDNumber == "")
            {
                resetError("Error while generating OBDNumber",true);
                return;
            }
            String cMdCreateOutboundForToolManagement = "DECLARE @Result int EXEC [dbo].[sp_ORD_DummyOutbooundForTools] @UserID="+hifEmployee.Value+",@SOHeaderID="+ViewState["HeaderID"]+",@OBDNumber="+DB.SQuote(OBDNumber)+",@CreatedBy="+cp.UserID+",@Tenant="+cp.TenantID+",@NewOutboundID=@Result output select @Result as N";
            try
            {
                int OutboundID = DB.GetSqlN(cMdCreateOutboundForToolManagement.ToString());
                resetError("Successfully created outbound with OBDNumber: " + OBDNumber, false);
                lnkReleaseTool.Visible = false;
                gvToolManagementDetails.Enabled = false;
                lnkAddNewItem.Visible = false;
                Build_ToolManagementMaterials(Build_ToolManagementMaterials());
            }
            catch (Exception ex)
            {
                resetError("Error while creating new outbound",true);
                CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
            }
        }

        private String GetOBDNumber()
        {
            String OBDNumber = "";
            try
            {

                int length = Convert.ToInt32(DB.GetSqlS("EXEC [sp_SYS_GetSystemConfigValue]   @SysConfigKey='OutboundDetails.aspx' ,@TenantID=" + cp.TenantID));
                
                String NewOBDNumber = DB.GetSqlS("EXEC [sp_SYS_GetSystemConfigValue]   @SysConfigKey='dummyoutboundfortoolmanagement' ,@TenantID=" + cp.TenantID) + (Convert.ToInt16(DateTime.Now.Year) % 100);           //add year code to ponumber

                String OldOBDNumber = DB.GetSqlS("select top 1 OBDNumber as S from OBD_Outbound where OBDNumber like '"+NewOBDNumber+"%' order by OBDNumber desc");

                int power = (Int32)Math.Pow((double)10, (double)(length - 1));          //getting minvalue of prifix length

                String newvalue = "";
                if (OldOBDNumber != "" && NewOBDNumber.Equals(OldOBDNumber.Substring(0, NewOBDNumber.Length)))        //if ponumber is existed and same year ponumber  enter
                {
                    String temp = OldOBDNumber.Substring(NewOBDNumber.Length, length);                            //getting number of last prifix
                    Int32 number = Convert.ToInt32(temp);
                    number++;


                    while (power > 1)                                                                           //add '0' to number at left side for get 
                    {
                        if (number / power > 0)
                        {
                            break;
                        }
                        newvalue += "0";
                        power /= 10;
                    }
                    newvalue += number;
                }
                else
                {                                                                                           //other wise generate first number 
                    for (int i = 0; i < length - 1; i++)
                        newvalue += "0";
                    newvalue += "1";
                }

                NewOBDNumber += newvalue;
                OBDNumber = NewOBDNumber;
            }
            catch (Exception ex)
            {
                CommonLogic.createErrorNode(cp.UserID + " / " + cp.FirstName, this.Page.ToString(), ex.Source, ex.Message, ex.StackTrace);
            }
            return OBDNumber;
        }

        protected void lnksearch_Click(object sender, EventArgs e)
        {
            //test case ID (TC_039)
            //Searches for the item with the provided part no.


            String text = txtSearch.Text.Trim();
            if (text == "Search Item...")
                text = "";


            ViewState["GetToolManagementMaterialList"] = "Exec [dbo].[sp_ORD_SODetailsList] @SOHeaderID=" + ViewState["HeaderID"].ToString() + ",@MCode='" + text + "'";
            Build_ToolManagementMaterials(Build_ToolManagementMaterials());

            if (gvToolManagementDetails.Rows.Count == 0)
            {
                pnlToolManagementDetails.Visible = false;
            }
            else
            {
                pnlToolManagementDetails.Visible = true;
            }
        }
    }
}