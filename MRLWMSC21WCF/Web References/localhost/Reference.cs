//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace MRLWMSC21WCF.localhost {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="FalconMFGWebServiceSoap", Namespace="http://tempuri.org/")]
    public partial class FalconMFGWebService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback HelloWorldOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckUserLoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProductionOrderListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOperatorActivityResulsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOperationActivitiesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetActivityLevelComponentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserRoleIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpsertGoodsMovementDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsPassOrFailCapturedOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpsertRoutingDetailsActivityCaptureOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpsertRoutingDetailsActivityPassorFailOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMaterialReceivedListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMaterialConsumedListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetJobCardDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWorkCenterWiseFinishedProductListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWorkCenterWiseRejectedMatListForReworkOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRawMaterialAssignedQtyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWorkCenterFinishedGoodsINListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetScrapCodeListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOperationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUnconfirmedProductsListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWorkCenterProducedQtyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWorkCentreFinishedQtyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWorkCenterWiseHeaderDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLastSerialNumberForMaterialOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWorkCenterWiseProducedQtyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSerialNumbersForWorkCenterOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdatePositiveRecallOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPositiveRecallDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetQCParametersOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSampleCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDropDownDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback TestDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetIORefNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetIOBOMDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpsertToolCaptureOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadFileOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public FalconMFGWebService() {
            this.Url = global::MRLWMSC21WCF.Properties.Settings.Default.FalconWCF_localhost_FalconMFGWebService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event HelloWorldCompletedEventHandler HelloWorldCompleted;
        
        /// <remarks/>
        public event CheckUserLoginCompletedEventHandler CheckUserLoginCompleted;
        
        /// <remarks/>
        public event GetProductionOrderListCompletedEventHandler GetProductionOrderListCompleted;
        
        /// <remarks/>
        public event GetOperatorActivityResulsCompletedEventHandler GetOperatorActivityResulsCompleted;
        
        /// <remarks/>
        public event GetOperationActivitiesCompletedEventHandler GetOperationActivitiesCompleted;
        
        /// <remarks/>
        public event GetActivityLevelComponentsCompletedEventHandler GetActivityLevelComponentsCompleted;
        
        /// <remarks/>
        public event GetUserRoleIDCompletedEventHandler GetUserRoleIDCompleted;
        
        /// <remarks/>
        public event UpsertGoodsMovementDetailsCompletedEventHandler UpsertGoodsMovementDetailsCompleted;
        
        /// <remarks/>
        public event IsPassOrFailCapturedCompletedEventHandler IsPassOrFailCapturedCompleted;
        
        /// <remarks/>
        public event UpsertRoutingDetailsActivityCaptureCompletedEventHandler UpsertRoutingDetailsActivityCaptureCompleted;
        
        /// <remarks/>
        public event UpsertRoutingDetailsActivityPassorFailCompletedEventHandler UpsertRoutingDetailsActivityPassorFailCompleted;
        
        /// <remarks/>
        public event GetMaterialReceivedListCompletedEventHandler GetMaterialReceivedListCompleted;
        
        /// <remarks/>
        public event GetMaterialConsumedListCompletedEventHandler GetMaterialConsumedListCompleted;
        
        /// <remarks/>
        public event GetJobCardDataCompletedEventHandler GetJobCardDataCompleted;
        
        /// <remarks/>
        public event GetWorkCenterWiseFinishedProductListCompletedEventHandler GetWorkCenterWiseFinishedProductListCompleted;
        
        /// <remarks/>
        public event GetWorkCenterWiseRejectedMatListForReworkCompletedEventHandler GetWorkCenterWiseRejectedMatListForReworkCompleted;
        
        /// <remarks/>
        public event GetRawMaterialAssignedQtyCompletedEventHandler GetRawMaterialAssignedQtyCompleted;
        
        /// <remarks/>
        public event GetWorkCenterFinishedGoodsINListCompletedEventHandler GetWorkCenterFinishedGoodsINListCompleted;
        
        /// <remarks/>
        public event GetScrapCodeListCompletedEventHandler GetScrapCodeListCompleted;
        
        /// <remarks/>
        public event GetOperationsCompletedEventHandler GetOperationsCompleted;
        
        /// <remarks/>
        public event GetUnconfirmedProductsListCompletedEventHandler GetUnconfirmedProductsListCompleted;
        
        /// <remarks/>
        public event GetWorkCenterProducedQtyCompletedEventHandler GetWorkCenterProducedQtyCompleted;
        
        /// <remarks/>
        public event GetWorkCentreFinishedQtyCompletedEventHandler GetWorkCentreFinishedQtyCompleted;
        
        /// <remarks/>
        public event GetWorkCenterWiseHeaderDataCompletedEventHandler GetWorkCenterWiseHeaderDataCompleted;
        
        /// <remarks/>
        public event GetLastSerialNumberForMaterialCompletedEventHandler GetLastSerialNumberForMaterialCompleted;
        
        /// <remarks/>
        public event GetWorkCenterWiseProducedQtyCompletedEventHandler GetWorkCenterWiseProducedQtyCompleted;
        
        /// <remarks/>
        public event GetSerialNumbersForWorkCenterCompletedEventHandler GetSerialNumbersForWorkCenterCompleted;
        
        /// <remarks/>
        public event UpdatePositiveRecallCompletedEventHandler UpdatePositiveRecallCompleted;
        
        /// <remarks/>
        public event GetPositiveRecallDetailsCompletedEventHandler GetPositiveRecallDetailsCompleted;
        
        /// <remarks/>
        public event GetQCParametersCompletedEventHandler GetQCParametersCompleted;
        
        /// <remarks/>
        public event getSampleCodeCompletedEventHandler getSampleCodeCompleted;
        
        /// <remarks/>
        public event GetDropDownDataCompletedEventHandler GetDropDownDataCompleted;
        
        /// <remarks/>
        public event TestDataCompletedEventHandler TestDataCompleted;
        
        /// <remarks/>
        public event GetIORefNumberCompletedEventHandler GetIORefNumberCompleted;
        
        /// <remarks/>
        public event GetIOBOMDetailsCompletedEventHandler GetIOBOMDetailsCompleted;
        
        /// <remarks/>
        public event UpsertToolCaptureCompletedEventHandler UpsertToolCaptureCompleted;
        
        /// <remarks/>
        public event UploadFileCompletedEventHandler UploadFileCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/HelloWorld", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string HelloWorld() {
            object[] results = this.Invoke("HelloWorld", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void HelloWorldAsync() {
            this.HelloWorldAsync(null);
        }
        
        /// <remarks/>
        public void HelloWorldAsync(object userState) {
            if ((this.HelloWorldOperationCompleted == null)) {
                this.HelloWorldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHelloWorldOperationCompleted);
            }
            this.InvokeAsync("HelloWorld", new object[0], this.HelloWorldOperationCompleted, userState);
        }
        
        private void OnHelloWorldOperationCompleted(object arg) {
            if ((this.HelloWorldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HelloWorldCompleted(this, new HelloWorldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckUserLogin", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public KeyValueStruct[] CheckUserLogin(string UserID, string Password) {
            object[] results = this.Invoke("CheckUserLogin", new object[] {
                        UserID,
                        Password});
            return ((KeyValueStruct[])(results[0]));
        }
        
        /// <remarks/>
        public void CheckUserLoginAsync(string UserID, string Password) {
            this.CheckUserLoginAsync(UserID, Password, null);
        }
        
        /// <remarks/>
        public void CheckUserLoginAsync(string UserID, string Password, object userState) {
            if ((this.CheckUserLoginOperationCompleted == null)) {
                this.CheckUserLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckUserLoginOperationCompleted);
            }
            this.InvokeAsync("CheckUserLogin", new object[] {
                        UserID,
                        Password}, this.CheckUserLoginOperationCompleted, userState);
        }
        
        private void OnCheckUserLoginOperationCompleted(object arg) {
            if ((this.CheckUserLoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckUserLoginCompleted(this, new CheckUserLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProductionOrderList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetProductionOrderList(int WorkCenterID) {
            object[] results = this.Invoke("GetProductionOrderList", new object[] {
                        WorkCenterID});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetProductionOrderListAsync(int WorkCenterID) {
            this.GetProductionOrderListAsync(WorkCenterID, null);
        }
        
        /// <remarks/>
        public void GetProductionOrderListAsync(int WorkCenterID, object userState) {
            if ((this.GetProductionOrderListOperationCompleted == null)) {
                this.GetProductionOrderListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProductionOrderListOperationCompleted);
            }
            this.InvokeAsync("GetProductionOrderList", new object[] {
                        WorkCenterID}, this.GetProductionOrderListOperationCompleted, userState);
        }
        
        private void OnGetProductionOrderListOperationCompleted(object arg) {
            if ((this.GetProductionOrderListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProductionOrderListCompleted(this, new GetProductionOrderListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetOperatorActivityResuls", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetOperatorActivityResuls(int vRoutingDetailsActivityID) {
            object[] results = this.Invoke("GetOperatorActivityResuls", new object[] {
                        vRoutingDetailsActivityID});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetOperatorActivityResulsAsync(int vRoutingDetailsActivityID) {
            this.GetOperatorActivityResulsAsync(vRoutingDetailsActivityID, null);
        }
        
        /// <remarks/>
        public void GetOperatorActivityResulsAsync(int vRoutingDetailsActivityID, object userState) {
            if ((this.GetOperatorActivityResulsOperationCompleted == null)) {
                this.GetOperatorActivityResulsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOperatorActivityResulsOperationCompleted);
            }
            this.InvokeAsync("GetOperatorActivityResuls", new object[] {
                        vRoutingDetailsActivityID}, this.GetOperatorActivityResulsOperationCompleted, userState);
        }
        
        private void OnGetOperatorActivityResulsOperationCompleted(object arg) {
            if ((this.GetOperatorActivityResulsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOperatorActivityResulsCompleted(this, new GetOperatorActivityResulsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetOperationActivities", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetOperationActivities(int UserID, string OperationNumber, int ProductionOrderHeaderID) {
            object[] results = this.Invoke("GetOperationActivities", new object[] {
                        UserID,
                        OperationNumber,
                        ProductionOrderHeaderID});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetOperationActivitiesAsync(int UserID, string OperationNumber, int ProductionOrderHeaderID) {
            this.GetOperationActivitiesAsync(UserID, OperationNumber, ProductionOrderHeaderID, null);
        }
        
        /// <remarks/>
        public void GetOperationActivitiesAsync(int UserID, string OperationNumber, int ProductionOrderHeaderID, object userState) {
            if ((this.GetOperationActivitiesOperationCompleted == null)) {
                this.GetOperationActivitiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOperationActivitiesOperationCompleted);
            }
            this.InvokeAsync("GetOperationActivities", new object[] {
                        UserID,
                        OperationNumber,
                        ProductionOrderHeaderID}, this.GetOperationActivitiesOperationCompleted, userState);
        }
        
        private void OnGetOperationActivitiesOperationCompleted(object arg) {
            if ((this.GetOperationActivitiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOperationActivitiesCompleted(this, new GetOperationActivitiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetActivityLevelComponents", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetActivityLevelComponents(int RoutingDetailsActivityID, int ProductionOrderHeaderID) {
            object[] results = this.Invoke("GetActivityLevelComponents", new object[] {
                        RoutingDetailsActivityID,
                        ProductionOrderHeaderID});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetActivityLevelComponentsAsync(int RoutingDetailsActivityID, int ProductionOrderHeaderID) {
            this.GetActivityLevelComponentsAsync(RoutingDetailsActivityID, ProductionOrderHeaderID, null);
        }
        
        /// <remarks/>
        public void GetActivityLevelComponentsAsync(int RoutingDetailsActivityID, int ProductionOrderHeaderID, object userState) {
            if ((this.GetActivityLevelComponentsOperationCompleted == null)) {
                this.GetActivityLevelComponentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetActivityLevelComponentsOperationCompleted);
            }
            this.InvokeAsync("GetActivityLevelComponents", new object[] {
                        RoutingDetailsActivityID,
                        ProductionOrderHeaderID}, this.GetActivityLevelComponentsOperationCompleted, userState);
        }
        
        private void OnGetActivityLevelComponentsOperationCompleted(object arg) {
            if ((this.GetActivityLevelComponentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetActivityLevelComponentsCompleted(this, new GetActivityLevelComponentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserRoleID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetUserRoleID(string empcode) {
            object[] results = this.Invoke("GetUserRoleID", new object[] {
                        empcode});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserRoleIDAsync(string empcode) {
            this.GetUserRoleIDAsync(empcode, null);
        }
        
        /// <remarks/>
        public void GetUserRoleIDAsync(string empcode, object userState) {
            if ((this.GetUserRoleIDOperationCompleted == null)) {
                this.GetUserRoleIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserRoleIDOperationCompleted);
            }
            this.InvokeAsync("GetUserRoleID", new object[] {
                        empcode}, this.GetUserRoleIDOperationCompleted, userState);
        }
        
        private void OnGetUserRoleIDOperationCompleted(object arg) {
            if ((this.GetUserRoleIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserRoleIDCompleted(this, new GetUserRoleIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpsertGoodsMovementDetails", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpsertGoodsMovementDetails(string EmployeeCode, string ProductionOrderHeaderID, string RoutingDetailsActivityCaptureID, string MCode, decimal Qty, string WorkCenterID, int GoodsMovementTypeID, int IsDamaged, int IsLocallyProduced, string Remarks, string ScrapCode, string reworkroutingID, string SerialNumber, string BatchNumber) {
            object[] results = this.Invoke("UpsertGoodsMovementDetails", new object[] {
                        EmployeeCode,
                        ProductionOrderHeaderID,
                        RoutingDetailsActivityCaptureID,
                        MCode,
                        Qty,
                        WorkCenterID,
                        GoodsMovementTypeID,
                        IsDamaged,
                        IsLocallyProduced,
                        Remarks,
                        ScrapCode,
                        reworkroutingID,
                        SerialNumber,
                        BatchNumber});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpsertGoodsMovementDetailsAsync(string EmployeeCode, string ProductionOrderHeaderID, string RoutingDetailsActivityCaptureID, string MCode, decimal Qty, string WorkCenterID, int GoodsMovementTypeID, int IsDamaged, int IsLocallyProduced, string Remarks, string ScrapCode, string reworkroutingID, string SerialNumber, string BatchNumber) {
            this.UpsertGoodsMovementDetailsAsync(EmployeeCode, ProductionOrderHeaderID, RoutingDetailsActivityCaptureID, MCode, Qty, WorkCenterID, GoodsMovementTypeID, IsDamaged, IsLocallyProduced, Remarks, ScrapCode, reworkroutingID, SerialNumber, BatchNumber, null);
        }
        
        /// <remarks/>
        public void UpsertGoodsMovementDetailsAsync(string EmployeeCode, string ProductionOrderHeaderID, string RoutingDetailsActivityCaptureID, string MCode, decimal Qty, string WorkCenterID, int GoodsMovementTypeID, int IsDamaged, int IsLocallyProduced, string Remarks, string ScrapCode, string reworkroutingID, string SerialNumber, string BatchNumber, object userState) {
            if ((this.UpsertGoodsMovementDetailsOperationCompleted == null)) {
                this.UpsertGoodsMovementDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpsertGoodsMovementDetailsOperationCompleted);
            }
            this.InvokeAsync("UpsertGoodsMovementDetails", new object[] {
                        EmployeeCode,
                        ProductionOrderHeaderID,
                        RoutingDetailsActivityCaptureID,
                        MCode,
                        Qty,
                        WorkCenterID,
                        GoodsMovementTypeID,
                        IsDamaged,
                        IsLocallyProduced,
                        Remarks,
                        ScrapCode,
                        reworkroutingID,
                        SerialNumber,
                        BatchNumber}, this.UpsertGoodsMovementDetailsOperationCompleted, userState);
        }
        
        private void OnUpsertGoodsMovementDetailsOperationCompleted(object arg) {
            if ((this.UpsertGoodsMovementDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpsertGoodsMovementDetailsCompleted(this, new UpsertGoodsMovementDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IsPassOrFailCaptured", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int IsPassOrFailCaptured(int vRouteID, string EmpCode, string vProductionOrderID) {
            object[] results = this.Invoke("IsPassOrFailCaptured", new object[] {
                        vRouteID,
                        EmpCode,
                        vProductionOrderID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void IsPassOrFailCapturedAsync(int vRouteID, string EmpCode, string vProductionOrderID) {
            this.IsPassOrFailCapturedAsync(vRouteID, EmpCode, vProductionOrderID, null);
        }
        
        /// <remarks/>
        public void IsPassOrFailCapturedAsync(int vRouteID, string EmpCode, string vProductionOrderID, object userState) {
            if ((this.IsPassOrFailCapturedOperationCompleted == null)) {
                this.IsPassOrFailCapturedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsPassOrFailCapturedOperationCompleted);
            }
            this.InvokeAsync("IsPassOrFailCaptured", new object[] {
                        vRouteID,
                        EmpCode,
                        vProductionOrderID}, this.IsPassOrFailCapturedOperationCompleted, userState);
        }
        
        private void OnIsPassOrFailCapturedOperationCompleted(object arg) {
            if ((this.IsPassOrFailCapturedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsPassOrFailCapturedCompleted(this, new IsPassOrFailCapturedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpsertRoutingDetailsActivityCapture", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpsertRoutingDetailsActivityCapture(int RoutingdetailsActivityID, string ProductionOrderHeaderID, string UserCode, int StartTime, string Remarks) {
            object[] results = this.Invoke("UpsertRoutingDetailsActivityCapture", new object[] {
                        RoutingdetailsActivityID,
                        ProductionOrderHeaderID,
                        UserCode,
                        StartTime,
                        Remarks});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpsertRoutingDetailsActivityCaptureAsync(int RoutingdetailsActivityID, string ProductionOrderHeaderID, string UserCode, int StartTime, string Remarks) {
            this.UpsertRoutingDetailsActivityCaptureAsync(RoutingdetailsActivityID, ProductionOrderHeaderID, UserCode, StartTime, Remarks, null);
        }
        
        /// <remarks/>
        public void UpsertRoutingDetailsActivityCaptureAsync(int RoutingdetailsActivityID, string ProductionOrderHeaderID, string UserCode, int StartTime, string Remarks, object userState) {
            if ((this.UpsertRoutingDetailsActivityCaptureOperationCompleted == null)) {
                this.UpsertRoutingDetailsActivityCaptureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpsertRoutingDetailsActivityCaptureOperationCompleted);
            }
            this.InvokeAsync("UpsertRoutingDetailsActivityCapture", new object[] {
                        RoutingdetailsActivityID,
                        ProductionOrderHeaderID,
                        UserCode,
                        StartTime,
                        Remarks}, this.UpsertRoutingDetailsActivityCaptureOperationCompleted, userState);
        }
        
        private void OnUpsertRoutingDetailsActivityCaptureOperationCompleted(object arg) {
            if ((this.UpsertRoutingDetailsActivityCaptureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpsertRoutingDetailsActivityCaptureCompleted(this, new UpsertRoutingDetailsActivityCaptureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpsertRoutingDetailsActivityPassorFail", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpsertRoutingDetailsActivityPassorFail(string RouteActivityID, string EmpCode, int PassOrFail, string vProductionOrderID, string vRemarks, string vCheckListResultData, int vUserRoleID) {
            object[] results = this.Invoke("UpsertRoutingDetailsActivityPassorFail", new object[] {
                        RouteActivityID,
                        EmpCode,
                        PassOrFail,
                        vProductionOrderID,
                        vRemarks,
                        vCheckListResultData,
                        vUserRoleID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpsertRoutingDetailsActivityPassorFailAsync(string RouteActivityID, string EmpCode, int PassOrFail, string vProductionOrderID, string vRemarks, string vCheckListResultData, int vUserRoleID) {
            this.UpsertRoutingDetailsActivityPassorFailAsync(RouteActivityID, EmpCode, PassOrFail, vProductionOrderID, vRemarks, vCheckListResultData, vUserRoleID, null);
        }
        
        /// <remarks/>
        public void UpsertRoutingDetailsActivityPassorFailAsync(string RouteActivityID, string EmpCode, int PassOrFail, string vProductionOrderID, string vRemarks, string vCheckListResultData, int vUserRoleID, object userState) {
            if ((this.UpsertRoutingDetailsActivityPassorFailOperationCompleted == null)) {
                this.UpsertRoutingDetailsActivityPassorFailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpsertRoutingDetailsActivityPassorFailOperationCompleted);
            }
            this.InvokeAsync("UpsertRoutingDetailsActivityPassorFail", new object[] {
                        RouteActivityID,
                        EmpCode,
                        PassOrFail,
                        vProductionOrderID,
                        vRemarks,
                        vCheckListResultData,
                        vUserRoleID}, this.UpsertRoutingDetailsActivityPassorFailOperationCompleted, userState);
        }
        
        private void OnUpsertRoutingDetailsActivityPassorFailOperationCompleted(object arg) {
            if ((this.UpsertRoutingDetailsActivityPassorFailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpsertRoutingDetailsActivityPassorFailCompleted(this, new UpsertRoutingDetailsActivityPassorFailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMaterialReceivedList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetMaterialReceivedList(string ProductionOrderHeaderID, string WorkCenterID) {
            object[] results = this.Invoke("GetMaterialReceivedList", new object[] {
                        ProductionOrderHeaderID,
                        WorkCenterID});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetMaterialReceivedListAsync(string ProductionOrderHeaderID, string WorkCenterID) {
            this.GetMaterialReceivedListAsync(ProductionOrderHeaderID, WorkCenterID, null);
        }
        
        /// <remarks/>
        public void GetMaterialReceivedListAsync(string ProductionOrderHeaderID, string WorkCenterID, object userState) {
            if ((this.GetMaterialReceivedListOperationCompleted == null)) {
                this.GetMaterialReceivedListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMaterialReceivedListOperationCompleted);
            }
            this.InvokeAsync("GetMaterialReceivedList", new object[] {
                        ProductionOrderHeaderID,
                        WorkCenterID}, this.GetMaterialReceivedListOperationCompleted, userState);
        }
        
        private void OnGetMaterialReceivedListOperationCompleted(object arg) {
            if ((this.GetMaterialReceivedListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMaterialReceivedListCompleted(this, new GetMaterialReceivedListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMaterialConsumedList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetMaterialConsumedList(string ProductionOrderHeaderID, string WorkCenterID) {
            object[] results = this.Invoke("GetMaterialConsumedList", new object[] {
                        ProductionOrderHeaderID,
                        WorkCenterID});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetMaterialConsumedListAsync(string ProductionOrderHeaderID, string WorkCenterID) {
            this.GetMaterialConsumedListAsync(ProductionOrderHeaderID, WorkCenterID, null);
        }
        
        /// <remarks/>
        public void GetMaterialConsumedListAsync(string ProductionOrderHeaderID, string WorkCenterID, object userState) {
            if ((this.GetMaterialConsumedListOperationCompleted == null)) {
                this.GetMaterialConsumedListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMaterialConsumedListOperationCompleted);
            }
            this.InvokeAsync("GetMaterialConsumedList", new object[] {
                        ProductionOrderHeaderID,
                        WorkCenterID}, this.GetMaterialConsumedListOperationCompleted, userState);
        }
        
        private void OnGetMaterialConsumedListOperationCompleted(object arg) {
            if ((this.GetMaterialConsumedListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMaterialConsumedListCompleted(this, new GetMaterialConsumedListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetJobCardData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetJobCardData(int WorkCenterID, int ProductionOrderID) {
            object[] results = this.Invoke("GetJobCardData", new object[] {
                        WorkCenterID,
                        ProductionOrderID});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetJobCardDataAsync(int WorkCenterID, int ProductionOrderID) {
            this.GetJobCardDataAsync(WorkCenterID, ProductionOrderID, null);
        }
        
        /// <remarks/>
        public void GetJobCardDataAsync(int WorkCenterID, int ProductionOrderID, object userState) {
            if ((this.GetJobCardDataOperationCompleted == null)) {
                this.GetJobCardDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetJobCardDataOperationCompleted);
            }
            this.InvokeAsync("GetJobCardData", new object[] {
                        WorkCenterID,
                        ProductionOrderID}, this.GetJobCardDataOperationCompleted, userState);
        }
        
        private void OnGetJobCardDataOperationCompleted(object arg) {
            if ((this.GetJobCardDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetJobCardDataCompleted(this, new GetJobCardDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetWorkCenterWiseFinishedProductList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public KeyValueStruct[] GetWorkCenterWiseFinishedProductList(string WorkCenterID, string ProductionOrderHeaderID) {
            object[] results = this.Invoke("GetWorkCenterWiseFinishedProductList", new object[] {
                        WorkCenterID,
                        ProductionOrderHeaderID});
            return ((KeyValueStruct[])(results[0]));
        }
        
        /// <remarks/>
        public void GetWorkCenterWiseFinishedProductListAsync(string WorkCenterID, string ProductionOrderHeaderID) {
            this.GetWorkCenterWiseFinishedProductListAsync(WorkCenterID, ProductionOrderHeaderID, null);
        }
        
        /// <remarks/>
        public void GetWorkCenterWiseFinishedProductListAsync(string WorkCenterID, string ProductionOrderHeaderID, object userState) {
            if ((this.GetWorkCenterWiseFinishedProductListOperationCompleted == null)) {
                this.GetWorkCenterWiseFinishedProductListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWorkCenterWiseFinishedProductListOperationCompleted);
            }
            this.InvokeAsync("GetWorkCenterWiseFinishedProductList", new object[] {
                        WorkCenterID,
                        ProductionOrderHeaderID}, this.GetWorkCenterWiseFinishedProductListOperationCompleted, userState);
        }
        
        private void OnGetWorkCenterWiseFinishedProductListOperationCompleted(object arg) {
            if ((this.GetWorkCenterWiseFinishedProductListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWorkCenterWiseFinishedProductListCompleted(this, new GetWorkCenterWiseFinishedProductListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetWorkCenterWiseRejectedMatListForRework", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetWorkCenterWiseRejectedMatListForRework(string WorkCenterID, string ProductionOrderHeaderID) {
            object[] results = this.Invoke("GetWorkCenterWiseRejectedMatListForRework", new object[] {
                        WorkCenterID,
                        ProductionOrderHeaderID});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetWorkCenterWiseRejectedMatListForReworkAsync(string WorkCenterID, string ProductionOrderHeaderID) {
            this.GetWorkCenterWiseRejectedMatListForReworkAsync(WorkCenterID, ProductionOrderHeaderID, null);
        }
        
        /// <remarks/>
        public void GetWorkCenterWiseRejectedMatListForReworkAsync(string WorkCenterID, string ProductionOrderHeaderID, object userState) {
            if ((this.GetWorkCenterWiseRejectedMatListForReworkOperationCompleted == null)) {
                this.GetWorkCenterWiseRejectedMatListForReworkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWorkCenterWiseRejectedMatListForReworkOperationCompleted);
            }
            this.InvokeAsync("GetWorkCenterWiseRejectedMatListForRework", new object[] {
                        WorkCenterID,
                        ProductionOrderHeaderID}, this.GetWorkCenterWiseRejectedMatListForReworkOperationCompleted, userState);
        }
        
        private void OnGetWorkCenterWiseRejectedMatListForReworkOperationCompleted(object arg) {
            if ((this.GetWorkCenterWiseRejectedMatListForReworkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWorkCenterWiseRejectedMatListForReworkCompleted(this, new GetWorkCenterWiseRejectedMatListForReworkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetRawMaterialAssignedQty", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetRawMaterialAssignedQty(string ProductionOrderHeaderID, string WorkCenterID, string MCode) {
            object[] results = this.Invoke("GetRawMaterialAssignedQty", new object[] {
                        ProductionOrderHeaderID,
                        WorkCenterID,
                        MCode});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetRawMaterialAssignedQtyAsync(string ProductionOrderHeaderID, string WorkCenterID, string MCode) {
            this.GetRawMaterialAssignedQtyAsync(ProductionOrderHeaderID, WorkCenterID, MCode, null);
        }
        
        /// <remarks/>
        public void GetRawMaterialAssignedQtyAsync(string ProductionOrderHeaderID, string WorkCenterID, string MCode, object userState) {
            if ((this.GetRawMaterialAssignedQtyOperationCompleted == null)) {
                this.GetRawMaterialAssignedQtyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRawMaterialAssignedQtyOperationCompleted);
            }
            this.InvokeAsync("GetRawMaterialAssignedQty", new object[] {
                        ProductionOrderHeaderID,
                        WorkCenterID,
                        MCode}, this.GetRawMaterialAssignedQtyOperationCompleted, userState);
        }
        
        private void OnGetRawMaterialAssignedQtyOperationCompleted(object arg) {
            if ((this.GetRawMaterialAssignedQtyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRawMaterialAssignedQtyCompleted(this, new GetRawMaterialAssignedQtyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetWorkCenterFinishedGoodsINList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetWorkCenterFinishedGoodsINList(string ProductionOrderHeaderID, string WorkCenterID) {
            object[] results = this.Invoke("GetWorkCenterFinishedGoodsINList", new object[] {
                        ProductionOrderHeaderID,
                        WorkCenterID});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetWorkCenterFinishedGoodsINListAsync(string ProductionOrderHeaderID, string WorkCenterID) {
            this.GetWorkCenterFinishedGoodsINListAsync(ProductionOrderHeaderID, WorkCenterID, null);
        }
        
        /// <remarks/>
        public void GetWorkCenterFinishedGoodsINListAsync(string ProductionOrderHeaderID, string WorkCenterID, object userState) {
            if ((this.GetWorkCenterFinishedGoodsINListOperationCompleted == null)) {
                this.GetWorkCenterFinishedGoodsINListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWorkCenterFinishedGoodsINListOperationCompleted);
            }
            this.InvokeAsync("GetWorkCenterFinishedGoodsINList", new object[] {
                        ProductionOrderHeaderID,
                        WorkCenterID}, this.GetWorkCenterFinishedGoodsINListOperationCompleted, userState);
        }
        
        private void OnGetWorkCenterFinishedGoodsINListOperationCompleted(object arg) {
            if ((this.GetWorkCenterFinishedGoodsINListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWorkCenterFinishedGoodsINListCompleted(this, new GetWorkCenterFinishedGoodsINListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetScrapCodeList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetScrapCodeList() {
            object[] results = this.Invoke("GetScrapCodeList", new object[0]);
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetScrapCodeListAsync() {
            this.GetScrapCodeListAsync(null);
        }
        
        /// <remarks/>
        public void GetScrapCodeListAsync(object userState) {
            if ((this.GetScrapCodeListOperationCompleted == null)) {
                this.GetScrapCodeListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetScrapCodeListOperationCompleted);
            }
            this.InvokeAsync("GetScrapCodeList", new object[0], this.GetScrapCodeListOperationCompleted, userState);
        }
        
        private void OnGetScrapCodeListOperationCompleted(object arg) {
            if ((this.GetScrapCodeListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetScrapCodeListCompleted(this, new GetScrapCodeListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetOperations", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetOperations(string ProductionOrderHeaderID, int WorkCenterID) {
            object[] results = this.Invoke("GetOperations", new object[] {
                        ProductionOrderHeaderID,
                        WorkCenterID});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetOperationsAsync(string ProductionOrderHeaderID, int WorkCenterID) {
            this.GetOperationsAsync(ProductionOrderHeaderID, WorkCenterID, null);
        }
        
        /// <remarks/>
        public void GetOperationsAsync(string ProductionOrderHeaderID, int WorkCenterID, object userState) {
            if ((this.GetOperationsOperationCompleted == null)) {
                this.GetOperationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOperationsOperationCompleted);
            }
            this.InvokeAsync("GetOperations", new object[] {
                        ProductionOrderHeaderID,
                        WorkCenterID}, this.GetOperationsOperationCompleted, userState);
        }
        
        private void OnGetOperationsOperationCompleted(object arg) {
            if ((this.GetOperationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOperationsCompleted(this, new GetOperationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUnconfirmedProductsList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetUnconfirmedProductsList(string ProductionOrderHeaderID, string WorkCenterID, int Nonconfirmitytype) {
            object[] results = this.Invoke("GetUnconfirmedProductsList", new object[] {
                        ProductionOrderHeaderID,
                        WorkCenterID,
                        Nonconfirmitytype});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetUnconfirmedProductsListAsync(string ProductionOrderHeaderID, string WorkCenterID, int Nonconfirmitytype) {
            this.GetUnconfirmedProductsListAsync(ProductionOrderHeaderID, WorkCenterID, Nonconfirmitytype, null);
        }
        
        /// <remarks/>
        public void GetUnconfirmedProductsListAsync(string ProductionOrderHeaderID, string WorkCenterID, int Nonconfirmitytype, object userState) {
            if ((this.GetUnconfirmedProductsListOperationCompleted == null)) {
                this.GetUnconfirmedProductsListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUnconfirmedProductsListOperationCompleted);
            }
            this.InvokeAsync("GetUnconfirmedProductsList", new object[] {
                        ProductionOrderHeaderID,
                        WorkCenterID,
                        Nonconfirmitytype}, this.GetUnconfirmedProductsListOperationCompleted, userState);
        }
        
        private void OnGetUnconfirmedProductsListOperationCompleted(object arg) {
            if ((this.GetUnconfirmedProductsListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUnconfirmedProductsListCompleted(this, new GetUnconfirmedProductsListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetWorkCenterProducedQty", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public decimal GetWorkCenterProducedQty(string ProductionOrderHeaderID, string WorkCenterID) {
            object[] results = this.Invoke("GetWorkCenterProducedQty", new object[] {
                        ProductionOrderHeaderID,
                        WorkCenterID});
            return ((decimal)(results[0]));
        }
        
        /// <remarks/>
        public void GetWorkCenterProducedQtyAsync(string ProductionOrderHeaderID, string WorkCenterID) {
            this.GetWorkCenterProducedQtyAsync(ProductionOrderHeaderID, WorkCenterID, null);
        }
        
        /// <remarks/>
        public void GetWorkCenterProducedQtyAsync(string ProductionOrderHeaderID, string WorkCenterID, object userState) {
            if ((this.GetWorkCenterProducedQtyOperationCompleted == null)) {
                this.GetWorkCenterProducedQtyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWorkCenterProducedQtyOperationCompleted);
            }
            this.InvokeAsync("GetWorkCenterProducedQty", new object[] {
                        ProductionOrderHeaderID,
                        WorkCenterID}, this.GetWorkCenterProducedQtyOperationCompleted, userState);
        }
        
        private void OnGetWorkCenterProducedQtyOperationCompleted(object arg) {
            if ((this.GetWorkCenterProducedQtyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWorkCenterProducedQtyCompleted(this, new GetWorkCenterProducedQtyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetWorkCentreFinishedQty", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetWorkCentreFinishedQty(string ProductionOrderHeaderID, string WorkCenterID) {
            object[] results = this.Invoke("GetWorkCentreFinishedQty", new object[] {
                        ProductionOrderHeaderID,
                        WorkCenterID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetWorkCentreFinishedQtyAsync(string ProductionOrderHeaderID, string WorkCenterID) {
            this.GetWorkCentreFinishedQtyAsync(ProductionOrderHeaderID, WorkCenterID, null);
        }
        
        /// <remarks/>
        public void GetWorkCentreFinishedQtyAsync(string ProductionOrderHeaderID, string WorkCenterID, object userState) {
            if ((this.GetWorkCentreFinishedQtyOperationCompleted == null)) {
                this.GetWorkCentreFinishedQtyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWorkCentreFinishedQtyOperationCompleted);
            }
            this.InvokeAsync("GetWorkCentreFinishedQty", new object[] {
                        ProductionOrderHeaderID,
                        WorkCenterID}, this.GetWorkCentreFinishedQtyOperationCompleted, userState);
        }
        
        private void OnGetWorkCentreFinishedQtyOperationCompleted(object arg) {
            if ((this.GetWorkCentreFinishedQtyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWorkCentreFinishedQtyCompleted(this, new GetWorkCentreFinishedQtyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetWorkCenterWiseHeaderData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetWorkCenterWiseHeaderData(string ProductionOrderHeaderID, int WorkCenterID) {
            object[] results = this.Invoke("GetWorkCenterWiseHeaderData", new object[] {
                        ProductionOrderHeaderID,
                        WorkCenterID});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetWorkCenterWiseHeaderDataAsync(string ProductionOrderHeaderID, int WorkCenterID) {
            this.GetWorkCenterWiseHeaderDataAsync(ProductionOrderHeaderID, WorkCenterID, null);
        }
        
        /// <remarks/>
        public void GetWorkCenterWiseHeaderDataAsync(string ProductionOrderHeaderID, int WorkCenterID, object userState) {
            if ((this.GetWorkCenterWiseHeaderDataOperationCompleted == null)) {
                this.GetWorkCenterWiseHeaderDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWorkCenterWiseHeaderDataOperationCompleted);
            }
            this.InvokeAsync("GetWorkCenterWiseHeaderData", new object[] {
                        ProductionOrderHeaderID,
                        WorkCenterID}, this.GetWorkCenterWiseHeaderDataOperationCompleted, userState);
        }
        
        private void OnGetWorkCenterWiseHeaderDataOperationCompleted(object arg) {
            if ((this.GetWorkCenterWiseHeaderDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWorkCenterWiseHeaderDataCompleted(this, new GetWorkCenterWiseHeaderDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLastSerialNumberForMaterial", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetLastSerialNumberForMaterial(string ProductionOrderHeaderID, string WorkCenterID, string MMID) {
            object[] results = this.Invoke("GetLastSerialNumberForMaterial", new object[] {
                        ProductionOrderHeaderID,
                        WorkCenterID,
                        MMID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetLastSerialNumberForMaterialAsync(string ProductionOrderHeaderID, string WorkCenterID, string MMID) {
            this.GetLastSerialNumberForMaterialAsync(ProductionOrderHeaderID, WorkCenterID, MMID, null);
        }
        
        /// <remarks/>
        public void GetLastSerialNumberForMaterialAsync(string ProductionOrderHeaderID, string WorkCenterID, string MMID, object userState) {
            if ((this.GetLastSerialNumberForMaterialOperationCompleted == null)) {
                this.GetLastSerialNumberForMaterialOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLastSerialNumberForMaterialOperationCompleted);
            }
            this.InvokeAsync("GetLastSerialNumberForMaterial", new object[] {
                        ProductionOrderHeaderID,
                        WorkCenterID,
                        MMID}, this.GetLastSerialNumberForMaterialOperationCompleted, userState);
        }
        
        private void OnGetLastSerialNumberForMaterialOperationCompleted(object arg) {
            if ((this.GetLastSerialNumberForMaterialCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLastSerialNumberForMaterialCompleted(this, new GetLastSerialNumberForMaterialCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetWorkCenterWiseProducedQty", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public decimal GetWorkCenterWiseProducedQty(string ProductionOrderHeaderID, string WorkCenterID) {
            object[] results = this.Invoke("GetWorkCenterWiseProducedQty", new object[] {
                        ProductionOrderHeaderID,
                        WorkCenterID});
            return ((decimal)(results[0]));
        }
        
        /// <remarks/>
        public void GetWorkCenterWiseProducedQtyAsync(string ProductionOrderHeaderID, string WorkCenterID) {
            this.GetWorkCenterWiseProducedQtyAsync(ProductionOrderHeaderID, WorkCenterID, null);
        }
        
        /// <remarks/>
        public void GetWorkCenterWiseProducedQtyAsync(string ProductionOrderHeaderID, string WorkCenterID, object userState) {
            if ((this.GetWorkCenterWiseProducedQtyOperationCompleted == null)) {
                this.GetWorkCenterWiseProducedQtyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWorkCenterWiseProducedQtyOperationCompleted);
            }
            this.InvokeAsync("GetWorkCenterWiseProducedQty", new object[] {
                        ProductionOrderHeaderID,
                        WorkCenterID}, this.GetWorkCenterWiseProducedQtyOperationCompleted, userState);
        }
        
        private void OnGetWorkCenterWiseProducedQtyOperationCompleted(object arg) {
            if ((this.GetWorkCenterWiseProducedQtyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWorkCenterWiseProducedQtyCompleted(this, new GetWorkCenterWiseProducedQtyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSerialNumbersForWorkCenter", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetSerialNumbersForWorkCenter(int WorkCenterID, int ProductionOrderID) {
            object[] results = this.Invoke("GetSerialNumbersForWorkCenter", new object[] {
                        WorkCenterID,
                        ProductionOrderID});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetSerialNumbersForWorkCenterAsync(int WorkCenterID, int ProductionOrderID) {
            this.GetSerialNumbersForWorkCenterAsync(WorkCenterID, ProductionOrderID, null);
        }
        
        /// <remarks/>
        public void GetSerialNumbersForWorkCenterAsync(int WorkCenterID, int ProductionOrderID, object userState) {
            if ((this.GetSerialNumbersForWorkCenterOperationCompleted == null)) {
                this.GetSerialNumbersForWorkCenterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSerialNumbersForWorkCenterOperationCompleted);
            }
            this.InvokeAsync("GetSerialNumbersForWorkCenter", new object[] {
                        WorkCenterID,
                        ProductionOrderID}, this.GetSerialNumbersForWorkCenterOperationCompleted, userState);
        }
        
        private void OnGetSerialNumbersForWorkCenterOperationCompleted(object arg) {
            if ((this.GetSerialNumbersForWorkCenterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSerialNumbersForWorkCenterCompleted(this, new GetSerialNumbersForWorkCenterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdatePositiveRecall", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdatePositiveRecall(int WorkCenterID, string ProductionOrderID, string remarks, string EmployeeCode, int vstatus, int vRoutingDetailsID) {
            object[] results = this.Invoke("UpdatePositiveRecall", new object[] {
                        WorkCenterID,
                        ProductionOrderID,
                        remarks,
                        EmployeeCode,
                        vstatus,
                        vRoutingDetailsID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdatePositiveRecallAsync(int WorkCenterID, string ProductionOrderID, string remarks, string EmployeeCode, int vstatus, int vRoutingDetailsID) {
            this.UpdatePositiveRecallAsync(WorkCenterID, ProductionOrderID, remarks, EmployeeCode, vstatus, vRoutingDetailsID, null);
        }
        
        /// <remarks/>
        public void UpdatePositiveRecallAsync(int WorkCenterID, string ProductionOrderID, string remarks, string EmployeeCode, int vstatus, int vRoutingDetailsID, object userState) {
            if ((this.UpdatePositiveRecallOperationCompleted == null)) {
                this.UpdatePositiveRecallOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePositiveRecallOperationCompleted);
            }
            this.InvokeAsync("UpdatePositiveRecall", new object[] {
                        WorkCenterID,
                        ProductionOrderID,
                        remarks,
                        EmployeeCode,
                        vstatus,
                        vRoutingDetailsID}, this.UpdatePositiveRecallOperationCompleted, userState);
        }
        
        private void OnUpdatePositiveRecallOperationCompleted(object arg) {
            if ((this.UpdatePositiveRecallCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatePositiveRecallCompleted(this, new UpdatePositiveRecallCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPositiveRecallDetails", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPositiveRecallDetails(int vRoutingDetailsActivityID, string ProductionOrderID) {
            object[] results = this.Invoke("GetPositiveRecallDetails", new object[] {
                        vRoutingDetailsActivityID,
                        ProductionOrderID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPositiveRecallDetailsAsync(int vRoutingDetailsActivityID, string ProductionOrderID) {
            this.GetPositiveRecallDetailsAsync(vRoutingDetailsActivityID, ProductionOrderID, null);
        }
        
        /// <remarks/>
        public void GetPositiveRecallDetailsAsync(int vRoutingDetailsActivityID, string ProductionOrderID, object userState) {
            if ((this.GetPositiveRecallDetailsOperationCompleted == null)) {
                this.GetPositiveRecallDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPositiveRecallDetailsOperationCompleted);
            }
            this.InvokeAsync("GetPositiveRecallDetails", new object[] {
                        vRoutingDetailsActivityID,
                        ProductionOrderID}, this.GetPositiveRecallDetailsOperationCompleted, userState);
        }
        
        private void OnGetPositiveRecallDetailsOperationCompleted(object arg) {
            if ((this.GetPositiveRecallDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPositiveRecallDetailsCompleted(this, new GetPositiveRecallDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetQCParameters", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public KeyValueStruct[] GetQCParameters(int RoutingDetailsActivityID, string vProductionOrderHeaderID) {
            object[] results = this.Invoke("GetQCParameters", new object[] {
                        RoutingDetailsActivityID,
                        vProductionOrderHeaderID});
            return ((KeyValueStruct[])(results[0]));
        }
        
        /// <remarks/>
        public void GetQCParametersAsync(int RoutingDetailsActivityID, string vProductionOrderHeaderID) {
            this.GetQCParametersAsync(RoutingDetailsActivityID, vProductionOrderHeaderID, null);
        }
        
        /// <remarks/>
        public void GetQCParametersAsync(int RoutingDetailsActivityID, string vProductionOrderHeaderID, object userState) {
            if ((this.GetQCParametersOperationCompleted == null)) {
                this.GetQCParametersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetQCParametersOperationCompleted);
            }
            this.InvokeAsync("GetQCParameters", new object[] {
                        RoutingDetailsActivityID,
                        vProductionOrderHeaderID}, this.GetQCParametersOperationCompleted, userState);
        }
        
        private void OnGetQCParametersOperationCompleted(object arg) {
            if ((this.GetQCParametersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetQCParametersCompleted(this, new GetQCParametersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getSampleCode", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getSampleCode() {
            object[] results = this.Invoke("getSampleCode", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getSampleCodeAsync() {
            this.getSampleCodeAsync(null);
        }
        
        /// <remarks/>
        public void getSampleCodeAsync(object userState) {
            if ((this.getSampleCodeOperationCompleted == null)) {
                this.getSampleCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSampleCodeOperationCompleted);
            }
            this.InvokeAsync("getSampleCode", new object[0], this.getSampleCodeOperationCompleted, userState);
        }
        
        private void OngetSampleCodeOperationCompleted(object arg) {
            if ((this.getSampleCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSampleCodeCompleted(this, new getSampleCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDropDownData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public KeyValueStruct[] GetDropDownData(string SqlString, string DefaultValue) {
            object[] results = this.Invoke("GetDropDownData", new object[] {
                        SqlString,
                        DefaultValue});
            return ((KeyValueStruct[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDropDownDataAsync(string SqlString, string DefaultValue) {
            this.GetDropDownDataAsync(SqlString, DefaultValue, null);
        }
        
        /// <remarks/>
        public void GetDropDownDataAsync(string SqlString, string DefaultValue, object userState) {
            if ((this.GetDropDownDataOperationCompleted == null)) {
                this.GetDropDownDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDropDownDataOperationCompleted);
            }
            this.InvokeAsync("GetDropDownData", new object[] {
                        SqlString,
                        DefaultValue}, this.GetDropDownDataOperationCompleted, userState);
        }
        
        private void OnGetDropDownDataOperationCompleted(object arg) {
            if ((this.GetDropDownDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDropDownDataCompleted(this, new GetDropDownDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TestData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public KeyValueStruct[] TestData(int poheaderID, int WorkCenterID) {
            object[] results = this.Invoke("TestData", new object[] {
                        poheaderID,
                        WorkCenterID});
            return ((KeyValueStruct[])(results[0]));
        }
        
        /// <remarks/>
        public void TestDataAsync(int poheaderID, int WorkCenterID) {
            this.TestDataAsync(poheaderID, WorkCenterID, null);
        }
        
        /// <remarks/>
        public void TestDataAsync(int poheaderID, int WorkCenterID, object userState) {
            if ((this.TestDataOperationCompleted == null)) {
                this.TestDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTestDataOperationCompleted);
            }
            this.InvokeAsync("TestData", new object[] {
                        poheaderID,
                        WorkCenterID}, this.TestDataOperationCompleted, userState);
        }
        
        private void OnTestDataOperationCompleted(object arg) {
            if ((this.TestDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TestDataCompleted(this, new TestDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetIORefNumber", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetIORefNumber() {
            object[] results = this.Invoke("GetIORefNumber", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetIORefNumberAsync() {
            this.GetIORefNumberAsync(null);
        }
        
        /// <remarks/>
        public void GetIORefNumberAsync(object userState) {
            if ((this.GetIORefNumberOperationCompleted == null)) {
                this.GetIORefNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIORefNumberOperationCompleted);
            }
            this.InvokeAsync("GetIORefNumber", new object[0], this.GetIORefNumberOperationCompleted, userState);
        }
        
        private void OnGetIORefNumberOperationCompleted(object arg) {
            if ((this.GetIORefNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIORefNumberCompleted(this, new GetIORefNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetIOBOMDetails", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetIOBOMDetails(string ProductionOrderID) {
            object[] results = this.Invoke("GetIOBOMDetails", new object[] {
                        ProductionOrderID});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetIOBOMDetailsAsync(string ProductionOrderID) {
            this.GetIOBOMDetailsAsync(ProductionOrderID, null);
        }
        
        /// <remarks/>
        public void GetIOBOMDetailsAsync(string ProductionOrderID, object userState) {
            if ((this.GetIOBOMDetailsOperationCompleted == null)) {
                this.GetIOBOMDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIOBOMDetailsOperationCompleted);
            }
            this.InvokeAsync("GetIOBOMDetails", new object[] {
                        ProductionOrderID}, this.GetIOBOMDetailsOperationCompleted, userState);
        }
        
        private void OnGetIOBOMDetailsOperationCompleted(object arg) {
            if ((this.GetIOBOMDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIOBOMDetailsCompleted(this, new GetIOBOMDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpsertToolCapture", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpsertToolCapture(string ItemCode, string SerialNumber, int vRouteID, string EmployeeCode) {
            object[] results = this.Invoke("UpsertToolCapture", new object[] {
                        ItemCode,
                        SerialNumber,
                        vRouteID,
                        EmployeeCode});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UpsertToolCaptureAsync(string ItemCode, string SerialNumber, int vRouteID, string EmployeeCode) {
            this.UpsertToolCaptureAsync(ItemCode, SerialNumber, vRouteID, EmployeeCode, null);
        }
        
        /// <remarks/>
        public void UpsertToolCaptureAsync(string ItemCode, string SerialNumber, int vRouteID, string EmployeeCode, object userState) {
            if ((this.UpsertToolCaptureOperationCompleted == null)) {
                this.UpsertToolCaptureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpsertToolCaptureOperationCompleted);
            }
            this.InvokeAsync("UpsertToolCapture", new object[] {
                        ItemCode,
                        SerialNumber,
                        vRouteID,
                        EmployeeCode}, this.UpsertToolCaptureOperationCompleted, userState);
        }
        
        private void OnUpsertToolCaptureOperationCompleted(object arg) {
            if ((this.UpsertToolCaptureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpsertToolCaptureCompleted(this, new UpsertToolCaptureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UploadFile(string PathName, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] FileControl, string WCFURL) {
            object[] results = this.Invoke("UploadFile", new object[] {
                        PathName,
                        FileControl,
                        WCFURL});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UploadFileAsync(string PathName, byte[] FileControl, string WCFURL) {
            this.UploadFileAsync(PathName, FileControl, WCFURL, null);
        }
        
        /// <remarks/>
        public void UploadFileAsync(string PathName, byte[] FileControl, string WCFURL, object userState) {
            if ((this.UploadFileOperationCompleted == null)) {
                this.UploadFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadFileOperationCompleted);
            }
            this.InvokeAsync("UploadFile", new object[] {
                        PathName,
                        FileControl,
                        WCFURL}, this.UploadFileOperationCompleted, userState);
        }
        
        private void OnUploadFileOperationCompleted(object arg) {
            if ((this.UploadFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadFileCompleted(this, new UploadFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class KeyValueStruct {
        
        private string keyField;
        
        private string valueField;
        
        /// <remarks/>
        public string Key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
            }
        }
        
        /// <remarks/>
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void HelloWorldCompletedEventHandler(object sender, HelloWorldCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HelloWorldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HelloWorldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CheckUserLoginCompletedEventHandler(object sender, CheckUserLoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckUserLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckUserLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public KeyValueStruct[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((KeyValueStruct[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetProductionOrderListCompletedEventHandler(object sender, GetProductionOrderListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProductionOrderListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProductionOrderListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetOperatorActivityResulsCompletedEventHandler(object sender, GetOperatorActivityResulsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOperatorActivityResulsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOperatorActivityResulsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetOperationActivitiesCompletedEventHandler(object sender, GetOperationActivitiesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOperationActivitiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOperationActivitiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetActivityLevelComponentsCompletedEventHandler(object sender, GetActivityLevelComponentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetActivityLevelComponentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetActivityLevelComponentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetUserRoleIDCompletedEventHandler(object sender, GetUserRoleIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserRoleIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserRoleIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UpsertGoodsMovementDetailsCompletedEventHandler(object sender, UpsertGoodsMovementDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpsertGoodsMovementDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpsertGoodsMovementDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void IsPassOrFailCapturedCompletedEventHandler(object sender, IsPassOrFailCapturedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsPassOrFailCapturedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsPassOrFailCapturedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UpsertRoutingDetailsActivityCaptureCompletedEventHandler(object sender, UpsertRoutingDetailsActivityCaptureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpsertRoutingDetailsActivityCaptureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpsertRoutingDetailsActivityCaptureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UpsertRoutingDetailsActivityPassorFailCompletedEventHandler(object sender, UpsertRoutingDetailsActivityPassorFailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpsertRoutingDetailsActivityPassorFailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpsertRoutingDetailsActivityPassorFailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetMaterialReceivedListCompletedEventHandler(object sender, GetMaterialReceivedListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMaterialReceivedListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMaterialReceivedListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetMaterialConsumedListCompletedEventHandler(object sender, GetMaterialConsumedListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMaterialConsumedListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMaterialConsumedListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetJobCardDataCompletedEventHandler(object sender, GetJobCardDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetJobCardDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetJobCardDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetWorkCenterWiseFinishedProductListCompletedEventHandler(object sender, GetWorkCenterWiseFinishedProductListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWorkCenterWiseFinishedProductListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWorkCenterWiseFinishedProductListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public KeyValueStruct[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((KeyValueStruct[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetWorkCenterWiseRejectedMatListForReworkCompletedEventHandler(object sender, GetWorkCenterWiseRejectedMatListForReworkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWorkCenterWiseRejectedMatListForReworkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWorkCenterWiseRejectedMatListForReworkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetRawMaterialAssignedQtyCompletedEventHandler(object sender, GetRawMaterialAssignedQtyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRawMaterialAssignedQtyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRawMaterialAssignedQtyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetWorkCenterFinishedGoodsINListCompletedEventHandler(object sender, GetWorkCenterFinishedGoodsINListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWorkCenterFinishedGoodsINListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWorkCenterFinishedGoodsINListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetScrapCodeListCompletedEventHandler(object sender, GetScrapCodeListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetScrapCodeListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetScrapCodeListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetOperationsCompletedEventHandler(object sender, GetOperationsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOperationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOperationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetUnconfirmedProductsListCompletedEventHandler(object sender, GetUnconfirmedProductsListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUnconfirmedProductsListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUnconfirmedProductsListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetWorkCenterProducedQtyCompletedEventHandler(object sender, GetWorkCenterProducedQtyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWorkCenterProducedQtyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWorkCenterProducedQtyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public decimal Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((decimal)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetWorkCentreFinishedQtyCompletedEventHandler(object sender, GetWorkCentreFinishedQtyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWorkCentreFinishedQtyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWorkCentreFinishedQtyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetWorkCenterWiseHeaderDataCompletedEventHandler(object sender, GetWorkCenterWiseHeaderDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWorkCenterWiseHeaderDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWorkCenterWiseHeaderDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetLastSerialNumberForMaterialCompletedEventHandler(object sender, GetLastSerialNumberForMaterialCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLastSerialNumberForMaterialCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLastSerialNumberForMaterialCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetWorkCenterWiseProducedQtyCompletedEventHandler(object sender, GetWorkCenterWiseProducedQtyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWorkCenterWiseProducedQtyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWorkCenterWiseProducedQtyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public decimal Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((decimal)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetSerialNumbersForWorkCenterCompletedEventHandler(object sender, GetSerialNumbersForWorkCenterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSerialNumbersForWorkCenterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSerialNumbersForWorkCenterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UpdatePositiveRecallCompletedEventHandler(object sender, UpdatePositiveRecallCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdatePositiveRecallCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdatePositiveRecallCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetPositiveRecallDetailsCompletedEventHandler(object sender, GetPositiveRecallDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPositiveRecallDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPositiveRecallDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetQCParametersCompletedEventHandler(object sender, GetQCParametersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetQCParametersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetQCParametersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public KeyValueStruct[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((KeyValueStruct[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void getSampleCodeCompletedEventHandler(object sender, getSampleCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSampleCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSampleCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetDropDownDataCompletedEventHandler(object sender, GetDropDownDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDropDownDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDropDownDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public KeyValueStruct[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((KeyValueStruct[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void TestDataCompletedEventHandler(object sender, TestDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TestDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TestDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public KeyValueStruct[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((KeyValueStruct[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetIORefNumberCompletedEventHandler(object sender, GetIORefNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetIORefNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetIORefNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetIOBOMDetailsCompletedEventHandler(object sender, GetIOBOMDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetIOBOMDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetIOBOMDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UpsertToolCaptureCompletedEventHandler(object sender, UpsertToolCaptureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpsertToolCaptureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpsertToolCaptureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UploadFileCompletedEventHandler(object sender, UploadFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591