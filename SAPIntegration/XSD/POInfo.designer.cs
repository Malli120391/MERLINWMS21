// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.4.0.32989
//    <NameSpace>SAPIntegration.INOUT</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>True</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>True</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>True</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net20</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>True</OrderXMLAttrib><EnableEncoding>True</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>False</DisableDebug><PropNameSpecified>All</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>False</ExcludeIncludedTypes><EnableInitializeFields>True</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace SAPIntegration.INOUT
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Text;
    using System.Xml;
    using System.Collections.Generic;


    /// <summary>
    /// Purchasing info record
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
    public partial class INFREC01 : System.ComponentModel.INotifyPropertyChanged
    {

        private INFREC01IDOC iDOCField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        private bool iDOCFieldSpecified;

        /// <summary>
        /// INFREC01 class constructor
        /// </summary>
        public INFREC01()
        {
            this.iDOCField = new INFREC01IDOC();
        }

        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 0)]
        public INFREC01IDOC IDOC
        {
            get
            {
                return this.iDOCField;
            }
            set
            {
                if ((this.iDOCField != null))
                {
                    if ((iDOCField.Equals(value) != true))
                    {
                        this.iDOCField = value;
                        this.OnPropertyChanged("IDOC");
                    }
                }
                else
                {
                    this.iDOCField = value;
                    this.OnPropertyChanged("IDOC");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(INFREC01));
                }
                return serializer;
            }
        }

        [XmlIgnore()]
        public bool IDOCSpecified
        {
            get
            {
                return iDOCFieldSpecified;
            }
            set
            {
                iDOCFieldSpecified = value;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current INFREC01 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an INFREC01 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output INFREC01 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out INFREC01 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(INFREC01);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out INFREC01 obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static INFREC01 Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((INFREC01)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current INFREC01 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an INFREC01 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output INFREC01 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out INFREC01 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(INFREC01);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out INFREC01 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out INFREC01 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static INFREC01 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static INFREC01 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class INFREC01IDOC : System.ComponentModel.INotifyPropertyChanged
    {

        private INFREC01IDOCEDI_DC40 eDI_DC40Field;

        private INFREC01IDOCE1EINAM e1EINAMField;

        private INFREC01IDOCBEGIN bEGINField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        private bool eDI_DC40FieldSpecified;

        private bool e1EINAMFieldSpecified;

        private bool bEGINFieldSpecified;

        /// <summary>
        /// INFREC01IDOC class constructor
        /// </summary>
        public INFREC01IDOC()
        {
            this.e1EINAMField = new INFREC01IDOCE1EINAM();
            this.eDI_DC40Field = new INFREC01IDOCEDI_DC40();
        }

        /// <summary>
        /// IDoc Control Record for Interface to External System
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 0)]
        public INFREC01IDOCEDI_DC40 EDI_DC40
        {
            get
            {
                return this.eDI_DC40Field;
            }
            set
            {
                if ((this.eDI_DC40Field != null))
                {
                    if ((eDI_DC40Field.Equals(value) != true))
                    {
                        this.eDI_DC40Field = value;
                        this.OnPropertyChanged("EDI_DC40");
                    }
                }
                else
                {
                    this.eDI_DC40Field = value;
                    this.OnPropertyChanged("EDI_DC40");
                }
            }
        }

        /// <summary>
        /// Purchasing Info Record: General Data
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 1)]
        public INFREC01IDOCE1EINAM E1EINAM
        {
            get
            {
                return this.e1EINAMField;
            }
            set
            {
                if ((this.e1EINAMField != null))
                {
                    if ((e1EINAMField.Equals(value) != true))
                    {
                        this.e1EINAMField = value;
                        this.OnPropertyChanged("E1EINAM");
                    }
                }
                else
                {
                    this.e1EINAMField = value;
                    this.OnPropertyChanged("E1EINAM");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public INFREC01IDOCBEGIN BEGIN
        {
            get
            {
                return this.bEGINField;
            }
            set
            {
                if ((bEGINField.Equals(value) != true))
                {
                    this.bEGINField = value;
                    this.OnPropertyChanged("BEGIN");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(INFREC01IDOC));
                }
                return serializer;
            }
        }

        [XmlIgnore()]
        public bool EDI_DC40Specified
        {
            get
            {
                return eDI_DC40FieldSpecified;
            }
            set
            {
                eDI_DC40FieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool E1EINAMSpecified
        {
            get
            {
                return e1EINAMFieldSpecified;
            }
            set
            {
                e1EINAMFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool BEGINSpecified
        {
            get
            {
                return bEGINFieldSpecified;
            }
            set
            {
                bEGINFieldSpecified = value;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current INFREC01IDOC object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an INFREC01IDOC object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output INFREC01IDOC object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out INFREC01IDOC obj, out System.Exception exception)
        {
            exception = null;
            obj = default(INFREC01IDOC);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out INFREC01IDOC obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static INFREC01IDOC Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((INFREC01IDOC)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current INFREC01IDOC object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an INFREC01IDOC object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output INFREC01IDOC object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out INFREC01IDOC obj, out System.Exception exception)
        {
            exception = null;
            obj = default(INFREC01IDOC);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out INFREC01IDOC obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out INFREC01IDOC obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static INFREC01IDOC LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static INFREC01IDOC LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// IDoc Control Record for Interface to External System
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class INFREC01IDOCEDI_DC40 : System.ComponentModel.INotifyPropertyChanged
    {

        private string tABNAMField;

        private string mANDTField;

        private string dOCNUMField;

        private string dOCRELField;

        private string sTATUSField;

        private INFREC01IDOCEDI_DC40DIRECT dIRECTField;

        private string oUTMODField;

        private string eXPRSSField;

        private string tESTField;

        private string iDOCTYPField;

        private string cIMTYPField;

        private string mESTYPField;

        private string mESCODField;

        private string mESFCTField;

        private string sTDField;

        private string sTDVRSField;

        private string sTDMESField;

        private string sNDPORField;

        private string sNDPRTField;

        private string sNDPFCField;

        private string sNDPRNField;

        private string sNDSADField;

        private string sNDLADField;

        private string rCVPORField;

        private string rCVPRTField;

        private string rCVPFCField;

        private string rCVPRNField;

        private string rCVSADField;

        private string rCVLADField;

        private string cREDATField;

        private string cRETIMField;

        private string rEFINTField;

        private string rEFGRPField;

        private string rEFMESField;

        private string aRCKEYField;

        private string sERIALField;

        private INFREC01IDOCEDI_DC40SEGMENT sEGMENTField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        private bool tABNAMFieldSpecified;

        private bool mANDTFieldSpecified;

        private bool dOCNUMFieldSpecified;

        private bool dOCRELFieldSpecified;

        private bool sTATUSFieldSpecified;

        private bool dIRECTFieldSpecified;

        private bool oUTMODFieldSpecified;

        private bool eXPRSSFieldSpecified;

        private bool tESTFieldSpecified;

        private bool iDOCTYPFieldSpecified;

        private bool cIMTYPFieldSpecified;

        private bool mESTYPFieldSpecified;

        private bool mESCODFieldSpecified;

        private bool mESFCTFieldSpecified;

        private bool sTDFieldSpecified;

        private bool sTDVRSFieldSpecified;

        private bool sTDMESFieldSpecified;

        private bool sNDPORFieldSpecified;

        private bool sNDPRTFieldSpecified;

        private bool sNDPFCFieldSpecified;

        private bool sNDPRNFieldSpecified;

        private bool sNDSADFieldSpecified;

        private bool sNDLADFieldSpecified;

        private bool rCVPORFieldSpecified;

        private bool rCVPRTFieldSpecified;

        private bool rCVPFCFieldSpecified;

        private bool rCVPRNFieldSpecified;

        private bool rCVSADFieldSpecified;

        private bool rCVLADFieldSpecified;

        private bool cREDATFieldSpecified;

        private bool cRETIMFieldSpecified;

        private bool rEFINTFieldSpecified;

        private bool rEFGRPFieldSpecified;

        private bool rEFMESFieldSpecified;

        private bool aRCKEYFieldSpecified;

        private bool sERIALFieldSpecified;

        private bool sEGMENTFieldSpecified;

        public INFREC01IDOCEDI_DC40()
        {
            this.tABNAMField = "EDI_DC40";
            this.iDOCTYPField = "INFREC01";
            this.cIMTYPField = "";
        }

        /// <summary>
        /// Name of Table Structure
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 0)]
        public string TABNAM
        {
            get
            {
                return this.tABNAMField;
            }
            set
            {
                if ((this.tABNAMField != null))
                {
                    if ((tABNAMField.Equals(value) != true))
                    {
                        this.tABNAMField = value;
                        this.OnPropertyChanged("TABNAM");
                    }
                }
                else
                {
                    this.tABNAMField = value;
                    this.OnPropertyChanged("TABNAM");
                }
            }
        }

        /// <summary>
        /// Client
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 1)]
        public string MANDT
        {
            get
            {
                return this.mANDTField;
            }
            set
            {
                if ((this.mANDTField != null))
                {
                    if ((mANDTField.Equals(value) != true))
                    {
                        this.mANDTField = value;
                        this.OnPropertyChanged("MANDT");
                    }
                }
                else
                {
                    this.mANDTField = value;
                    this.OnPropertyChanged("MANDT");
                }
            }
        }

        /// <summary>
        /// IDoc number
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 2)]
        public string DOCNUM
        {
            get
            {
                return this.dOCNUMField;
            }
            set
            {
                if ((this.dOCNUMField != null))
                {
                    if ((dOCNUMField.Equals(value) != true))
                    {
                        this.dOCNUMField = value;
                        this.OnPropertyChanged("DOCNUM");
                    }
                }
                else
                {
                    this.dOCNUMField = value;
                    this.OnPropertyChanged("DOCNUM");
                }
            }
        }

        /// <summary>
        /// SAP Release for IDoc
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 3)]
        public string DOCREL
        {
            get
            {
                return this.dOCRELField;
            }
            set
            {
                if ((this.dOCRELField != null))
                {
                    if ((dOCRELField.Equals(value) != true))
                    {
                        this.dOCRELField = value;
                        this.OnPropertyChanged("DOCREL");
                    }
                }
                else
                {
                    this.dOCRELField = value;
                    this.OnPropertyChanged("DOCREL");
                }
            }
        }

        /// <summary>
        /// Status of IDoc
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 4)]
        public string STATUS
        {
            get
            {
                return this.sTATUSField;
            }
            set
            {
                if ((this.sTATUSField != null))
                {
                    if ((sTATUSField.Equals(value) != true))
                    {
                        this.sTATUSField = value;
                        this.OnPropertyChanged("STATUS");
                    }
                }
                else
                {
                    this.sTATUSField = value;
                    this.OnPropertyChanged("STATUS");
                }
            }
        }

        /// <summary>
        /// Direction
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 5)]
        public INFREC01IDOCEDI_DC40DIRECT DIRECT
        {
            get
            {
                return this.dIRECTField;
            }
            set
            {
                if ((dIRECTField.Equals(value) != true))
                {
                    this.dIRECTField = value;
                    this.OnPropertyChanged("DIRECT");
                }
            }
        }

        /// <summary>
        /// Output mode
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 6)]
        public string OUTMOD
        {
            get
            {
                return this.oUTMODField;
            }
            set
            {
                if ((this.oUTMODField != null))
                {
                    if ((oUTMODField.Equals(value) != true))
                    {
                        this.oUTMODField = value;
                        this.OnPropertyChanged("OUTMOD");
                    }
                }
                else
                {
                    this.oUTMODField = value;
                    this.OnPropertyChanged("OUTMOD");
                }
            }
        }

        /// <summary>
        /// Overriding in inbound processing
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 7)]
        public string EXPRSS
        {
            get
            {
                return this.eXPRSSField;
            }
            set
            {
                if ((this.eXPRSSField != null))
                {
                    if ((eXPRSSField.Equals(value) != true))
                    {
                        this.eXPRSSField = value;
                        this.OnPropertyChanged("EXPRSS");
                    }
                }
                else
                {
                    this.eXPRSSField = value;
                    this.OnPropertyChanged("EXPRSS");
                }
            }
        }

        /// <summary>
        /// Test flag
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 8)]
        public string TEST
        {
            get
            {
                return this.tESTField;
            }
            set
            {
                if ((this.tESTField != null))
                {
                    if ((tESTField.Equals(value) != true))
                    {
                        this.tESTField = value;
                        this.OnPropertyChanged("TEST");
                    }
                }
                else
                {
                    this.tESTField = value;
                    this.OnPropertyChanged("TEST");
                }
            }
        }

        /// <summary>
        /// Name of basic type
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 9)]
        public string IDOCTYP
        {
            get
            {
                return this.iDOCTYPField;
            }
            set
            {
                if ((this.iDOCTYPField != null))
                {
                    if ((iDOCTYPField.Equals(value) != true))
                    {
                        this.iDOCTYPField = value;
                        this.OnPropertyChanged("IDOCTYP");
                    }
                }
                else
                {
                    this.iDOCTYPField = value;
                    this.OnPropertyChanged("IDOCTYP");
                }
            }
        }

        /// <summary>
        /// Extension (defined by customer)
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 10)]
        public string CIMTYP
        {
            get
            {
                return this.cIMTYPField;
            }
            set
            {
                if ((this.cIMTYPField != null))
                {
                    if ((cIMTYPField.Equals(value) != true))
                    {
                        this.cIMTYPField = value;
                        this.OnPropertyChanged("CIMTYP");
                    }
                }
                else
                {
                    this.cIMTYPField = value;
                    this.OnPropertyChanged("CIMTYP");
                }
            }
        }

        /// <summary>
        /// Message type
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 11)]
        public string MESTYP
        {
            get
            {
                return this.mESTYPField;
            }
            set
            {
                if ((this.mESTYPField != null))
                {
                    if ((mESTYPField.Equals(value) != true))
                    {
                        this.mESTYPField = value;
                        this.OnPropertyChanged("MESTYP");
                    }
                }
                else
                {
                    this.mESTYPField = value;
                    this.OnPropertyChanged("MESTYP");
                }
            }
        }

        /// <summary>
        /// Message code
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 12)]
        public string MESCOD
        {
            get
            {
                return this.mESCODField;
            }
            set
            {
                if ((this.mESCODField != null))
                {
                    if ((mESCODField.Equals(value) != true))
                    {
                        this.mESCODField = value;
                        this.OnPropertyChanged("MESCOD");
                    }
                }
                else
                {
                    this.mESCODField = value;
                    this.OnPropertyChanged("MESCOD");
                }
            }
        }

        /// <summary>
        /// Message Function
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 13)]
        public string MESFCT
        {
            get
            {
                return this.mESFCTField;
            }
            set
            {
                if ((this.mESFCTField != null))
                {
                    if ((mESFCTField.Equals(value) != true))
                    {
                        this.mESFCTField = value;
                        this.OnPropertyChanged("MESFCT");
                    }
                }
                else
                {
                    this.mESFCTField = value;
                    this.OnPropertyChanged("MESFCT");
                }
            }
        }

        /// <summary>
        /// EDI standard, flag
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 14)]
        public string STD
        {
            get
            {
                return this.sTDField;
            }
            set
            {
                if ((this.sTDField != null))
                {
                    if ((sTDField.Equals(value) != true))
                    {
                        this.sTDField = value;
                        this.OnPropertyChanged("STD");
                    }
                }
                else
                {
                    this.sTDField = value;
                    this.OnPropertyChanged("STD");
                }
            }
        }

        /// <summary>
        /// EDI standard, version and release
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 15)]
        public string STDVRS
        {
            get
            {
                return this.sTDVRSField;
            }
            set
            {
                if ((this.sTDVRSField != null))
                {
                    if ((sTDVRSField.Equals(value) != true))
                    {
                        this.sTDVRSField = value;
                        this.OnPropertyChanged("STDVRS");
                    }
                }
                else
                {
                    this.sTDVRSField = value;
                    this.OnPropertyChanged("STDVRS");
                }
            }
        }

        /// <summary>
        /// EDI message type
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 16)]
        public string STDMES
        {
            get
            {
                return this.sTDMESField;
            }
            set
            {
                if ((this.sTDMESField != null))
                {
                    if ((sTDMESField.Equals(value) != true))
                    {
                        this.sTDMESField = value;
                        this.OnPropertyChanged("STDMES");
                    }
                }
                else
                {
                    this.sTDMESField = value;
                    this.OnPropertyChanged("STDMES");
                }
            }
        }

        /// <summary>
        /// Sender port (SAP System, external subsystem)
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 17)]
        public string SNDPOR
        {
            get
            {
                return this.sNDPORField;
            }
            set
            {
                if ((this.sNDPORField != null))
                {
                    if ((sNDPORField.Equals(value) != true))
                    {
                        this.sNDPORField = value;
                        this.OnPropertyChanged("SNDPOR");
                    }
                }
                else
                {
                    this.sNDPORField = value;
                    this.OnPropertyChanged("SNDPOR");
                }
            }
        }

        /// <summary>
        /// Partner type of sender
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 18)]
        public string SNDPRT
        {
            get
            {
                return this.sNDPRTField;
            }
            set
            {
                if ((this.sNDPRTField != null))
                {
                    if ((sNDPRTField.Equals(value) != true))
                    {
                        this.sNDPRTField = value;
                        this.OnPropertyChanged("SNDPRT");
                    }
                }
                else
                {
                    this.sNDPRTField = value;
                    this.OnPropertyChanged("SNDPRT");
                }
            }
        }

        /// <summary>
        /// Partner Function of Sender
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 19)]
        public string SNDPFC
        {
            get
            {
                return this.sNDPFCField;
            }
            set
            {
                if ((this.sNDPFCField != null))
                {
                    if ((sNDPFCField.Equals(value) != true))
                    {
                        this.sNDPFCField = value;
                        this.OnPropertyChanged("SNDPFC");
                    }
                }
                else
                {
                    this.sNDPFCField = value;
                    this.OnPropertyChanged("SNDPFC");
                }
            }
        }

        /// <summary>
        /// Partner Number of Sender
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 20)]
        public string SNDPRN
        {
            get
            {
                return this.sNDPRNField;
            }
            set
            {
                if ((this.sNDPRNField != null))
                {
                    if ((sNDPRNField.Equals(value) != true))
                    {
                        this.sNDPRNField = value;
                        this.OnPropertyChanged("SNDPRN");
                    }
                }
                else
                {
                    this.sNDPRNField = value;
                    this.OnPropertyChanged("SNDPRN");
                }
            }
        }

        /// <summary>
        /// Sender address (SADR)
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 21)]
        public string SNDSAD
        {
            get
            {
                return this.sNDSADField;
            }
            set
            {
                if ((this.sNDSADField != null))
                {
                    if ((sNDSADField.Equals(value) != true))
                    {
                        this.sNDSADField = value;
                        this.OnPropertyChanged("SNDSAD");
                    }
                }
                else
                {
                    this.sNDSADField = value;
                    this.OnPropertyChanged("SNDSAD");
                }
            }
        }

        /// <summary>
        /// Logical address of sender
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 22)]
        public string SNDLAD
        {
            get
            {
                return this.sNDLADField;
            }
            set
            {
                if ((this.sNDLADField != null))
                {
                    if ((sNDLADField.Equals(value) != true))
                    {
                        this.sNDLADField = value;
                        this.OnPropertyChanged("SNDLAD");
                    }
                }
                else
                {
                    this.sNDLADField = value;
                    this.OnPropertyChanged("SNDLAD");
                }
            }
        }

        /// <summary>
        /// Receiver port
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 23)]
        public string RCVPOR
        {
            get
            {
                return this.rCVPORField;
            }
            set
            {
                if ((this.rCVPORField != null))
                {
                    if ((rCVPORField.Equals(value) != true))
                    {
                        this.rCVPORField = value;
                        this.OnPropertyChanged("RCVPOR");
                    }
                }
                else
                {
                    this.rCVPORField = value;
                    this.OnPropertyChanged("RCVPOR");
                }
            }
        }

        /// <summary>
        /// Partner Type of Receiver
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 24)]
        public string RCVPRT
        {
            get
            {
                return this.rCVPRTField;
            }
            set
            {
                if ((this.rCVPRTField != null))
                {
                    if ((rCVPRTField.Equals(value) != true))
                    {
                        this.rCVPRTField = value;
                        this.OnPropertyChanged("RCVPRT");
                    }
                }
                else
                {
                    this.rCVPRTField = value;
                    this.OnPropertyChanged("RCVPRT");
                }
            }
        }

        /// <summary>
        /// Partner function of recipient
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 25)]
        public string RCVPFC
        {
            get
            {
                return this.rCVPFCField;
            }
            set
            {
                if ((this.rCVPFCField != null))
                {
                    if ((rCVPFCField.Equals(value) != true))
                    {
                        this.rCVPFCField = value;
                        this.OnPropertyChanged("RCVPFC");
                    }
                }
                else
                {
                    this.rCVPFCField = value;
                    this.OnPropertyChanged("RCVPFC");
                }
            }
        }

        /// <summary>
        /// Partner Number of Receiver
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 26)]
        public string RCVPRN
        {
            get
            {
                return this.rCVPRNField;
            }
            set
            {
                if ((this.rCVPRNField != null))
                {
                    if ((rCVPRNField.Equals(value) != true))
                    {
                        this.rCVPRNField = value;
                        this.OnPropertyChanged("RCVPRN");
                    }
                }
                else
                {
                    this.rCVPRNField = value;
                    this.OnPropertyChanged("RCVPRN");
                }
            }
        }

        /// <summary>
        /// Recipient address (SADR)
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 27)]
        public string RCVSAD
        {
            get
            {
                return this.rCVSADField;
            }
            set
            {
                if ((this.rCVSADField != null))
                {
                    if ((rCVSADField.Equals(value) != true))
                    {
                        this.rCVSADField = value;
                        this.OnPropertyChanged("RCVSAD");
                    }
                }
                else
                {
                    this.rCVSADField = value;
                    this.OnPropertyChanged("RCVSAD");
                }
            }
        }

        /// <summary>
        /// Logical address of recipient
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 28)]
        public string RCVLAD
        {
            get
            {
                return this.rCVLADField;
            }
            set
            {
                if ((this.rCVLADField != null))
                {
                    if ((rCVLADField.Equals(value) != true))
                    {
                        this.rCVLADField = value;
                        this.OnPropertyChanged("RCVLAD");
                    }
                }
                else
                {
                    this.rCVLADField = value;
                    this.OnPropertyChanged("RCVLAD");
                }
            }
        }

        /// <summary>
        /// Created on
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 29)]
        public string CREDAT
        {
            get
            {
                return this.cREDATField;
            }
            set
            {
                if ((this.cREDATField != null))
                {
                    if ((cREDATField.Equals(value) != true))
                    {
                        this.cREDATField = value;
                        this.OnPropertyChanged("CREDAT");
                    }
                }
                else
                {
                    this.cREDATField = value;
                    this.OnPropertyChanged("CREDAT");
                }
            }
        }

        /// <summary>
        /// Created at
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 30)]
        public string CRETIM
        {
            get
            {
                return this.cRETIMField;
            }
            set
            {
                if ((this.cRETIMField != null))
                {
                    if ((cRETIMField.Equals(value) != true))
                    {
                        this.cRETIMField = value;
                        this.OnPropertyChanged("CRETIM");
                    }
                }
                else
                {
                    this.cRETIMField = value;
                    this.OnPropertyChanged("CRETIM");
                }
            }
        }

        /// <summary>
        /// Transmission file (EDI Interchange)
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 31)]
        public string REFINT
        {
            get
            {
                return this.rEFINTField;
            }
            set
            {
                if ((this.rEFINTField != null))
                {
                    if ((rEFINTField.Equals(value) != true))
                    {
                        this.rEFINTField = value;
                        this.OnPropertyChanged("REFINT");
                    }
                }
                else
                {
                    this.rEFINTField = value;
                    this.OnPropertyChanged("REFINT");
                }
            }
        }

        /// <summary>
        /// Message group (EDI Message Group)
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 32)]
        public string REFGRP
        {
            get
            {
                return this.rEFGRPField;
            }
            set
            {
                if ((this.rEFGRPField != null))
                {
                    if ((rEFGRPField.Equals(value) != true))
                    {
                        this.rEFGRPField = value;
                        this.OnPropertyChanged("REFGRP");
                    }
                }
                else
                {
                    this.rEFGRPField = value;
                    this.OnPropertyChanged("REFGRP");
                }
            }
        }

        /// <summary>
        /// Message (EDI Message)
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 33)]
        public string REFMES
        {
            get
            {
                return this.rEFMESField;
            }
            set
            {
                if ((this.rEFMESField != null))
                {
                    if ((rEFMESField.Equals(value) != true))
                    {
                        this.rEFMESField = value;
                        this.OnPropertyChanged("REFMES");
                    }
                }
                else
                {
                    this.rEFMESField = value;
                    this.OnPropertyChanged("REFMES");
                }
            }
        }

        /// <summary>
        /// Key for external message archive
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 34)]
        public string ARCKEY
        {
            get
            {
                return this.aRCKEYField;
            }
            set
            {
                if ((this.aRCKEYField != null))
                {
                    if ((aRCKEYField.Equals(value) != true))
                    {
                        this.aRCKEYField = value;
                        this.OnPropertyChanged("ARCKEY");
                    }
                }
                else
                {
                    this.aRCKEYField = value;
                    this.OnPropertyChanged("ARCKEY");
                }
            }
        }

        /// <summary>
        /// Serialization
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 35)]
        public string SERIAL
        {
            get
            {
                return this.sERIALField;
            }
            set
            {
                if ((this.sERIALField != null))
                {
                    if ((sERIALField.Equals(value) != true))
                    {
                        this.sERIALField = value;
                        this.OnPropertyChanged("SERIAL");
                    }
                }
                else
                {
                    this.sERIALField = value;
                    this.OnPropertyChanged("SERIAL");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public INFREC01IDOCEDI_DC40SEGMENT SEGMENT
        {
            get
            {
                return this.sEGMENTField;
            }
            set
            {
                if ((sEGMENTField.Equals(value) != true))
                {
                    this.sEGMENTField = value;
                    this.OnPropertyChanged("SEGMENT");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(INFREC01IDOCEDI_DC40));
                }
                return serializer;
            }
        }

        [XmlIgnore()]
        public bool TABNAMSpecified
        {
            get
            {
                return tABNAMFieldSpecified;
            }
            set
            {
                tABNAMFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool MANDTSpecified
        {
            get
            {
                return mANDTFieldSpecified;
            }
            set
            {
                mANDTFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool DOCNUMSpecified
        {
            get
            {
                return dOCNUMFieldSpecified;
            }
            set
            {
                dOCNUMFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool DOCRELSpecified
        {
            get
            {
                return dOCRELFieldSpecified;
            }
            set
            {
                dOCRELFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool STATUSSpecified
        {
            get
            {
                return sTATUSFieldSpecified;
            }
            set
            {
                sTATUSFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool DIRECTSpecified
        {
            get
            {
                return dIRECTFieldSpecified;
            }
            set
            {
                dIRECTFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool OUTMODSpecified
        {
            get
            {
                return oUTMODFieldSpecified;
            }
            set
            {
                oUTMODFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool EXPRSSSpecified
        {
            get
            {
                return eXPRSSFieldSpecified;
            }
            set
            {
                eXPRSSFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool TESTSpecified
        {
            get
            {
                return tESTFieldSpecified;
            }
            set
            {
                tESTFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool IDOCTYPSpecified
        {
            get
            {
                return iDOCTYPFieldSpecified;
            }
            set
            {
                iDOCTYPFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool CIMTYPSpecified
        {
            get
            {
                return cIMTYPFieldSpecified;
            }
            set
            {
                cIMTYPFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool MESTYPSpecified
        {
            get
            {
                return mESTYPFieldSpecified;
            }
            set
            {
                mESTYPFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool MESCODSpecified
        {
            get
            {
                return mESCODFieldSpecified;
            }
            set
            {
                mESCODFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool MESFCTSpecified
        {
            get
            {
                return mESFCTFieldSpecified;
            }
            set
            {
                mESFCTFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool STDSpecified
        {
            get
            {
                return sTDFieldSpecified;
            }
            set
            {
                sTDFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool STDVRSSpecified
        {
            get
            {
                return sTDVRSFieldSpecified;
            }
            set
            {
                sTDVRSFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool STDMESSpecified
        {
            get
            {
                return sTDMESFieldSpecified;
            }
            set
            {
                sTDMESFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool SNDPORSpecified
        {
            get
            {
                return sNDPORFieldSpecified;
            }
            set
            {
                sNDPORFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool SNDPRTSpecified
        {
            get
            {
                return sNDPRTFieldSpecified;
            }
            set
            {
                sNDPRTFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool SNDPFCSpecified
        {
            get
            {
                return sNDPFCFieldSpecified;
            }
            set
            {
                sNDPFCFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool SNDPRNSpecified
        {
            get
            {
                return sNDPRNFieldSpecified;
            }
            set
            {
                sNDPRNFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool SNDSADSpecified
        {
            get
            {
                return sNDSADFieldSpecified;
            }
            set
            {
                sNDSADFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool SNDLADSpecified
        {
            get
            {
                return sNDLADFieldSpecified;
            }
            set
            {
                sNDLADFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool RCVPORSpecified
        {
            get
            {
                return rCVPORFieldSpecified;
            }
            set
            {
                rCVPORFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool RCVPRTSpecified
        {
            get
            {
                return rCVPRTFieldSpecified;
            }
            set
            {
                rCVPRTFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool RCVPFCSpecified
        {
            get
            {
                return rCVPFCFieldSpecified;
            }
            set
            {
                rCVPFCFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool RCVPRNSpecified
        {
            get
            {
                return rCVPRNFieldSpecified;
            }
            set
            {
                rCVPRNFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool RCVSADSpecified
        {
            get
            {
                return rCVSADFieldSpecified;
            }
            set
            {
                rCVSADFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool RCVLADSpecified
        {
            get
            {
                return rCVLADFieldSpecified;
            }
            set
            {
                rCVLADFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool CREDATSpecified
        {
            get
            {
                return cREDATFieldSpecified;
            }
            set
            {
                cREDATFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool CRETIMSpecified
        {
            get
            {
                return cRETIMFieldSpecified;
            }
            set
            {
                cRETIMFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool REFINTSpecified
        {
            get
            {
                return rEFINTFieldSpecified;
            }
            set
            {
                rEFINTFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool REFGRPSpecified
        {
            get
            {
                return rEFGRPFieldSpecified;
            }
            set
            {
                rEFGRPFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool REFMESSpecified
        {
            get
            {
                return rEFMESFieldSpecified;
            }
            set
            {
                rEFMESFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool ARCKEYSpecified
        {
            get
            {
                return aRCKEYFieldSpecified;
            }
            set
            {
                aRCKEYFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool SERIALSpecified
        {
            get
            {
                return sERIALFieldSpecified;
            }
            set
            {
                sERIALFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool SEGMENTSpecified
        {
            get
            {
                return sEGMENTFieldSpecified;
            }
            set
            {
                sEGMENTFieldSpecified = value;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current INFREC01IDOCEDI_DC40 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an INFREC01IDOCEDI_DC40 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output INFREC01IDOCEDI_DC40 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out INFREC01IDOCEDI_DC40 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(INFREC01IDOCEDI_DC40);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out INFREC01IDOCEDI_DC40 obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static INFREC01IDOCEDI_DC40 Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((INFREC01IDOCEDI_DC40)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current INFREC01IDOCEDI_DC40 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an INFREC01IDOCEDI_DC40 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output INFREC01IDOCEDI_DC40 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out INFREC01IDOCEDI_DC40 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(INFREC01IDOCEDI_DC40);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out INFREC01IDOCEDI_DC40 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out INFREC01IDOCEDI_DC40 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static INFREC01IDOCEDI_DC40 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static INFREC01IDOCEDI_DC40 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum INFREC01IDOCEDI_DC40DIRECT
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum INFREC01IDOCEDI_DC40SEGMENT
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
    }

    /// <summary>
    /// Purchasing Info Record: General Data
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class INFREC01IDOCE1EINAM : System.ComponentModel.INotifyPropertyChanged
    {

        private string mSGFNField;

        private string iNFNRField;

        private string mATNRField;

        private string mATKLField;

        private string lIFNRField;

        private string lOEKZField;

        private string eRDATField;

        private string eRNAMField;

        private string tXZ01Field;

        private string sORTLField;

        private string mEINSField;

        private string uMREZField;

        private string uMRENField;

        private string iDNLFField;

        private string vERKFField;

        private string tELF1Field;

        private string mAHN1Field;

        private string mAHN2Field;

        private string mAHN3Field;

        private string uRZNRField;

        private string uRZDTField;

        private string uRZLAField;

        private string uRZTPField;

        private string uRZZTField;

        private string lMEINField;

        private string rEGIOField;

        private string vABMEField;

        private string lTSNRField;

        private string lTSSFField;

        private string wGLIFField;

        private string rUECKField;

        private string lIFABField;

        private string lIFBIField;

        private string kOLIFField;

        private string aNZPUField;

        private string pUNEIField;

        private string rELIFField;

        private string kDMAT35Field;

        private string mATNR_EXTERNALField;

        private string mATNR_VERSIONField;

        private string mATNR_GUIDField;

        private string mFRNRField;

        private string iDNLF_EXTERNALField;

        private string iDNLF_VERSIONField;

        private string iDNLF_GUIDField;

        private string kDMAT35_EXTERNALField;

        private string kDMAT35_VERSIONField;

        private string kDMAT35_GUIDField;

        private List<INFREC01IDOCE1EINAME1EALTH> e1EALTHField;

        private List<INFREC01IDOCE1EINAME1EINEM> e1EINEMField;

        private INFREC01IDOCE1EINAMSEGMENT sEGMENTField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        private bool mSGFNFieldSpecified;

        private bool iNFNRFieldSpecified;

        private bool mATNRFieldSpecified;

        private bool mATKLFieldSpecified;

        private bool lIFNRFieldSpecified;

        private bool lOEKZFieldSpecified;

        private bool eRDATFieldSpecified;

        private bool eRNAMFieldSpecified;

        private bool tXZ01FieldSpecified;

        private bool sORTLFieldSpecified;

        private bool mEINSFieldSpecified;

        private bool uMREZFieldSpecified;

        private bool uMRENFieldSpecified;

        private bool iDNLFFieldSpecified;

        private bool vERKFFieldSpecified;

        private bool tELF1FieldSpecified;

        private bool mAHN1FieldSpecified;

        private bool mAHN2FieldSpecified;

        private bool mAHN3FieldSpecified;

        private bool uRZNRFieldSpecified;

        private bool uRZDTFieldSpecified;

        private bool uRZLAFieldSpecified;

        private bool uRZTPFieldSpecified;

        private bool uRZZTFieldSpecified;

        private bool lMEINFieldSpecified;

        private bool rEGIOFieldSpecified;

        private bool vABMEFieldSpecified;

        private bool lTSNRFieldSpecified;

        private bool lTSSFFieldSpecified;

        private bool wGLIFFieldSpecified;

        private bool rUECKFieldSpecified;

        private bool lIFABFieldSpecified;

        private bool lIFBIFieldSpecified;

        private bool kOLIFFieldSpecified;

        private bool aNZPUFieldSpecified;

        private bool pUNEIFieldSpecified;

        private bool rELIFFieldSpecified;

        private bool kDMAT35FieldSpecified;

        private bool mATNR_EXTERNALFieldSpecified;

        private bool mATNR_VERSIONFieldSpecified;

        private bool mATNR_GUIDFieldSpecified;

        private bool mFRNRFieldSpecified;

        private bool iDNLF_EXTERNALFieldSpecified;

        private bool iDNLF_VERSIONFieldSpecified;

        private bool iDNLF_GUIDFieldSpecified;

        private bool kDMAT35_EXTERNALFieldSpecified;

        private bool kDMAT35_VERSIONFieldSpecified;

        private bool kDMAT35_GUIDFieldSpecified;

        private bool e1EALTHFieldSpecified;

        private bool e1EINEMFieldSpecified;

        private bool sEGMENTFieldSpecified;

        /// <summary>
        /// INFREC01IDOCE1EINAM class constructor
        /// </summary>
        public INFREC01IDOCE1EINAM()
        {
            this.e1EINEMField = new List<INFREC01IDOCE1EINAME1EINEM>();
            this.e1EALTHField = new List<INFREC01IDOCE1EINAME1EALTH>();
        }

        /// <summary>
        /// Function
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 0)]
        public string MSGFN
        {
            get
            {
                return this.mSGFNField;
            }
            set
            {
                if ((this.mSGFNField != null))
                {
                    if ((mSGFNField.Equals(value) != true))
                    {
                        this.mSGFNField = value;
                        this.OnPropertyChanged("MSGFN");
                    }
                }
                else
                {
                    this.mSGFNField = value;
                    this.OnPropertyChanged("MSGFN");
                }
            }
        }

        /// <summary>
        /// Number of Purchasing Info Record
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 1)]
        public string INFNR
        {
            get
            {
                return this.iNFNRField;
            }
            set
            {
                if ((this.iNFNRField != null))
                {
                    if ((iNFNRField.Equals(value) != true))
                    {
                        this.iNFNRField = value;
                        this.OnPropertyChanged("INFNR");
                    }
                }
                else
                {
                    this.iNFNRField = value;
                    this.OnPropertyChanged("INFNR");
                }
            }
        }

        /// <summary>
        /// Material Number
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 2)]
        public string MATNR
        {
            get
            {
                return this.mATNRField;
            }
            set
            {
                if ((this.mATNRField != null))
                {
                    if ((mATNRField.Equals(value) != true))
                    {
                        this.mATNRField = value;
                        this.OnPropertyChanged("MATNR");
                    }
                }
                else
                {
                    this.mATNRField = value;
                    this.OnPropertyChanged("MATNR");
                }
            }
        }

        /// <summary>
        /// Material Group
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 3)]
        public string MATKL
        {
            get
            {
                return this.mATKLField;
            }
            set
            {
                if ((this.mATKLField != null))
                {
                    if ((mATKLField.Equals(value) != true))
                    {
                        this.mATKLField = value;
                        this.OnPropertyChanged("MATKL");
                    }
                }
                else
                {
                    this.mATKLField = value;
                    this.OnPropertyChanged("MATKL");
                }
            }
        }

        /// <summary>
        /// Vendor Account Number
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 4)]
        public string LIFNR
        {
            get
            {
                return this.lIFNRField;
            }
            set
            {
                if ((this.lIFNRField != null))
                {
                    if ((lIFNRField.Equals(value) != true))
                    {
                        this.lIFNRField = value;
                        this.OnPropertyChanged("LIFNR");
                    }
                }
                else
                {
                    this.lIFNRField = value;
                    this.OnPropertyChanged("LIFNR");
                }
            }
        }

        /// <summary>
        /// Purchasing info: General data flagged for deletion
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 5)]
        public string LOEKZ
        {
            get
            {
                return this.lOEKZField;
            }
            set
            {
                if ((this.lOEKZField != null))
                {
                    if ((lOEKZField.Equals(value) != true))
                    {
                        this.lOEKZField = value;
                        this.OnPropertyChanged("LOEKZ");
                    }
                }
                else
                {
                    this.lOEKZField = value;
                    this.OnPropertyChanged("LOEKZ");
                }
            }
        }

        /// <summary>
        /// Date on Which Record Was Created
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 6)]
        public string ERDAT
        {
            get
            {
                return this.eRDATField;
            }
            set
            {
                if ((this.eRDATField != null))
                {
                    if ((eRDATField.Equals(value) != true))
                    {
                        this.eRDATField = value;
                        this.OnPropertyChanged("ERDAT");
                    }
                }
                else
                {
                    this.eRDATField = value;
                    this.OnPropertyChanged("ERDAT");
                }
            }
        }

        /// <summary>
        /// Name of Person who Created the Object
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 7)]
        public string ERNAM
        {
            get
            {
                return this.eRNAMField;
            }
            set
            {
                if ((this.eRNAMField != null))
                {
                    if ((eRNAMField.Equals(value) != true))
                    {
                        this.eRNAMField = value;
                        this.OnPropertyChanged("ERNAM");
                    }
                }
                else
                {
                    this.eRNAMField = value;
                    this.OnPropertyChanged("ERNAM");
                }
            }
        }

        /// <summary>
        /// Short Text for Purchasing Info Record
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 8)]
        public string TXZ01
        {
            get
            {
                return this.tXZ01Field;
            }
            set
            {
                if ((this.tXZ01Field != null))
                {
                    if ((tXZ01Field.Equals(value) != true))
                    {
                        this.tXZ01Field = value;
                        this.OnPropertyChanged("TXZ01");
                    }
                }
                else
                {
                    this.tXZ01Field = value;
                    this.OnPropertyChanged("TXZ01");
                }
            }
        }

        /// <summary>
        /// Sort Term for Non-Stock Info Records
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 9)]
        public string SORTL
        {
            get
            {
                return this.sORTLField;
            }
            set
            {
                if ((this.sORTLField != null))
                {
                    if ((sORTLField.Equals(value) != true))
                    {
                        this.sORTLField = value;
                        this.OnPropertyChanged("SORTL");
                    }
                }
                else
                {
                    this.sORTLField = value;
                    this.OnPropertyChanged("SORTL");
                }
            }
        }

        /// <summary>
        /// Purchase Order Unit of Measure
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 10)]
        public string MEINS
        {
            get
            {
                return this.mEINSField;
            }
            set
            {
                if ((this.mEINSField != null))
                {
                    if ((mEINSField.Equals(value) != true))
                    {
                        this.mEINSField = value;
                        this.OnPropertyChanged("MEINS");
                    }
                }
                else
                {
                    this.mEINSField = value;
                    this.OnPropertyChanged("MEINS");
                }
            }
        }

        /// <summary>
        /// Numerator for Conversion of Order Unit to Base Unit
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 11)]
        public string UMREZ
        {
            get
            {
                return this.uMREZField;
            }
            set
            {
                if ((this.uMREZField != null))
                {
                    if ((uMREZField.Equals(value) != true))
                    {
                        this.uMREZField = value;
                        this.OnPropertyChanged("UMREZ");
                    }
                }
                else
                {
                    this.uMREZField = value;
                    this.OnPropertyChanged("UMREZ");
                }
            }
        }

        /// <summary>
        /// Denominator for Conversion of Order Unit to Base Unit
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 12)]
        public string UMREN
        {
            get
            {
                return this.uMRENField;
            }
            set
            {
                if ((this.uMRENField != null))
                {
                    if ((uMRENField.Equals(value) != true))
                    {
                        this.uMRENField = value;
                        this.OnPropertyChanged("UMREN");
                    }
                }
                else
                {
                    this.uMRENField = value;
                    this.OnPropertyChanged("UMREN");
                }
            }
        }

        /// <summary>
        /// Material number used by vendor
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 13)]
        public string IDNLF
        {
            get
            {
                return this.iDNLFField;
            }
            set
            {
                if ((this.iDNLFField != null))
                {
                    if ((iDNLFField.Equals(value) != true))
                    {
                        this.iDNLFField = value;
                        this.OnPropertyChanged("IDNLF");
                    }
                }
                else
                {
                    this.iDNLFField = value;
                    this.OnPropertyChanged("IDNLF");
                }
            }
        }

        /// <summary>
        /// Salesperson Responsible in the Event of Queries
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 14)]
        public string VERKF
        {
            get
            {
                return this.vERKFField;
            }
            set
            {
                if ((this.vERKFField != null))
                {
                    if ((vERKFField.Equals(value) != true))
                    {
                        this.vERKFField = value;
                        this.OnPropertyChanged("VERKF");
                    }
                }
                else
                {
                    this.vERKFField = value;
                    this.OnPropertyChanged("VERKF");
                }
            }
        }

        /// <summary>
        /// Vendor's Telephone Number
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 15)]
        public string TELF1
        {
            get
            {
                return this.tELF1Field;
            }
            set
            {
                if ((this.tELF1Field != null))
                {
                    if ((tELF1Field.Equals(value) != true))
                    {
                        this.tELF1Field = value;
                        this.OnPropertyChanged("TELF1");
                    }
                }
                else
                {
                    this.tELF1Field = value;
                    this.OnPropertyChanged("TELF1");
                }
            }
        }

        /// <summary>
        /// Number of Days for First Reminder/Expediter
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 16)]
        public string MAHN1
        {
            get
            {
                return this.mAHN1Field;
            }
            set
            {
                if ((this.mAHN1Field != null))
                {
                    if ((mAHN1Field.Equals(value) != true))
                    {
                        this.mAHN1Field = value;
                        this.OnPropertyChanged("MAHN1");
                    }
                }
                else
                {
                    this.mAHN1Field = value;
                    this.OnPropertyChanged("MAHN1");
                }
            }
        }

        /// <summary>
        /// Number of Days for Second Reminder/Expediter
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 17)]
        public string MAHN2
        {
            get
            {
                return this.mAHN2Field;
            }
            set
            {
                if ((this.mAHN2Field != null))
                {
                    if ((mAHN2Field.Equals(value) != true))
                    {
                        this.mAHN2Field = value;
                        this.OnPropertyChanged("MAHN2");
                    }
                }
                else
                {
                    this.mAHN2Field = value;
                    this.OnPropertyChanged("MAHN2");
                }
            }
        }

        /// <summary>
        /// Number of Days for Third Reminder/Expediter
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 18)]
        public string MAHN3
        {
            get
            {
                return this.mAHN3Field;
            }
            set
            {
                if ((this.mAHN3Field != null))
                {
                    if ((mAHN3Field.Equals(value) != true))
                    {
                        this.mAHN3Field = value;
                        this.OnPropertyChanged("MAHN3");
                    }
                }
                else
                {
                    this.mAHN3Field = value;
                    this.OnPropertyChanged("MAHN3");
                }
            }
        }

        /// <summary>
        /// Certificate Number
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 19)]
        public string URZNR
        {
            get
            {
                return this.uRZNRField;
            }
            set
            {
                if ((this.uRZNRField != null))
                {
                    if ((uRZNRField.Equals(value) != true))
                    {
                        this.uRZNRField = value;
                        this.OnPropertyChanged("URZNR");
                    }
                }
                else
                {
                    this.uRZNRField = value;
                    this.OnPropertyChanged("URZNR");
                }
            }
        }

        /// <summary>
        /// Certificate of Origin Valid Until
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 20)]
        public string URZDT
        {
            get
            {
                return this.uRZDTField;
            }
            set
            {
                if ((this.uRZDTField != null))
                {
                    if ((uRZDTField.Equals(value) != true))
                    {
                        this.uRZDTField = value;
                        this.OnPropertyChanged("URZDT");
                    }
                }
                else
                {
                    this.uRZDTField = value;
                    this.OnPropertyChanged("URZDT");
                }
            }
        }

        /// <summary>
        /// Country of Issue of Certificate of Origin
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 21)]
        public string URZLA
        {
            get
            {
                return this.uRZLAField;
            }
            set
            {
                if ((this.uRZLAField != null))
                {
                    if ((uRZLAField.Equals(value) != true))
                    {
                        this.uRZLAField = value;
                        this.OnPropertyChanged("URZLA");
                    }
                }
                else
                {
                    this.uRZLAField = value;
                    this.OnPropertyChanged("URZLA");
                }
            }
        }

        /// <summary>
        /// Certificate Category
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 22)]
        public string URZTP
        {
            get
            {
                return this.uRZTPField;
            }
            set
            {
                if ((this.uRZTPField != null))
                {
                    if ((uRZTPField.Equals(value) != true))
                    {
                        this.uRZTPField = value;
                        this.OnPropertyChanged("URZTP");
                    }
                }
                else
                {
                    this.uRZTPField = value;
                    this.OnPropertyChanged("URZTP");
                }
            }
        }

        /// <summary>
        /// Number
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 23)]
        public string URZZT
        {
            get
            {
                return this.uRZZTField;
            }
            set
            {
                if ((this.uRZZTField != null))
                {
                    if ((uRZZTField.Equals(value) != true))
                    {
                        this.uRZZTField = value;
                        this.OnPropertyChanged("URZZT");
                    }
                }
                else
                {
                    this.uRZZTField = value;
                    this.OnPropertyChanged("URZZT");
                }
            }
        }

        /// <summary>
        /// Base Unit of Measure
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 24)]
        public string LMEIN
        {
            get
            {
                return this.lMEINField;
            }
            set
            {
                if ((this.lMEINField != null))
                {
                    if ((lMEINField.Equals(value) != true))
                    {
                        this.lMEINField = value;
                        this.OnPropertyChanged("LMEIN");
                    }
                }
                else
                {
                    this.lMEINField = value;
                    this.OnPropertyChanged("LMEIN");
                }
            }
        }

        /// <summary>
        /// Region (State, Province, County)
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 25)]
        public string REGIO
        {
            get
            {
                return this.rEGIOField;
            }
            set
            {
                if ((this.rEGIOField != null))
                {
                    if ((rEGIOField.Equals(value) != true))
                    {
                        this.rEGIOField = value;
                        this.OnPropertyChanged("REGIO");
                    }
                }
                else
                {
                    this.rEGIOField = value;
                    this.OnPropertyChanged("REGIO");
                }
            }
        }

        /// <summary>
        /// Variable Purchase Order Unit Active
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 26)]
        public string VABME
        {
            get
            {
                return this.vABMEField;
            }
            set
            {
                if ((this.vABMEField != null))
                {
                    if ((vABMEField.Equals(value) != true))
                    {
                        this.vABMEField = value;
                        this.OnPropertyChanged("VABME");
                    }
                }
                else
                {
                    this.vABMEField = value;
                    this.OnPropertyChanged("VABME");
                }
            }
        }

        /// <summary>
        /// Vendor Subrange
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 27)]
        public string LTSNR
        {
            get
            {
                return this.lTSNRField;
            }
            set
            {
                if ((this.lTSNRField != null))
                {
                    if ((lTSNRField.Equals(value) != true))
                    {
                        this.lTSNRField = value;
                        this.OnPropertyChanged("LTSNR");
                    }
                }
                else
                {
                    this.lTSNRField = value;
                    this.OnPropertyChanged("LTSNR");
                }
            }
        }

        /// <summary>
        /// Sort Sequence Number
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 28)]
        public string LTSSF
        {
            get
            {
                return this.lTSSFField;
            }
            set
            {
                if ((this.lTSSFField != null))
                {
                    if ((lTSSFField.Equals(value) != true))
                    {
                        this.lTSSFField = value;
                        this.OnPropertyChanged("LTSSF");
                    }
                }
                else
                {
                    this.lTSSFField = value;
                    this.OnPropertyChanged("LTSSF");
                }
            }
        }

        /// <summary>
        /// Vendor Material Group
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 29)]
        public string WGLIF
        {
            get
            {
                return this.wGLIFField;
            }
            set
            {
                if ((this.wGLIFField != null))
                {
                    if ((wGLIFField.Equals(value) != true))
                    {
                        this.wGLIFField = value;
                        this.OnPropertyChanged("WGLIF");
                    }
                }
                else
                {
                    this.wGLIFField = value;
                    this.OnPropertyChanged("WGLIF");
                }
            }
        }

        /// <summary>
        /// Return Agreement
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 30)]
        public string RUECK
        {
            get
            {
                return this.rUECKField;
            }
            set
            {
                if ((this.rUECKField != null))
                {
                    if ((rUECKField.Equals(value) != true))
                    {
                        this.rUECKField = value;
                        this.OnPropertyChanged("RUECK");
                    }
                }
                else
                {
                    this.rUECKField = value;
                    this.OnPropertyChanged("RUECK");
                }
            }
        }

        /// <summary>
        /// Available (Deliverable) From
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 31)]
        public string LIFAB
        {
            get
            {
                return this.lIFABField;
            }
            set
            {
                if ((this.lIFABField != null))
                {
                    if ((lIFABField.Equals(value) != true))
                    {
                        this.lIFABField = value;
                        this.OnPropertyChanged("LIFAB");
                    }
                }
                else
                {
                    this.lIFABField = value;
                    this.OnPropertyChanged("LIFAB");
                }
            }
        }

        /// <summary>
        /// Available (Deliverable) Until
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 32)]
        public string LIFBI
        {
            get
            {
                return this.lIFBIField;
            }
            set
            {
                if ((this.lIFBIField != null))
                {
                    if ((lIFBIField.Equals(value) != true))
                    {
                        this.lIFBIField = value;
                        this.OnPropertyChanged("LIFBI");
                    }
                }
                else
                {
                    this.lIFBIField = value;
                    this.OnPropertyChanged("LIFBI");
                }
            }
        }

        /// <summary>
        /// Prior Vendor
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 33)]
        public string KOLIF
        {
            get
            {
                return this.kOLIFField;
            }
            set
            {
                if ((this.kOLIFField != null))
                {
                    if ((kOLIFField.Equals(value) != true))
                    {
                        this.kOLIFField = value;
                        this.OnPropertyChanged("KOLIF");
                    }
                }
                else
                {
                    this.kOLIFField = value;
                    this.OnPropertyChanged("KOLIF");
                }
            }
        }

        /// <summary>
        /// Number of Points
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 34)]
        public string ANZPU
        {
            get
            {
                return this.aNZPUField;
            }
            set
            {
                if ((this.aNZPUField != null))
                {
                    if ((aNZPUField.Equals(value) != true))
                    {
                        this.aNZPUField = value;
                        this.OnPropertyChanged("ANZPU");
                    }
                }
                else
                {
                    this.aNZPUField = value;
                    this.OnPropertyChanged("ANZPU");
                }
            }
        }

        /// <summary>
        /// Points unit
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 35)]
        public string PUNEI
        {
            get
            {
                return this.pUNEIField;
            }
            set
            {
                if ((this.pUNEIField != null))
                {
                    if ((pUNEIField.Equals(value) != true))
                    {
                        this.pUNEIField = value;
                        this.OnPropertyChanged("PUNEI");
                    }
                }
                else
                {
                    this.pUNEIField = value;
                    this.OnPropertyChanged("PUNEI");
                }
            }
        }

        /// <summary>
        /// Regular Vendor
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 36)]
        public string RELIF
        {
            get
            {
                return this.rELIFField;
            }
            set
            {
                if ((this.rELIFField != null))
                {
                    if ((rELIFField.Equals(value) != true))
                    {
                        this.rELIFField = value;
                        this.OnPropertyChanged("RELIF");
                    }
                }
                else
                {
                    this.rELIFField = value;
                    this.OnPropertyChanged("RELIF");
                }
            }
        }

        /// <summary>
        /// Material Number Used by Vendor
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 37)]
        public string KDMAT35
        {
            get
            {
                return this.kDMAT35Field;
            }
            set
            {
                if ((this.kDMAT35Field != null))
                {
                    if ((kDMAT35Field.Equals(value) != true))
                    {
                        this.kDMAT35Field = value;
                        this.OnPropertyChanged("KDMAT35");
                    }
                }
                else
                {
                    this.kDMAT35Field = value;
                    this.OnPropertyChanged("KDMAT35");
                }
            }
        }

        /// <summary>
        /// Material Number
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 38)]
        public string MATNR_EXTERNAL
        {
            get
            {
                return this.mATNR_EXTERNALField;
            }
            set
            {
                if ((this.mATNR_EXTERNALField != null))
                {
                    if ((mATNR_EXTERNALField.Equals(value) != true))
                    {
                        this.mATNR_EXTERNALField = value;
                        this.OnPropertyChanged("MATNR_EXTERNAL");
                    }
                }
                else
                {
                    this.mATNR_EXTERNALField = value;
                    this.OnPropertyChanged("MATNR_EXTERNAL");
                }
            }
        }

        /// <summary>
        /// Version Number for MATNR Field
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 39)]
        public string MATNR_VERSION
        {
            get
            {
                return this.mATNR_VERSIONField;
            }
            set
            {
                if ((this.mATNR_VERSIONField != null))
                {
                    if ((mATNR_VERSIONField.Equals(value) != true))
                    {
                        this.mATNR_VERSIONField = value;
                        this.OnPropertyChanged("MATNR_VERSION");
                    }
                }
                else
                {
                    this.mATNR_VERSIONField = value;
                    this.OnPropertyChanged("MATNR_VERSION");
                }
            }
        }

        /// <summary>
        /// External GUID for MATNR Field
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 40)]
        public string MATNR_GUID
        {
            get
            {
                return this.mATNR_GUIDField;
            }
            set
            {
                if ((this.mATNR_GUIDField != null))
                {
                    if ((mATNR_GUIDField.Equals(value) != true))
                    {
                        this.mATNR_GUIDField = value;
                        this.OnPropertyChanged("MATNR_GUID");
                    }
                }
                else
                {
                    this.mATNR_GUIDField = value;
                    this.OnPropertyChanged("MATNR_GUID");
                }
            }
        }

        /// <summary>
        /// Number of a Manufacturer
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 41)]
        public string MFRNR
        {
            get
            {
                return this.mFRNRField;
            }
            set
            {
                if ((this.mFRNRField != null))
                {
                    if ((mFRNRField.Equals(value) != true))
                    {
                        this.mFRNRField = value;
                        this.OnPropertyChanged("MFRNR");
                    }
                }
                else
                {
                    this.mFRNRField = value;
                    this.OnPropertyChanged("MFRNR");
                }
            }
        }

        /// <summary>
        /// Material Number Used by Vendor
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 42)]
        public string IDNLF_EXTERNAL
        {
            get
            {
                return this.iDNLF_EXTERNALField;
            }
            set
            {
                if ((this.iDNLF_EXTERNALField != null))
                {
                    if ((iDNLF_EXTERNALField.Equals(value) != true))
                    {
                        this.iDNLF_EXTERNALField = value;
                        this.OnPropertyChanged("IDNLF_EXTERNAL");
                    }
                }
                else
                {
                    this.iDNLF_EXTERNALField = value;
                    this.OnPropertyChanged("IDNLF_EXTERNAL");
                }
            }
        }

        /// <summary>
        /// Material Number Used by Vendor
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 43)]
        public string IDNLF_VERSION
        {
            get
            {
                return this.iDNLF_VERSIONField;
            }
            set
            {
                if ((this.iDNLF_VERSIONField != null))
                {
                    if ((iDNLF_VERSIONField.Equals(value) != true))
                    {
                        this.iDNLF_VERSIONField = value;
                        this.OnPropertyChanged("IDNLF_VERSION");
                    }
                }
                else
                {
                    this.iDNLF_VERSIONField = value;
                    this.OnPropertyChanged("IDNLF_VERSION");
                }
            }
        }

        /// <summary>
        /// Material Number Used by Vendor
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 44)]
        public string IDNLF_GUID
        {
            get
            {
                return this.iDNLF_GUIDField;
            }
            set
            {
                if ((this.iDNLF_GUIDField != null))
                {
                    if ((iDNLF_GUIDField.Equals(value) != true))
                    {
                        this.iDNLF_GUIDField = value;
                        this.OnPropertyChanged("IDNLF_GUID");
                    }
                }
                else
                {
                    this.iDNLF_GUIDField = value;
                    this.OnPropertyChanged("IDNLF_GUID");
                }
            }
        }

        /// <summary>
        /// Long Material Number (Future Development) for KDMAT Field
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 45)]
        public string KDMAT35_EXTERNAL
        {
            get
            {
                return this.kDMAT35_EXTERNALField;
            }
            set
            {
                if ((this.kDMAT35_EXTERNALField != null))
                {
                    if ((kDMAT35_EXTERNALField.Equals(value) != true))
                    {
                        this.kDMAT35_EXTERNALField = value;
                        this.OnPropertyChanged("KDMAT35_EXTERNAL");
                    }
                }
                else
                {
                    this.kDMAT35_EXTERNALField = value;
                    this.OnPropertyChanged("KDMAT35_EXTERNAL");
                }
            }
        }

        /// <summary>
        /// Version Number (Future Development) for KDMAT35 Field
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 46)]
        public string KDMAT35_VERSION
        {
            get
            {
                return this.kDMAT35_VERSIONField;
            }
            set
            {
                if ((this.kDMAT35_VERSIONField != null))
                {
                    if ((kDMAT35_VERSIONField.Equals(value) != true))
                    {
                        this.kDMAT35_VERSIONField = value;
                        this.OnPropertyChanged("KDMAT35_VERSION");
                    }
                }
                else
                {
                    this.kDMAT35_VERSIONField = value;
                    this.OnPropertyChanged("KDMAT35_VERSION");
                }
            }
        }

        /// <summary>
        /// External GUID (Future Development) for KDMAT35 Field
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 47)]
        public string KDMAT35_GUID
        {
            get
            {
                return this.kDMAT35_GUIDField;
            }
            set
            {
                if ((this.kDMAT35_GUIDField != null))
                {
                    if ((kDMAT35_GUIDField.Equals(value) != true))
                    {
                        this.kDMAT35_GUIDField = value;
                        this.OnPropertyChanged("KDMAT35_GUID");
                    }
                }
                else
                {
                    this.kDMAT35_GUIDField = value;
                    this.OnPropertyChanged("KDMAT35_GUID");
                }
            }
        }

        /// <summary>
        /// Text Identification for Purchasing Info Record: General Data
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("E1EALTH", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 48)]
        public List<INFREC01IDOCE1EINAME1EALTH> E1EALTH
        {
            get
            {
                return this.e1EALTHField;
            }
            set
            {
                if ((this.e1EALTHField != null))
                {
                    if ((e1EALTHField.Equals(value) != true))
                    {
                        this.e1EALTHField = value;
                        this.OnPropertyChanged("E1EALTH");
                    }
                }
                else
                {
                    this.e1EALTHField = value;
                    this.OnPropertyChanged("E1EALTH");
                }
            }
        }

        /// <summary>
        /// Purchasing Info Record: Purchasing Organization Data
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("E1EINEM", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 49)]
        public List<INFREC01IDOCE1EINAME1EINEM> E1EINEM
        {
            get
            {
                return this.e1EINEMField;
            }
            set
            {
                if ((this.e1EINEMField != null))
                {
                    if ((e1EINEMField.Equals(value) != true))
                    {
                        this.e1EINEMField = value;
                        this.OnPropertyChanged("E1EINEM");
                    }
                }
                else
                {
                    this.e1EINEMField = value;
                    this.OnPropertyChanged("E1EINEM");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public INFREC01IDOCE1EINAMSEGMENT SEGMENT
        {
            get
            {
                return this.sEGMENTField;
            }
            set
            {
                if ((sEGMENTField.Equals(value) != true))
                {
                    this.sEGMENTField = value;
                    this.OnPropertyChanged("SEGMENT");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(INFREC01IDOCE1EINAM));
                }
                return serializer;
            }
        }

        [XmlIgnore()]
        public bool MSGFNSpecified
        {
            get
            {
                return mSGFNFieldSpecified;
            }
            set
            {
                mSGFNFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool INFNRSpecified
        {
            get
            {
                return iNFNRFieldSpecified;
            }
            set
            {
                iNFNRFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool MATNRSpecified
        {
            get
            {
                return mATNRFieldSpecified;
            }
            set
            {
                mATNRFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool MATKLSpecified
        {
            get
            {
                return mATKLFieldSpecified;
            }
            set
            {
                mATKLFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool LIFNRSpecified
        {
            get
            {
                return lIFNRFieldSpecified;
            }
            set
            {
                lIFNRFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool LOEKZSpecified
        {
            get
            {
                return lOEKZFieldSpecified;
            }
            set
            {
                lOEKZFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool ERDATSpecified
        {
            get
            {
                return eRDATFieldSpecified;
            }
            set
            {
                eRDATFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool ERNAMSpecified
        {
            get
            {
                return eRNAMFieldSpecified;
            }
            set
            {
                eRNAMFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool TXZ01Specified
        {
            get
            {
                return tXZ01FieldSpecified;
            }
            set
            {
                tXZ01FieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool SORTLSpecified
        {
            get
            {
                return sORTLFieldSpecified;
            }
            set
            {
                sORTLFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool MEINSSpecified
        {
            get
            {
                return mEINSFieldSpecified;
            }
            set
            {
                mEINSFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool UMREZSpecified
        {
            get
            {
                return uMREZFieldSpecified;
            }
            set
            {
                uMREZFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool UMRENSpecified
        {
            get
            {
                return uMRENFieldSpecified;
            }
            set
            {
                uMRENFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool IDNLFSpecified
        {
            get
            {
                return iDNLFFieldSpecified;
            }
            set
            {
                iDNLFFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool VERKFSpecified
        {
            get
            {
                return vERKFFieldSpecified;
            }
            set
            {
                vERKFFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool TELF1Specified
        {
            get
            {
                return tELF1FieldSpecified;
            }
            set
            {
                tELF1FieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool MAHN1Specified
        {
            get
            {
                return mAHN1FieldSpecified;
            }
            set
            {
                mAHN1FieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool MAHN2Specified
        {
            get
            {
                return mAHN2FieldSpecified;
            }
            set
            {
                mAHN2FieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool MAHN3Specified
        {
            get
            {
                return mAHN3FieldSpecified;
            }
            set
            {
                mAHN3FieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool URZNRSpecified
        {
            get
            {
                return uRZNRFieldSpecified;
            }
            set
            {
                uRZNRFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool URZDTSpecified
        {
            get
            {
                return uRZDTFieldSpecified;
            }
            set
            {
                uRZDTFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool URZLASpecified
        {
            get
            {
                return uRZLAFieldSpecified;
            }
            set
            {
                uRZLAFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool URZTPSpecified
        {
            get
            {
                return uRZTPFieldSpecified;
            }
            set
            {
                uRZTPFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool URZZTSpecified
        {
            get
            {
                return uRZZTFieldSpecified;
            }
            set
            {
                uRZZTFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool LMEINSpecified
        {
            get
            {
                return lMEINFieldSpecified;
            }
            set
            {
                lMEINFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool REGIOSpecified
        {
            get
            {
                return rEGIOFieldSpecified;
            }
            set
            {
                rEGIOFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool VABMESpecified
        {
            get
            {
                return vABMEFieldSpecified;
            }
            set
            {
                vABMEFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool LTSNRSpecified
        {
            get
            {
                return lTSNRFieldSpecified;
            }
            set
            {
                lTSNRFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool LTSSFSpecified
        {
            get
            {
                return lTSSFFieldSpecified;
            }
            set
            {
                lTSSFFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool WGLIFSpecified
        {
            get
            {
                return wGLIFFieldSpecified;
            }
            set
            {
                wGLIFFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool RUECKSpecified
        {
            get
            {
                return rUECKFieldSpecified;
            }
            set
            {
                rUECKFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool LIFABSpecified
        {
            get
            {
                return lIFABFieldSpecified;
            }
            set
            {
                lIFABFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool LIFBISpecified
        {
            get
            {
                return lIFBIFieldSpecified;
            }
            set
            {
                lIFBIFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool KOLIFSpecified
        {
            get
            {
                return kOLIFFieldSpecified;
            }
            set
            {
                kOLIFFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool ANZPUSpecified
        {
            get
            {
                return aNZPUFieldSpecified;
            }
            set
            {
                aNZPUFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool PUNEISpecified
        {
            get
            {
                return pUNEIFieldSpecified;
            }
            set
            {
                pUNEIFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool RELIFSpecified
        {
            get
            {
                return rELIFFieldSpecified;
            }
            set
            {
                rELIFFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool KDMAT35Specified
        {
            get
            {
                return kDMAT35FieldSpecified;
            }
            set
            {
                kDMAT35FieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool MATNR_EXTERNALSpecified
        {
            get
            {
                return mATNR_EXTERNALFieldSpecified;
            }
            set
            {
                mATNR_EXTERNALFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool MATNR_VERSIONSpecified
        {
            get
            {
                return mATNR_VERSIONFieldSpecified;
            }
            set
            {
                mATNR_VERSIONFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool MATNR_GUIDSpecified
        {
            get
            {
                return mATNR_GUIDFieldSpecified;
            }
            set
            {
                mATNR_GUIDFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool MFRNRSpecified
        {
            get
            {
                return mFRNRFieldSpecified;
            }
            set
            {
                mFRNRFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool IDNLF_EXTERNALSpecified
        {
            get
            {
                return iDNLF_EXTERNALFieldSpecified;
            }
            set
            {
                iDNLF_EXTERNALFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool IDNLF_VERSIONSpecified
        {
            get
            {
                return iDNLF_VERSIONFieldSpecified;
            }
            set
            {
                iDNLF_VERSIONFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool IDNLF_GUIDSpecified
        {
            get
            {
                return iDNLF_GUIDFieldSpecified;
            }
            set
            {
                iDNLF_GUIDFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool KDMAT35_EXTERNALSpecified
        {
            get
            {
                return kDMAT35_EXTERNALFieldSpecified;
            }
            set
            {
                kDMAT35_EXTERNALFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool KDMAT35_VERSIONSpecified
        {
            get
            {
                return kDMAT35_VERSIONFieldSpecified;
            }
            set
            {
                kDMAT35_VERSIONFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool KDMAT35_GUIDSpecified
        {
            get
            {
                return kDMAT35_GUIDFieldSpecified;
            }
            set
            {
                kDMAT35_GUIDFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool E1EALTHSpecified
        {
            get
            {
                return e1EALTHFieldSpecified;
            }
            set
            {
                e1EALTHFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool E1EINEMSpecified
        {
            get
            {
                return e1EINEMFieldSpecified;
            }
            set
            {
                e1EINEMFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool SEGMENTSpecified
        {
            get
            {
                return sEGMENTFieldSpecified;
            }
            set
            {
                sEGMENTFieldSpecified = value;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current INFREC01IDOCE1EINAM object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an INFREC01IDOCE1EINAM object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output INFREC01IDOCE1EINAM object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out INFREC01IDOCE1EINAM obj, out System.Exception exception)
        {
            exception = null;
            obj = default(INFREC01IDOCE1EINAM);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out INFREC01IDOCE1EINAM obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static INFREC01IDOCE1EINAM Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((INFREC01IDOCE1EINAM)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current INFREC01IDOCE1EINAM object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an INFREC01IDOCE1EINAM object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output INFREC01IDOCE1EINAM object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out INFREC01IDOCE1EINAM obj, out System.Exception exception)
        {
            exception = null;
            obj = default(INFREC01IDOCE1EINAM);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out INFREC01IDOCE1EINAM obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out INFREC01IDOCE1EINAM obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static INFREC01IDOCE1EINAM LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static INFREC01IDOCE1EINAM LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Text Identification for Purchasing Info Record: General Data
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class INFREC01IDOCE1EINAME1EALTH : System.ComponentModel.INotifyPropertyChanged
    {

        private string mSGFNField;

        private string tDOBJECTField;

        private string tDNAMEField;

        private string tDIDField;

        private string tDSPRASField;

        private string tDTEXTTYPEField;

        private List<INFREC01IDOCE1EINAME1EALTHE1EALTL> e1EALTLField;

        private INFREC01IDOCE1EINAME1EALTHSEGMENT sEGMENTField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        private bool mSGFNFieldSpecified;

        private bool tDOBJECTFieldSpecified;

        private bool tDNAMEFieldSpecified;

        private bool tDIDFieldSpecified;

        private bool tDSPRASFieldSpecified;

        private bool tDTEXTTYPEFieldSpecified;

        private bool e1EALTLFieldSpecified;

        private bool sEGMENTFieldSpecified;

        /// <summary>
        /// INFREC01IDOCE1EINAME1EALTH class constructor
        /// </summary>
        public INFREC01IDOCE1EINAME1EALTH()
        {
            this.e1EALTLField = new List<INFREC01IDOCE1EINAME1EALTHE1EALTL>();
        }

        /// <summary>
        /// Function
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 0)]
        public string MSGFN
        {
            get
            {
                return this.mSGFNField;
            }
            set
            {
                if ((this.mSGFNField != null))
                {
                    if ((mSGFNField.Equals(value) != true))
                    {
                        this.mSGFNField = value;
                        this.OnPropertyChanged("MSGFN");
                    }
                }
                else
                {
                    this.mSGFNField = value;
                    this.OnPropertyChanged("MSGFN");
                }
            }
        }

        /// <summary>
        /// Texts: Application Object
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 1)]
        public string TDOBJECT
        {
            get
            {
                return this.tDOBJECTField;
            }
            set
            {
                if ((this.tDOBJECTField != null))
                {
                    if ((tDOBJECTField.Equals(value) != true))
                    {
                        this.tDOBJECTField = value;
                        this.OnPropertyChanged("TDOBJECT");
                    }
                }
                else
                {
                    this.tDOBJECTField = value;
                    this.OnPropertyChanged("TDOBJECT");
                }
            }
        }

        /// <summary>
        /// Name
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 2)]
        public string TDNAME
        {
            get
            {
                return this.tDNAMEField;
            }
            set
            {
                if ((this.tDNAMEField != null))
                {
                    if ((tDNAMEField.Equals(value) != true))
                    {
                        this.tDNAMEField = value;
                        this.OnPropertyChanged("TDNAME");
                    }
                }
                else
                {
                    this.tDNAMEField = value;
                    this.OnPropertyChanged("TDNAME");
                }
            }
        }

        /// <summary>
        /// Text ID
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 3)]
        public string TDID
        {
            get
            {
                return this.tDIDField;
            }
            set
            {
                if ((this.tDIDField != null))
                {
                    if ((tDIDField.Equals(value) != true))
                    {
                        this.tDIDField = value;
                        this.OnPropertyChanged("TDID");
                    }
                }
                else
                {
                    this.tDIDField = value;
                    this.OnPropertyChanged("TDID");
                }
            }
        }

        /// <summary>
        /// Language key
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 4)]
        public string TDSPRAS
        {
            get
            {
                return this.tDSPRASField;
            }
            set
            {
                if ((this.tDSPRASField != null))
                {
                    if ((tDSPRASField.Equals(value) != true))
                    {
                        this.tDSPRASField = value;
                        this.OnPropertyChanged("TDSPRAS");
                    }
                }
                else
                {
                    this.tDSPRASField = value;
                    this.OnPropertyChanged("TDSPRAS");
                }
            }
        }

        /// <summary>
        /// SAPscript: Format of Text
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 5)]
        public string TDTEXTTYPE
        {
            get
            {
                return this.tDTEXTTYPEField;
            }
            set
            {
                if ((this.tDTEXTTYPEField != null))
                {
                    if ((tDTEXTTYPEField.Equals(value) != true))
                    {
                        this.tDTEXTTYPEField = value;
                        this.OnPropertyChanged("TDTEXTTYPE");
                    }
                }
                else
                {
                    this.tDTEXTTYPEField = value;
                    this.OnPropertyChanged("TDTEXTTYPE");
                }
            }
        }

        /// <summary>
        /// Text Line for Purchasing Info Record: General Data
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("E1EALTL", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 6)]
        public List<INFREC01IDOCE1EINAME1EALTHE1EALTL> E1EALTL
        {
            get
            {
                return this.e1EALTLField;
            }
            set
            {
                if ((this.e1EALTLField != null))
                {
                    if ((e1EALTLField.Equals(value) != true))
                    {
                        this.e1EALTLField = value;
                        this.OnPropertyChanged("E1EALTL");
                    }
                }
                else
                {
                    this.e1EALTLField = value;
                    this.OnPropertyChanged("E1EALTL");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public INFREC01IDOCE1EINAME1EALTHSEGMENT SEGMENT
        {
            get
            {
                return this.sEGMENTField;
            }
            set
            {
                if ((sEGMENTField.Equals(value) != true))
                {
                    this.sEGMENTField = value;
                    this.OnPropertyChanged("SEGMENT");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(INFREC01IDOCE1EINAME1EALTH));
                }
                return serializer;
            }
        }

        [XmlIgnore()]
        public bool MSGFNSpecified
        {
            get
            {
                return mSGFNFieldSpecified;
            }
            set
            {
                mSGFNFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool TDOBJECTSpecified
        {
            get
            {
                return tDOBJECTFieldSpecified;
            }
            set
            {
                tDOBJECTFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool TDNAMESpecified
        {
            get
            {
                return tDNAMEFieldSpecified;
            }
            set
            {
                tDNAMEFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool TDIDSpecified
        {
            get
            {
                return tDIDFieldSpecified;
            }
            set
            {
                tDIDFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool TDSPRASSpecified
        {
            get
            {
                return tDSPRASFieldSpecified;
            }
            set
            {
                tDSPRASFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool TDTEXTTYPESpecified
        {
            get
            {
                return tDTEXTTYPEFieldSpecified;
            }
            set
            {
                tDTEXTTYPEFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool E1EALTLSpecified
        {
            get
            {
                return e1EALTLFieldSpecified;
            }
            set
            {
                e1EALTLFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool SEGMENTSpecified
        {
            get
            {
                return sEGMENTFieldSpecified;
            }
            set
            {
                sEGMENTFieldSpecified = value;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current INFREC01IDOCE1EINAME1EALTH object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an INFREC01IDOCE1EINAME1EALTH object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output INFREC01IDOCE1EINAME1EALTH object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out INFREC01IDOCE1EINAME1EALTH obj, out System.Exception exception)
        {
            exception = null;
            obj = default(INFREC01IDOCE1EINAME1EALTH);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out INFREC01IDOCE1EINAME1EALTH obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static INFREC01IDOCE1EINAME1EALTH Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((INFREC01IDOCE1EINAME1EALTH)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current INFREC01IDOCE1EINAME1EALTH object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an INFREC01IDOCE1EINAME1EALTH object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output INFREC01IDOCE1EINAME1EALTH object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out INFREC01IDOCE1EINAME1EALTH obj, out System.Exception exception)
        {
            exception = null;
            obj = default(INFREC01IDOCE1EINAME1EALTH);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out INFREC01IDOCE1EINAME1EALTH obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out INFREC01IDOCE1EINAME1EALTH obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static INFREC01IDOCE1EINAME1EALTH LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static INFREC01IDOCE1EINAME1EALTH LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Text Line for Purchasing Info Record: General Data
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class INFREC01IDOCE1EINAME1EALTHE1EALTL : System.ComponentModel.INotifyPropertyChanged
    {

        private string tDFORMATField;

        private string tDLINEField;

        private INFREC01IDOCE1EINAME1EALTHE1EALTLSEGMENT sEGMENTField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        private bool tDFORMATFieldSpecified;

        private bool tDLINEFieldSpecified;

        private bool sEGMENTFieldSpecified;

        /// <summary>
        /// Tag column
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 0)]
        public string TDFORMAT
        {
            get
            {
                return this.tDFORMATField;
            }
            set
            {
                if ((this.tDFORMATField != null))
                {
                    if ((tDFORMATField.Equals(value) != true))
                    {
                        this.tDFORMATField = value;
                        this.OnPropertyChanged("TDFORMAT");
                    }
                }
                else
                {
                    this.tDFORMATField = value;
                    this.OnPropertyChanged("TDFORMAT");
                }
            }
        }

        /// <summary>
        /// Text Line
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 1)]
        public string TDLINE
        {
            get
            {
                return this.tDLINEField;
            }
            set
            {
                if ((this.tDLINEField != null))
                {
                    if ((tDLINEField.Equals(value) != true))
                    {
                        this.tDLINEField = value;
                        this.OnPropertyChanged("TDLINE");
                    }
                }
                else
                {
                    this.tDLINEField = value;
                    this.OnPropertyChanged("TDLINE");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public INFREC01IDOCE1EINAME1EALTHE1EALTLSEGMENT SEGMENT
        {
            get
            {
                return this.sEGMENTField;
            }
            set
            {
                if ((sEGMENTField.Equals(value) != true))
                {
                    this.sEGMENTField = value;
                    this.OnPropertyChanged("SEGMENT");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(INFREC01IDOCE1EINAME1EALTHE1EALTL));
                }
                return serializer;
            }
        }

        [XmlIgnore()]
        public bool TDFORMATSpecified
        {
            get
            {
                return tDFORMATFieldSpecified;
            }
            set
            {
                tDFORMATFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool TDLINESpecified
        {
            get
            {
                return tDLINEFieldSpecified;
            }
            set
            {
                tDLINEFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool SEGMENTSpecified
        {
            get
            {
                return sEGMENTFieldSpecified;
            }
            set
            {
                sEGMENTFieldSpecified = value;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current INFREC01IDOCE1EINAME1EALTHE1EALTL object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an INFREC01IDOCE1EINAME1EALTHE1EALTL object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output INFREC01IDOCE1EINAME1EALTHE1EALTL object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out INFREC01IDOCE1EINAME1EALTHE1EALTL obj, out System.Exception exception)
        {
            exception = null;
            obj = default(INFREC01IDOCE1EINAME1EALTHE1EALTL);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out INFREC01IDOCE1EINAME1EALTHE1EALTL obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static INFREC01IDOCE1EINAME1EALTHE1EALTL Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((INFREC01IDOCE1EINAME1EALTHE1EALTL)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current INFREC01IDOCE1EINAME1EALTHE1EALTL object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an INFREC01IDOCE1EINAME1EALTHE1EALTL object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output INFREC01IDOCE1EINAME1EALTHE1EALTL object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out INFREC01IDOCE1EINAME1EALTHE1EALTL obj, out System.Exception exception)
        {
            exception = null;
            obj = default(INFREC01IDOCE1EINAME1EALTHE1EALTL);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out INFREC01IDOCE1EINAME1EALTHE1EALTL obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out INFREC01IDOCE1EINAME1EALTHE1EALTL obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static INFREC01IDOCE1EINAME1EALTHE1EALTL LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static INFREC01IDOCE1EINAME1EALTHE1EALTL LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum INFREC01IDOCE1EINAME1EALTHE1EALTLSEGMENT
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum INFREC01IDOCE1EINAME1EALTHSEGMENT
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
    }

    /// <summary>
    /// Purchasing Info Record: Purchasing Organization Data
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class INFREC01IDOCE1EINAME1EINEM : System.ComponentModel.INotifyPropertyChanged
    {

        private string mSGFNField;

        private string eKORGField;

        private string eSOKZField;

        private string wERKSField;

        private string lOEKZField;

        private string eRDATField;

        private string eRNAMField;

        private string eKGRPField;

        private string wAERSField;

        private string bONUSField;

        private string mGBONField;

        private string mINBMField;

        private string nORBMField;

        private string aPLFZField;

        private string uEBTOField;

        private string uEBTKField;

        private string uNTTOField;

        private string aNGNRField;

        private string aNGDTField;

        private string aBSKZField;

        private string nETPRField;

        private string pEINHField;

        private string bPRMEField;

        private string pRDATField;

        private string bPUMZField;

        private string bPUMNField;

        private string mTXNOField;

        private string wEBREField;

        private string eFFPRField;

        private string eKKOLField;

        private string sKTOFField;

        private string kZABSField;

        private string mWSKZField;

        private string bWTARField;

        private string eBONUField;

        private string eVERSField;

        private string eXPRFField;

        private string bSTAEField;

        private string mEPRFField;

        private string iNCO1Field;

        private string iNCO2Field;

        private string xERSNField;

        private string eBON2Field;

        private string eBON3Field;

        private string eBONFField;

        private string mHDRZField;

        private string vERIDField;

        private string bSTMAField;

        private string rDPRFField;

        private string mEGRUField;

        private string j_1BNBMField;

        private string iPRKZField;

        private string eXPRF8Field;

        private string tRANSPORT_CHAINField;

        private string sTAGING_TIMEField;

        private List<INFREC01IDOCE1EINAME1EINEME1EELTH> e1EELTHField;

        private INFREC01IDOCE1EINAME1EINEMSEGMENT sEGMENTField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        private bool mSGFNFieldSpecified;

        private bool eKORGFieldSpecified;

        private bool eSOKZFieldSpecified;

        private bool wERKSFieldSpecified;

        private bool lOEKZFieldSpecified;

        private bool eRDATFieldSpecified;

        private bool eRNAMFieldSpecified;

        private bool eKGRPFieldSpecified;

        private bool wAERSFieldSpecified;

        private bool bONUSFieldSpecified;

        private bool mGBONFieldSpecified;

        private bool mINBMFieldSpecified;

        private bool nORBMFieldSpecified;

        private bool aPLFZFieldSpecified;

        private bool uEBTOFieldSpecified;

        private bool uEBTKFieldSpecified;

        private bool uNTTOFieldSpecified;

        private bool aNGNRFieldSpecified;

        private bool aNGDTFieldSpecified;

        private bool aBSKZFieldSpecified;

        private bool nETPRFieldSpecified;

        private bool pEINHFieldSpecified;

        private bool bPRMEFieldSpecified;

        private bool pRDATFieldSpecified;

        private bool bPUMZFieldSpecified;

        private bool bPUMNFieldSpecified;

        private bool mTXNOFieldSpecified;

        private bool wEBREFieldSpecified;

        private bool eFFPRFieldSpecified;

        private bool eKKOLFieldSpecified;

        private bool sKTOFFieldSpecified;

        private bool kZABSFieldSpecified;

        private bool mWSKZFieldSpecified;

        private bool bWTARFieldSpecified;

        private bool eBONUFieldSpecified;

        private bool eVERSFieldSpecified;

        private bool eXPRFFieldSpecified;

        private bool bSTAEFieldSpecified;

        private bool mEPRFFieldSpecified;

        private bool iNCO1FieldSpecified;

        private bool iNCO2FieldSpecified;

        private bool xERSNFieldSpecified;

        private bool eBON2FieldSpecified;

        private bool eBON3FieldSpecified;

        private bool eBONFFieldSpecified;

        private bool mHDRZFieldSpecified;

        private bool vERIDFieldSpecified;

        private bool bSTMAFieldSpecified;

        private bool rDPRFFieldSpecified;

        private bool mEGRUFieldSpecified;

        private bool j_1BNBMFieldSpecified;

        private bool iPRKZFieldSpecified;

        private bool eXPRF8FieldSpecified;

        private bool tRANSPORT_CHAINFieldSpecified;

        private bool sTAGING_TIMEFieldSpecified;

        private bool e1EELTHFieldSpecified;

        private bool sEGMENTFieldSpecified;

        /// <summary>
        /// INFREC01IDOCE1EINAME1EINEM class constructor
        /// </summary>
        public INFREC01IDOCE1EINAME1EINEM()
        {
            this.e1EELTHField = new List<INFREC01IDOCE1EINAME1EINEME1EELTH>();
        }

        /// <summary>
        /// Function
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 0)]
        public string MSGFN
        {
            get
            {
                return this.mSGFNField;
            }
            set
            {
                if ((this.mSGFNField != null))
                {
                    if ((mSGFNField.Equals(value) != true))
                    {
                        this.mSGFNField = value;
                        this.OnPropertyChanged("MSGFN");
                    }
                }
                else
                {
                    this.mSGFNField = value;
                    this.OnPropertyChanged("MSGFN");
                }
            }
        }

        /// <summary>
        /// Purchasing Organization
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 1)]
        public string EKORG
        {
            get
            {
                return this.eKORGField;
            }
            set
            {
                if ((this.eKORGField != null))
                {
                    if ((eKORGField.Equals(value) != true))
                    {
                        this.eKORGField = value;
                        this.OnPropertyChanged("EKORG");
                    }
                }
                else
                {
                    this.eKORGField = value;
                    this.OnPropertyChanged("EKORG");
                }
            }
        }

        /// <summary>
        /// Purchasing info record category
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 2)]
        public string ESOKZ
        {
            get
            {
                return this.eSOKZField;
            }
            set
            {
                if ((this.eSOKZField != null))
                {
                    if ((eSOKZField.Equals(value) != true))
                    {
                        this.eSOKZField = value;
                        this.OnPropertyChanged("ESOKZ");
                    }
                }
                else
                {
                    this.eSOKZField = value;
                    this.OnPropertyChanged("ESOKZ");
                }
            }
        }

        /// <summary>
        /// Plant
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 3)]
        public string WERKS
        {
            get
            {
                return this.wERKSField;
            }
            set
            {
                if ((this.wERKSField != null))
                {
                    if ((wERKSField.Equals(value) != true))
                    {
                        this.wERKSField = value;
                        this.OnPropertyChanged("WERKS");
                    }
                }
                else
                {
                    this.wERKSField = value;
                    this.OnPropertyChanged("WERKS");
                }
            }
        }

        /// <summary>
        /// Purch. info: Purch. organization data flagged for deletion
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 4)]
        public string LOEKZ
        {
            get
            {
                return this.lOEKZField;
            }
            set
            {
                if ((this.lOEKZField != null))
                {
                    if ((lOEKZField.Equals(value) != true))
                    {
                        this.lOEKZField = value;
                        this.OnPropertyChanged("LOEKZ");
                    }
                }
                else
                {
                    this.lOEKZField = value;
                    this.OnPropertyChanged("LOEKZ");
                }
            }
        }

        /// <summary>
        /// Date on Which Record Was Created
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 5)]
        public string ERDAT
        {
            get
            {
                return this.eRDATField;
            }
            set
            {
                if ((this.eRDATField != null))
                {
                    if ((eRDATField.Equals(value) != true))
                    {
                        this.eRDATField = value;
                        this.OnPropertyChanged("ERDAT");
                    }
                }
                else
                {
                    this.eRDATField = value;
                    this.OnPropertyChanged("ERDAT");
                }
            }
        }

        /// <summary>
        /// Name of Person who Created the Object
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 6)]
        public string ERNAM
        {
            get
            {
                return this.eRNAMField;
            }
            set
            {
                if ((this.eRNAMField != null))
                {
                    if ((eRNAMField.Equals(value) != true))
                    {
                        this.eRNAMField = value;
                        this.OnPropertyChanged("ERNAM");
                    }
                }
                else
                {
                    this.eRNAMField = value;
                    this.OnPropertyChanged("ERNAM");
                }
            }
        }

        /// <summary>
        /// Purchasing Group
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 7)]
        public string EKGRP
        {
            get
            {
                return this.eKGRPField;
            }
            set
            {
                if ((this.eKGRPField != null))
                {
                    if ((eKGRPField.Equals(value) != true))
                    {
                        this.eKGRPField = value;
                        this.OnPropertyChanged("EKGRP");
                    }
                }
                else
                {
                    this.eKGRPField = value;
                    this.OnPropertyChanged("EKGRP");
                }
            }
        }

        /// <summary>
        /// Currency Key
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 8)]
        public string WAERS
        {
            get
            {
                return this.wAERSField;
            }
            set
            {
                if ((this.wAERSField != null))
                {
                    if ((wAERSField.Equals(value) != true))
                    {
                        this.wAERSField = value;
                        this.OnPropertyChanged("WAERS");
                    }
                }
                else
                {
                    this.wAERSField = value;
                    this.OnPropertyChanged("WAERS");
                }
            }
        }

        /// <summary>
        /// Indicator: Volume-Based Rebate
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 9)]
        public string BONUS
        {
            get
            {
                return this.bONUSField;
            }
            set
            {
                if ((this.bONUSField != null))
                {
                    if ((bONUSField.Equals(value) != true))
                    {
                        this.bONUSField = value;
                        this.OnPropertyChanged("BONUS");
                    }
                }
                else
                {
                    this.bONUSField = value;
                    this.OnPropertyChanged("BONUS");
                }
            }
        }

        /// <summary>
        /// Indicator: Quantity-Based Volume Rebate
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 10)]
        public string MGBON
        {
            get
            {
                return this.mGBONField;
            }
            set
            {
                if ((this.mGBONField != null))
                {
                    if ((mGBONField.Equals(value) != true))
                    {
                        this.mGBONField = value;
                        this.OnPropertyChanged("MGBON");
                    }
                }
                else
                {
                    this.mGBONField = value;
                    this.OnPropertyChanged("MGBON");
                }
            }
        }

        /// <summary>
        /// Minimum Purchase Order Quantity
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 11)]
        public string MINBM
        {
            get
            {
                return this.mINBMField;
            }
            set
            {
                if ((this.mINBMField != null))
                {
                    if ((mINBMField.Equals(value) != true))
                    {
                        this.mINBMField = value;
                        this.OnPropertyChanged("MINBM");
                    }
                }
                else
                {
                    this.mINBMField = value;
                    this.OnPropertyChanged("MINBM");
                }
            }
        }

        /// <summary>
        /// Standard Purchase Order Quantity
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 12)]
        public string NORBM
        {
            get
            {
                return this.nORBMField;
            }
            set
            {
                if ((this.nORBMField != null))
                {
                    if ((nORBMField.Equals(value) != true))
                    {
                        this.nORBMField = value;
                        this.OnPropertyChanged("NORBM");
                    }
                }
                else
                {
                    this.nORBMField = value;
                    this.OnPropertyChanged("NORBM");
                }
            }
        }

        /// <summary>
        /// Planned Delivery Time in Days
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 13)]
        public string APLFZ
        {
            get
            {
                return this.aPLFZField;
            }
            set
            {
                if ((this.aPLFZField != null))
                {
                    if ((aPLFZField.Equals(value) != true))
                    {
                        this.aPLFZField = value;
                        this.OnPropertyChanged("APLFZ");
                    }
                }
                else
                {
                    this.aPLFZField = value;
                    this.OnPropertyChanged("APLFZ");
                }
            }
        }

        /// <summary>
        /// Overdelivery Tolerance Limit
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 14)]
        public string UEBTO
        {
            get
            {
                return this.uEBTOField;
            }
            set
            {
                if ((this.uEBTOField != null))
                {
                    if ((uEBTOField.Equals(value) != true))
                    {
                        this.uEBTOField = value;
                        this.OnPropertyChanged("UEBTO");
                    }
                }
                else
                {
                    this.uEBTOField = value;
                    this.OnPropertyChanged("UEBTO");
                }
            }
        }

        /// <summary>
        /// Indicator: Unlimited Overdelivery Allowed
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 15)]
        public string UEBTK
        {
            get
            {
                return this.uEBTKField;
            }
            set
            {
                if ((this.uEBTKField != null))
                {
                    if ((uEBTKField.Equals(value) != true))
                    {
                        this.uEBTKField = value;
                        this.OnPropertyChanged("UEBTK");
                    }
                }
                else
                {
                    this.uEBTKField = value;
                    this.OnPropertyChanged("UEBTK");
                }
            }
        }

        /// <summary>
        /// Underdelivery Tolerance Limit
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 16)]
        public string UNTTO
        {
            get
            {
                return this.uNTTOField;
            }
            set
            {
                if ((this.uNTTOField != null))
                {
                    if ((uNTTOField.Equals(value) != true))
                    {
                        this.uNTTOField = value;
                        this.OnPropertyChanged("UNTTO");
                    }
                }
                else
                {
                    this.uNTTOField = value;
                    this.OnPropertyChanged("UNTTO");
                }
            }
        }

        /// <summary>
        /// Quotation Number
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 17)]
        public string ANGNR
        {
            get
            {
                return this.aNGNRField;
            }
            set
            {
                if ((this.aNGNRField != null))
                {
                    if ((aNGNRField.Equals(value) != true))
                    {
                        this.aNGNRField = value;
                        this.OnPropertyChanged("ANGNR");
                    }
                }
                else
                {
                    this.aNGNRField = value;
                    this.OnPropertyChanged("ANGNR");
                }
            }
        }

        /// <summary>
        /// Quotation Validity Date
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 18)]
        public string ANGDT
        {
            get
            {
                return this.aNGDTField;
            }
            set
            {
                if ((this.aNGDTField != null))
                {
                    if ((aNGDTField.Equals(value) != true))
                    {
                        this.aNGDTField = value;
                        this.OnPropertyChanged("ANGDT");
                    }
                }
                else
                {
                    this.aNGDTField = value;
                    this.OnPropertyChanged("ANGDT");
                }
            }
        }

        /// <summary>
        /// Rejection Indicator
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 19)]
        public string ABSKZ
        {
            get
            {
                return this.aBSKZField;
            }
            set
            {
                if ((this.aBSKZField != null))
                {
                    if ((aBSKZField.Equals(value) != true))
                    {
                        this.aBSKZField = value;
                        this.OnPropertyChanged("ABSKZ");
                    }
                }
                else
                {
                    this.aBSKZField = value;
                    this.OnPropertyChanged("ABSKZ");
                }
            }
        }

        /// <summary>
        /// Net Price in Purchasing Info Record
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 20)]
        public string NETPR
        {
            get
            {
                return this.nETPRField;
            }
            set
            {
                if ((this.nETPRField != null))
                {
                    if ((nETPRField.Equals(value) != true))
                    {
                        this.nETPRField = value;
                        this.OnPropertyChanged("NETPR");
                    }
                }
                else
                {
                    this.nETPRField = value;
                    this.OnPropertyChanged("NETPR");
                }
            }
        }

        /// <summary>
        /// Price Unit
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 21)]
        public string PEINH
        {
            get
            {
                return this.pEINHField;
            }
            set
            {
                if ((this.pEINHField != null))
                {
                    if ((pEINHField.Equals(value) != true))
                    {
                        this.pEINHField = value;
                        this.OnPropertyChanged("PEINH");
                    }
                }
                else
                {
                    this.pEINHField = value;
                    this.OnPropertyChanged("PEINH");
                }
            }
        }

        /// <summary>
        /// Order Price Unit (Purchasing)
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 22)]
        public string BPRME
        {
            get
            {
                return this.bPRMEField;
            }
            set
            {
                if ((this.bPRMEField != null))
                {
                    if ((bPRMEField.Equals(value) != true))
                    {
                        this.bPRMEField = value;
                        this.OnPropertyChanged("BPRME");
                    }
                }
                else
                {
                    this.bPRMEField = value;
                    this.OnPropertyChanged("BPRME");
                }
            }
        }

        /// <summary>
        /// Date of Price Determination
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 23)]
        public string PRDAT
        {
            get
            {
                return this.pRDATField;
            }
            set
            {
                if ((this.pRDATField != null))
                {
                    if ((pRDATField.Equals(value) != true))
                    {
                        this.pRDATField = value;
                        this.OnPropertyChanged("PRDAT");
                    }
                }
                else
                {
                    this.pRDATField = value;
                    this.OnPropertyChanged("PRDAT");
                }
            }
        }

        /// <summary>
        /// Numerator for Conversion of Order Price Unit into Order Unit
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 24)]
        public string BPUMZ
        {
            get
            {
                return this.bPUMZField;
            }
            set
            {
                if ((this.bPUMZField != null))
                {
                    if ((bPUMZField.Equals(value) != true))
                    {
                        this.bPUMZField = value;
                        this.OnPropertyChanged("BPUMZ");
                    }
                }
                else
                {
                    this.bPUMZField = value;
                    this.OnPropertyChanged("BPUMZ");
                }
            }
        }

        /// <summary>
        /// Denominator for Conv. of Order Price Unit into Order Unit
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 25)]
        public string BPUMN
        {
            get
            {
                return this.bPUMNField;
            }
            set
            {
                if ((this.bPUMNField != null))
                {
                    if ((bPUMNField.Equals(value) != true))
                    {
                        this.bPUMNField = value;
                        this.OnPropertyChanged("BPUMN");
                    }
                }
                else
                {
                    this.bPUMNField = value;
                    this.OnPropertyChanged("BPUMN");
                }
            }
        }

        /// <summary>
        /// Material Master Record PO Text Not Relevant
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 26)]
        public string MTXNO
        {
            get
            {
                return this.mTXNOField;
            }
            set
            {
                if ((this.mTXNOField != null))
                {
                    if ((mTXNOField.Equals(value) != true))
                    {
                        this.mTXNOField = value;
                        this.OnPropertyChanged("MTXNO");
                    }
                }
                else
                {
                    this.mTXNOField = value;
                    this.OnPropertyChanged("MTXNO");
                }
            }
        }

        /// <summary>
        /// Indicator: GR-Based Invoice Verification
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 27)]
        public string WEBRE
        {
            get
            {
                return this.wEBREField;
            }
            set
            {
                if ((this.wEBREField != null))
                {
                    if ((wEBREField.Equals(value) != true))
                    {
                        this.wEBREField = value;
                        this.OnPropertyChanged("WEBRE");
                    }
                }
                else
                {
                    this.wEBREField = value;
                    this.OnPropertyChanged("WEBRE");
                }
            }
        }

        /// <summary>
        /// Effective Price in Purchasing Info Record
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 28)]
        public string EFFPR
        {
            get
            {
                return this.eFFPRField;
            }
            set
            {
                if ((this.eFFPRField != null))
                {
                    if ((eFFPRField.Equals(value) != true))
                    {
                        this.eFFPRField = value;
                        this.OnPropertyChanged("EFFPR");
                    }
                }
                else
                {
                    this.eFFPRField = value;
                    this.OnPropertyChanged("EFFPR");
                }
            }
        }

        /// <summary>
        /// Condition Group with Vendor
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 29)]
        public string EKKOL
        {
            get
            {
                return this.eKKOLField;
            }
            set
            {
                if ((this.eKKOLField != null))
                {
                    if ((eKKOLField.Equals(value) != true))
                    {
                        this.eKKOLField = value;
                        this.OnPropertyChanged("EKKOL");
                    }
                }
                else
                {
                    this.eKKOLField = value;
                    this.OnPropertyChanged("EKKOL");
                }
            }
        }

        /// <summary>
        /// Item Does Not Qualify for Cash Discount
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 30)]
        public string SKTOF
        {
            get
            {
                return this.sKTOFField;
            }
            set
            {
                if ((this.sKTOFField != null))
                {
                    if ((sKTOFField.Equals(value) != true))
                    {
                        this.sKTOFField = value;
                        this.OnPropertyChanged("SKTOF");
                    }
                }
                else
                {
                    this.sKTOFField = value;
                    this.OnPropertyChanged("SKTOF");
                }
            }
        }

        /// <summary>
        /// Order Acknowledgment Requirement
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 31)]
        public string KZABS
        {
            get
            {
                return this.kZABSField;
            }
            set
            {
                if ((this.kZABSField != null))
                {
                    if ((kZABSField.Equals(value) != true))
                    {
                        this.kZABSField = value;
                        this.OnPropertyChanged("KZABS");
                    }
                }
                else
                {
                    this.kZABSField = value;
                    this.OnPropertyChanged("KZABS");
                }
            }
        }

        /// <summary>
        /// Sales Tax Code
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 32)]
        public string MWSKZ
        {
            get
            {
                return this.mWSKZField;
            }
            set
            {
                if ((this.mWSKZField != null))
                {
                    if ((mWSKZField.Equals(value) != true))
                    {
                        this.mWSKZField = value;
                        this.OnPropertyChanged("MWSKZ");
                    }
                }
                else
                {
                    this.mWSKZField = value;
                    this.OnPropertyChanged("MWSKZ");
                }
            }
        }

        /// <summary>
        /// Valuation Type
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 33)]
        public string BWTAR
        {
            get
            {
                return this.bWTARField;
            }
            set
            {
                if ((this.bWTARField != null))
                {
                    if ((bWTARField.Equals(value) != true))
                    {
                        this.bWTARField = value;
                        this.OnPropertyChanged("BWTAR");
                    }
                }
                else
                {
                    this.bWTARField = value;
                    this.OnPropertyChanged("BWTAR");
                }
            }
        }

        /// <summary>
        /// Settlement Group 1 (Purchasing)
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 34)]
        public string EBONU
        {
            get
            {
                return this.eBONUField;
            }
            set
            {
                if ((this.eBONUField != null))
                {
                    if ((eBONUField.Equals(value) != true))
                    {
                        this.eBONUField = value;
                        this.OnPropertyChanged("EBONU");
                    }
                }
                else
                {
                    this.eBONUField = value;
                    this.OnPropertyChanged("EBONU");
                }
            }
        }

        /// <summary>
        /// Shipping Instructions
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 35)]
        public string EVERS
        {
            get
            {
                return this.eVERSField;
            }
            set
            {
                if ((this.eVERSField != null))
                {
                    if ((eVERSField.Equals(value) != true))
                    {
                        this.eVERSField = value;
                        this.OnPropertyChanged("EVERS");
                    }
                }
                else
                {
                    this.eVERSField = value;
                    this.OnPropertyChanged("EVERS");
                }
            }
        }

        /// <summary>
        /// Export/Import procedure for foreign trade (5 digits)
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 36)]
        public string EXPRF
        {
            get
            {
                return this.eXPRFField;
            }
            set
            {
                if ((this.eXPRFField != null))
                {
                    if ((eXPRFField.Equals(value) != true))
                    {
                        this.eXPRFField = value;
                        this.OnPropertyChanged("EXPRF");
                    }
                }
                else
                {
                    this.eXPRFField = value;
                    this.OnPropertyChanged("EXPRF");
                }
            }
        }

        /// <summary>
        /// Confirmation Control Key
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 37)]
        public string BSTAE
        {
            get
            {
                return this.bSTAEField;
            }
            set
            {
                if ((this.bSTAEField != null))
                {
                    if ((bSTAEField.Equals(value) != true))
                    {
                        this.bSTAEField = value;
                        this.OnPropertyChanged("BSTAE");
                    }
                }
                else
                {
                    this.bSTAEField = value;
                    this.OnPropertyChanged("BSTAE");
                }
            }
        }

        /// <summary>
        /// Price Determination (Pricing) Date Control
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 38)]
        public string MEPRF
        {
            get
            {
                return this.mEPRFField;
            }
            set
            {
                if ((this.mEPRFField != null))
                {
                    if ((mEPRFField.Equals(value) != true))
                    {
                        this.mEPRFField = value;
                        this.OnPropertyChanged("MEPRF");
                    }
                }
                else
                {
                    this.mEPRFField = value;
                    this.OnPropertyChanged("MEPRF");
                }
            }
        }

        /// <summary>
        /// Incoterms (Part 1)
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 39)]
        public string INCO1
        {
            get
            {
                return this.iNCO1Field;
            }
            set
            {
                if ((this.iNCO1Field != null))
                {
                    if ((iNCO1Field.Equals(value) != true))
                    {
                        this.iNCO1Field = value;
                        this.OnPropertyChanged("INCO1");
                    }
                }
                else
                {
                    this.iNCO1Field = value;
                    this.OnPropertyChanged("INCO1");
                }
            }
        }

        /// <summary>
        /// Incoterms (Part 2)
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 40)]
        public string INCO2
        {
            get
            {
                return this.iNCO2Field;
            }
            set
            {
                if ((this.iNCO2Field != null))
                {
                    if ((iNCO2Field.Equals(value) != true))
                    {
                        this.iNCO2Field = value;
                        this.OnPropertyChanged("INCO2");
                    }
                }
                else
                {
                    this.iNCO2Field = value;
                    this.OnPropertyChanged("INCO2");
                }
            }
        }

        /// <summary>
        /// No Evaluated Receipt Settlement (ERS)
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 41)]
        public string XERSN
        {
            get
            {
                return this.xERSNField;
            }
            set
            {
                if ((this.xERSNField != null))
                {
                    if ((xERSNField.Equals(value) != true))
                    {
                        this.xERSNField = value;
                        this.OnPropertyChanged("XERSN");
                    }
                }
                else
                {
                    this.xERSNField = value;
                    this.OnPropertyChanged("XERSN");
                }
            }
        }

        /// <summary>
        /// Settlement Group 2 (Rebate Settlement, Purchasing)
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 42)]
        public string EBON2
        {
            get
            {
                return this.eBON2Field;
            }
            set
            {
                if ((this.eBON2Field != null))
                {
                    if ((eBON2Field.Equals(value) != true))
                    {
                        this.eBON2Field = value;
                        this.OnPropertyChanged("EBON2");
                    }
                }
                else
                {
                    this.eBON2Field = value;
                    this.OnPropertyChanged("EBON2");
                }
            }
        }

        /// <summary>
        /// Settlement Group 3 (Rebate Settlement, Purchasing)
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 43)]
        public string EBON3
        {
            get
            {
                return this.eBON3Field;
            }
            set
            {
                if ((this.eBON3Field != null))
                {
                    if ((eBON3Field.Equals(value) != true))
                    {
                        this.eBON3Field = value;
                        this.OnPropertyChanged("EBON3");
                    }
                }
                else
                {
                    this.eBON3Field = value;
                    this.OnPropertyChanged("EBON3");
                }
            }
        }

        /// <summary>
        /// Item Not Relevant to Subseq. (Period-End Rebate) Settlement
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 44)]
        public string EBONF
        {
            get
            {
                return this.eBONFField;
            }
            set
            {
                if ((this.eBONFField != null))
                {
                    if ((eBONFField.Equals(value) != true))
                    {
                        this.eBONFField = value;
                        this.OnPropertyChanged("EBONF");
                    }
                }
                else
                {
                    this.eBONFField = value;
                    this.OnPropertyChanged("EBONF");
                }
            }
        }

        /// <summary>
        /// Minimum Remaining Shelf Life
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 45)]
        public string MHDRZ
        {
            get
            {
                return this.mHDRZField;
            }
            set
            {
                if ((this.mHDRZField != null))
                {
                    if ((mHDRZField.Equals(value) != true))
                    {
                        this.mHDRZField = value;
                        this.OnPropertyChanged("MHDRZ");
                    }
                }
                else
                {
                    this.mHDRZField = value;
                    this.OnPropertyChanged("MHDRZ");
                }
            }
        }

        /// <summary>
        /// Production Version
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 46)]
        public string VERID
        {
            get
            {
                return this.vERIDField;
            }
            set
            {
                if ((this.vERIDField != null))
                {
                    if ((vERIDField.Equals(value) != true))
                    {
                        this.vERIDField = value;
                        this.OnPropertyChanged("VERID");
                    }
                }
                else
                {
                    this.vERIDField = value;
                    this.OnPropertyChanged("VERID");
                }
            }
        }

        /// <summary>
        /// Maximum Lot Size
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 47)]
        public string BSTMA
        {
            get
            {
                return this.bSTMAField;
            }
            set
            {
                if ((this.bSTMAField != null))
                {
                    if ((bSTMAField.Equals(value) != true))
                    {
                        this.bSTMAField = value;
                        this.OnPropertyChanged("BSTMA");
                    }
                }
                else
                {
                    this.bSTMAField = value;
                    this.OnPropertyChanged("BSTMA");
                }
            }
        }

        /// <summary>
        /// Rounding Profile
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 48)]
        public string RDPRF
        {
            get
            {
                return this.rDPRFField;
            }
            set
            {
                if ((this.rDPRFField != null))
                {
                    if ((rDPRFField.Equals(value) != true))
                    {
                        this.rDPRFField = value;
                        this.OnPropertyChanged("RDPRF");
                    }
                }
                else
                {
                    this.rDPRFField = value;
                    this.OnPropertyChanged("RDPRF");
                }
            }
        }

        /// <summary>
        /// Unit of Measure Group
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 49)]
        public string MEGRU
        {
            get
            {
                return this.mEGRUField;
            }
            set
            {
                if ((this.mEGRUField != null))
                {
                    if ((mEGRUField.Equals(value) != true))
                    {
                        this.mEGRUField = value;
                        this.OnPropertyChanged("MEGRU");
                    }
                }
                else
                {
                    this.mEGRUField = value;
                    this.OnPropertyChanged("MEGRU");
                }
            }
        }

        /// <summary>
        /// Brazilian NCM Code
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 50)]
        public string J_1BNBM
        {
            get
            {
                return this.j_1BNBMField;
            }
            set
            {
                if ((this.j_1BNBMField != null))
                {
                    if ((j_1BNBMField.Equals(value) != true))
                    {
                        this.j_1BNBMField = value;
                        this.OnPropertyChanged("J_1BNBM");
                    }
                }
                else
                {
                    this.j_1BNBMField = value;
                    this.OnPropertyChanged("J_1BNBM");
                }
            }
        }

        /// <summary>
        /// Period Indicator for Shelf Life Expiration Date
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 51)]
        public string IPRKZ
        {
            get
            {
                return this.iPRKZField;
            }
            set
            {
                if ((this.iPRKZField != null))
                {
                    if ((iPRKZField.Equals(value) != true))
                    {
                        this.iPRKZField = value;
                        this.OnPropertyChanged("IPRKZ");
                    }
                }
                else
                {
                    this.iPRKZField = value;
                    this.OnPropertyChanged("IPRKZ");
                }
            }
        }

        /// <summary>
        /// Export-/Import Procedures for Foreign Trade (8-Character)
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 52)]
        public string EXPRF8
        {
            get
            {
                return this.eXPRF8Field;
            }
            set
            {
                if ((this.eXPRF8Field != null))
                {
                    if ((eXPRF8Field.Equals(value) != true))
                    {
                        this.eXPRF8Field = value;
                        this.OnPropertyChanged("EXPRF8");
                    }
                }
                else
                {
                    this.eXPRF8Field = value;
                    this.OnPropertyChanged("EXPRF8");
                }
            }
        }

        /// <summary>
        /// Transportation Chain
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 53)]
        public string TRANSPORT_CHAIN
        {
            get
            {
                return this.tRANSPORT_CHAINField;
            }
            set
            {
                if ((this.tRANSPORT_CHAINField != null))
                {
                    if ((tRANSPORT_CHAINField.Equals(value) != true))
                    {
                        this.tRANSPORT_CHAINField = value;
                        this.OnPropertyChanged("TRANSPORT_CHAIN");
                    }
                }
                else
                {
                    this.tRANSPORT_CHAINField = value;
                    this.OnPropertyChanged("TRANSPORT_CHAIN");
                }
            }
        }

        /// <summary>
        /// Staging Time in Days
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 54)]
        public string STAGING_TIME
        {
            get
            {
                return this.sTAGING_TIMEField;
            }
            set
            {
                if ((this.sTAGING_TIMEField != null))
                {
                    if ((sTAGING_TIMEField.Equals(value) != true))
                    {
                        this.sTAGING_TIMEField = value;
                        this.OnPropertyChanged("STAGING_TIME");
                    }
                }
                else
                {
                    this.sTAGING_TIMEField = value;
                    this.OnPropertyChanged("STAGING_TIME");
                }
            }
        }

        /// <summary>
        /// Text ID for Purchasing Info Record: Purchasing Org. Data
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("E1EELTH", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 55)]
        public List<INFREC01IDOCE1EINAME1EINEME1EELTH> E1EELTH
        {
            get
            {
                return this.e1EELTHField;
            }
            set
            {
                if ((this.e1EELTHField != null))
                {
                    if ((e1EELTHField.Equals(value) != true))
                    {
                        this.e1EELTHField = value;
                        this.OnPropertyChanged("E1EELTH");
                    }
                }
                else
                {
                    this.e1EELTHField = value;
                    this.OnPropertyChanged("E1EELTH");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public INFREC01IDOCE1EINAME1EINEMSEGMENT SEGMENT
        {
            get
            {
                return this.sEGMENTField;
            }
            set
            {
                if ((sEGMENTField.Equals(value) != true))
                {
                    this.sEGMENTField = value;
                    this.OnPropertyChanged("SEGMENT");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(INFREC01IDOCE1EINAME1EINEM));
                }
                return serializer;
            }
        }

        [XmlIgnore()]
        public bool MSGFNSpecified
        {
            get
            {
                return mSGFNFieldSpecified;
            }
            set
            {
                mSGFNFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool EKORGSpecified
        {
            get
            {
                return eKORGFieldSpecified;
            }
            set
            {
                eKORGFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool ESOKZSpecified
        {
            get
            {
                return eSOKZFieldSpecified;
            }
            set
            {
                eSOKZFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool WERKSSpecified
        {
            get
            {
                return wERKSFieldSpecified;
            }
            set
            {
                wERKSFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool LOEKZSpecified
        {
            get
            {
                return lOEKZFieldSpecified;
            }
            set
            {
                lOEKZFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool ERDATSpecified
        {
            get
            {
                return eRDATFieldSpecified;
            }
            set
            {
                eRDATFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool ERNAMSpecified
        {
            get
            {
                return eRNAMFieldSpecified;
            }
            set
            {
                eRNAMFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool EKGRPSpecified
        {
            get
            {
                return eKGRPFieldSpecified;
            }
            set
            {
                eKGRPFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool WAERSSpecified
        {
            get
            {
                return wAERSFieldSpecified;
            }
            set
            {
                wAERSFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool BONUSSpecified
        {
            get
            {
                return bONUSFieldSpecified;
            }
            set
            {
                bONUSFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool MGBONSpecified
        {
            get
            {
                return mGBONFieldSpecified;
            }
            set
            {
                mGBONFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool MINBMSpecified
        {
            get
            {
                return mINBMFieldSpecified;
            }
            set
            {
                mINBMFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool NORBMSpecified
        {
            get
            {
                return nORBMFieldSpecified;
            }
            set
            {
                nORBMFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool APLFZSpecified
        {
            get
            {
                return aPLFZFieldSpecified;
            }
            set
            {
                aPLFZFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool UEBTOSpecified
        {
            get
            {
                return uEBTOFieldSpecified;
            }
            set
            {
                uEBTOFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool UEBTKSpecified
        {
            get
            {
                return uEBTKFieldSpecified;
            }
            set
            {
                uEBTKFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool UNTTOSpecified
        {
            get
            {
                return uNTTOFieldSpecified;
            }
            set
            {
                uNTTOFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool ANGNRSpecified
        {
            get
            {
                return aNGNRFieldSpecified;
            }
            set
            {
                aNGNRFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool ANGDTSpecified
        {
            get
            {
                return aNGDTFieldSpecified;
            }
            set
            {
                aNGDTFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool ABSKZSpecified
        {
            get
            {
                return aBSKZFieldSpecified;
            }
            set
            {
                aBSKZFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool NETPRSpecified
        {
            get
            {
                return nETPRFieldSpecified;
            }
            set
            {
                nETPRFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool PEINHSpecified
        {
            get
            {
                return pEINHFieldSpecified;
            }
            set
            {
                pEINHFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool BPRMESpecified
        {
            get
            {
                return bPRMEFieldSpecified;
            }
            set
            {
                bPRMEFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool PRDATSpecified
        {
            get
            {
                return pRDATFieldSpecified;
            }
            set
            {
                pRDATFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool BPUMZSpecified
        {
            get
            {
                return bPUMZFieldSpecified;
            }
            set
            {
                bPUMZFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool BPUMNSpecified
        {
            get
            {
                return bPUMNFieldSpecified;
            }
            set
            {
                bPUMNFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool MTXNOSpecified
        {
            get
            {
                return mTXNOFieldSpecified;
            }
            set
            {
                mTXNOFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool WEBRESpecified
        {
            get
            {
                return wEBREFieldSpecified;
            }
            set
            {
                wEBREFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool EFFPRSpecified
        {
            get
            {
                return eFFPRFieldSpecified;
            }
            set
            {
                eFFPRFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool EKKOLSpecified
        {
            get
            {
                return eKKOLFieldSpecified;
            }
            set
            {
                eKKOLFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool SKTOFSpecified
        {
            get
            {
                return sKTOFFieldSpecified;
            }
            set
            {
                sKTOFFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool KZABSSpecified
        {
            get
            {
                return kZABSFieldSpecified;
            }
            set
            {
                kZABSFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool MWSKZSpecified
        {
            get
            {
                return mWSKZFieldSpecified;
            }
            set
            {
                mWSKZFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool BWTARSpecified
        {
            get
            {
                return bWTARFieldSpecified;
            }
            set
            {
                bWTARFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool EBONUSpecified
        {
            get
            {
                return eBONUFieldSpecified;
            }
            set
            {
                eBONUFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool EVERSSpecified
        {
            get
            {
                return eVERSFieldSpecified;
            }
            set
            {
                eVERSFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool EXPRFSpecified
        {
            get
            {
                return eXPRFFieldSpecified;
            }
            set
            {
                eXPRFFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool BSTAESpecified
        {
            get
            {
                return bSTAEFieldSpecified;
            }
            set
            {
                bSTAEFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool MEPRFSpecified
        {
            get
            {
                return mEPRFFieldSpecified;
            }
            set
            {
                mEPRFFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool INCO1Specified
        {
            get
            {
                return iNCO1FieldSpecified;
            }
            set
            {
                iNCO1FieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool INCO2Specified
        {
            get
            {
                return iNCO2FieldSpecified;
            }
            set
            {
                iNCO2FieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool XERSNSpecified
        {
            get
            {
                return xERSNFieldSpecified;
            }
            set
            {
                xERSNFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool EBON2Specified
        {
            get
            {
                return eBON2FieldSpecified;
            }
            set
            {
                eBON2FieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool EBON3Specified
        {
            get
            {
                return eBON3FieldSpecified;
            }
            set
            {
                eBON3FieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool EBONFSpecified
        {
            get
            {
                return eBONFFieldSpecified;
            }
            set
            {
                eBONFFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool MHDRZSpecified
        {
            get
            {
                return mHDRZFieldSpecified;
            }
            set
            {
                mHDRZFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool VERIDSpecified
        {
            get
            {
                return vERIDFieldSpecified;
            }
            set
            {
                vERIDFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool BSTMASpecified
        {
            get
            {
                return bSTMAFieldSpecified;
            }
            set
            {
                bSTMAFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool RDPRFSpecified
        {
            get
            {
                return rDPRFFieldSpecified;
            }
            set
            {
                rDPRFFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool MEGRUSpecified
        {
            get
            {
                return mEGRUFieldSpecified;
            }
            set
            {
                mEGRUFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool J_1BNBMSpecified
        {
            get
            {
                return j_1BNBMFieldSpecified;
            }
            set
            {
                j_1BNBMFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool IPRKZSpecified
        {
            get
            {
                return iPRKZFieldSpecified;
            }
            set
            {
                iPRKZFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool EXPRF8Specified
        {
            get
            {
                return eXPRF8FieldSpecified;
            }
            set
            {
                eXPRF8FieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool TRANSPORT_CHAINSpecified
        {
            get
            {
                return tRANSPORT_CHAINFieldSpecified;
            }
            set
            {
                tRANSPORT_CHAINFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool STAGING_TIMESpecified
        {
            get
            {
                return sTAGING_TIMEFieldSpecified;
            }
            set
            {
                sTAGING_TIMEFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool E1EELTHSpecified
        {
            get
            {
                return e1EELTHFieldSpecified;
            }
            set
            {
                e1EELTHFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool SEGMENTSpecified
        {
            get
            {
                return sEGMENTFieldSpecified;
            }
            set
            {
                sEGMENTFieldSpecified = value;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current INFREC01IDOCE1EINAME1EINEM object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an INFREC01IDOCE1EINAME1EINEM object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output INFREC01IDOCE1EINAME1EINEM object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out INFREC01IDOCE1EINAME1EINEM obj, out System.Exception exception)
        {
            exception = null;
            obj = default(INFREC01IDOCE1EINAME1EINEM);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out INFREC01IDOCE1EINAME1EINEM obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static INFREC01IDOCE1EINAME1EINEM Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((INFREC01IDOCE1EINAME1EINEM)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current INFREC01IDOCE1EINAME1EINEM object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an INFREC01IDOCE1EINAME1EINEM object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output INFREC01IDOCE1EINAME1EINEM object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out INFREC01IDOCE1EINAME1EINEM obj, out System.Exception exception)
        {
            exception = null;
            obj = default(INFREC01IDOCE1EINAME1EINEM);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out INFREC01IDOCE1EINAME1EINEM obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out INFREC01IDOCE1EINAME1EINEM obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static INFREC01IDOCE1EINAME1EINEM LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static INFREC01IDOCE1EINAME1EINEM LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Text ID for Purchasing Info Record: Purchasing Org. Data
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class INFREC01IDOCE1EINAME1EINEME1EELTH : System.ComponentModel.INotifyPropertyChanged
    {

        private string mSGFNField;

        private string tDOBJECTField;

        private string tDNAMEField;

        private string tDIDField;

        private string tDSPRASField;

        private string tDTEXTTYPEField;

        private List<INFREC01IDOCE1EINAME1EINEME1EELTHE1EELTL> e1EELTLField;

        private INFREC01IDOCE1EINAME1EINEME1EELTHSEGMENT sEGMENTField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        private bool mSGFNFieldSpecified;

        private bool tDOBJECTFieldSpecified;

        private bool tDNAMEFieldSpecified;

        private bool tDIDFieldSpecified;

        private bool tDSPRASFieldSpecified;

        private bool tDTEXTTYPEFieldSpecified;

        private bool e1EELTLFieldSpecified;

        private bool sEGMENTFieldSpecified;

        /// <summary>
        /// INFREC01IDOCE1EINAME1EINEME1EELTH class constructor
        /// </summary>
        public INFREC01IDOCE1EINAME1EINEME1EELTH()
        {
            this.e1EELTLField = new List<INFREC01IDOCE1EINAME1EINEME1EELTHE1EELTL>();
        }

        /// <summary>
        /// Function
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 0)]
        public string MSGFN
        {
            get
            {
                return this.mSGFNField;
            }
            set
            {
                if ((this.mSGFNField != null))
                {
                    if ((mSGFNField.Equals(value) != true))
                    {
                        this.mSGFNField = value;
                        this.OnPropertyChanged("MSGFN");
                    }
                }
                else
                {
                    this.mSGFNField = value;
                    this.OnPropertyChanged("MSGFN");
                }
            }
        }

        /// <summary>
        /// Texts: Application Object
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 1)]
        public string TDOBJECT
        {
            get
            {
                return this.tDOBJECTField;
            }
            set
            {
                if ((this.tDOBJECTField != null))
                {
                    if ((tDOBJECTField.Equals(value) != true))
                    {
                        this.tDOBJECTField = value;
                        this.OnPropertyChanged("TDOBJECT");
                    }
                }
                else
                {
                    this.tDOBJECTField = value;
                    this.OnPropertyChanged("TDOBJECT");
                }
            }
        }

        /// <summary>
        /// Name
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 2)]
        public string TDNAME
        {
            get
            {
                return this.tDNAMEField;
            }
            set
            {
                if ((this.tDNAMEField != null))
                {
                    if ((tDNAMEField.Equals(value) != true))
                    {
                        this.tDNAMEField = value;
                        this.OnPropertyChanged("TDNAME");
                    }
                }
                else
                {
                    this.tDNAMEField = value;
                    this.OnPropertyChanged("TDNAME");
                }
            }
        }

        /// <summary>
        /// Text ID
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 3)]
        public string TDID
        {
            get
            {
                return this.tDIDField;
            }
            set
            {
                if ((this.tDIDField != null))
                {
                    if ((tDIDField.Equals(value) != true))
                    {
                        this.tDIDField = value;
                        this.OnPropertyChanged("TDID");
                    }
                }
                else
                {
                    this.tDIDField = value;
                    this.OnPropertyChanged("TDID");
                }
            }
        }

        /// <summary>
        /// Language key
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 4)]
        public string TDSPRAS
        {
            get
            {
                return this.tDSPRASField;
            }
            set
            {
                if ((this.tDSPRASField != null))
                {
                    if ((tDSPRASField.Equals(value) != true))
                    {
                        this.tDSPRASField = value;
                        this.OnPropertyChanged("TDSPRAS");
                    }
                }
                else
                {
                    this.tDSPRASField = value;
                    this.OnPropertyChanged("TDSPRAS");
                }
            }
        }

        /// <summary>
        /// SAPscript: Format of Text
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 5)]
        public string TDTEXTTYPE
        {
            get
            {
                return this.tDTEXTTYPEField;
            }
            set
            {
                if ((this.tDTEXTTYPEField != null))
                {
                    if ((tDTEXTTYPEField.Equals(value) != true))
                    {
                        this.tDTEXTTYPEField = value;
                        this.OnPropertyChanged("TDTEXTTYPE");
                    }
                }
                else
                {
                    this.tDTEXTTYPEField = value;
                    this.OnPropertyChanged("TDTEXTTYPE");
                }
            }
        }

        /// <summary>
        /// Text Line for Purchasing Info Record: Purchasing Org. Data
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("E1EELTL", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 6)]
        public List<INFREC01IDOCE1EINAME1EINEME1EELTHE1EELTL> E1EELTL
        {
            get
            {
                return this.e1EELTLField;
            }
            set
            {
                if ((this.e1EELTLField != null))
                {
                    if ((e1EELTLField.Equals(value) != true))
                    {
                        this.e1EELTLField = value;
                        this.OnPropertyChanged("E1EELTL");
                    }
                }
                else
                {
                    this.e1EELTLField = value;
                    this.OnPropertyChanged("E1EELTL");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public INFREC01IDOCE1EINAME1EINEME1EELTHSEGMENT SEGMENT
        {
            get
            {
                return this.sEGMENTField;
            }
            set
            {
                if ((sEGMENTField.Equals(value) != true))
                {
                    this.sEGMENTField = value;
                    this.OnPropertyChanged("SEGMENT");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(INFREC01IDOCE1EINAME1EINEME1EELTH));
                }
                return serializer;
            }
        }

        [XmlIgnore()]
        public bool MSGFNSpecified
        {
            get
            {
                return mSGFNFieldSpecified;
            }
            set
            {
                mSGFNFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool TDOBJECTSpecified
        {
            get
            {
                return tDOBJECTFieldSpecified;
            }
            set
            {
                tDOBJECTFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool TDNAMESpecified
        {
            get
            {
                return tDNAMEFieldSpecified;
            }
            set
            {
                tDNAMEFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool TDIDSpecified
        {
            get
            {
                return tDIDFieldSpecified;
            }
            set
            {
                tDIDFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool TDSPRASSpecified
        {
            get
            {
                return tDSPRASFieldSpecified;
            }
            set
            {
                tDSPRASFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool TDTEXTTYPESpecified
        {
            get
            {
                return tDTEXTTYPEFieldSpecified;
            }
            set
            {
                tDTEXTTYPEFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool E1EELTLSpecified
        {
            get
            {
                return e1EELTLFieldSpecified;
            }
            set
            {
                e1EELTLFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool SEGMENTSpecified
        {
            get
            {
                return sEGMENTFieldSpecified;
            }
            set
            {
                sEGMENTFieldSpecified = value;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current INFREC01IDOCE1EINAME1EINEME1EELTH object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an INFREC01IDOCE1EINAME1EINEME1EELTH object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output INFREC01IDOCE1EINAME1EINEME1EELTH object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out INFREC01IDOCE1EINAME1EINEME1EELTH obj, out System.Exception exception)
        {
            exception = null;
            obj = default(INFREC01IDOCE1EINAME1EINEME1EELTH);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out INFREC01IDOCE1EINAME1EINEME1EELTH obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static INFREC01IDOCE1EINAME1EINEME1EELTH Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((INFREC01IDOCE1EINAME1EINEME1EELTH)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current INFREC01IDOCE1EINAME1EINEME1EELTH object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an INFREC01IDOCE1EINAME1EINEME1EELTH object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output INFREC01IDOCE1EINAME1EINEME1EELTH object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out INFREC01IDOCE1EINAME1EINEME1EELTH obj, out System.Exception exception)
        {
            exception = null;
            obj = default(INFREC01IDOCE1EINAME1EINEME1EELTH);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out INFREC01IDOCE1EINAME1EINEME1EELTH obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out INFREC01IDOCE1EINAME1EINEME1EELTH obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static INFREC01IDOCE1EINAME1EINEME1EELTH LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static INFREC01IDOCE1EINAME1EINEME1EELTH LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Text Line for Purchasing Info Record: Purchasing Org. Data
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class INFREC01IDOCE1EINAME1EINEME1EELTHE1EELTL : System.ComponentModel.INotifyPropertyChanged
    {

        private string tDFORMATField;

        private string tDLINEField;

        private INFREC01IDOCE1EINAME1EINEME1EELTHE1EELTLSEGMENT sEGMENTField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        private bool tDFORMATFieldSpecified;

        private bool tDLINEFieldSpecified;

        private bool sEGMENTFieldSpecified;

        /// <summary>
        /// Tag column
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 0)]
        public string TDFORMAT
        {
            get
            {
                return this.tDFORMATField;
            }
            set
            {
                if ((this.tDFORMATField != null))
                {
                    if ((tDFORMATField.Equals(value) != true))
                    {
                        this.tDFORMATField = value;
                        this.OnPropertyChanged("TDFORMAT");
                    }
                }
                else
                {
                    this.tDFORMATField = value;
                    this.OnPropertyChanged("TDFORMAT");
                }
            }
        }

        /// <summary>
        /// Text Line
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, Order = 1)]
        public string TDLINE
        {
            get
            {
                return this.tDLINEField;
            }
            set
            {
                if ((this.tDLINEField != null))
                {
                    if ((tDLINEField.Equals(value) != true))
                    {
                        this.tDLINEField = value;
                        this.OnPropertyChanged("TDLINE");
                    }
                }
                else
                {
                    this.tDLINEField = value;
                    this.OnPropertyChanged("TDLINE");
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public INFREC01IDOCE1EINAME1EINEME1EELTHE1EELTLSEGMENT SEGMENT
        {
            get
            {
                return this.sEGMENTField;
            }
            set
            {
                if ((sEGMENTField.Equals(value) != true))
                {
                    this.sEGMENTField = value;
                    this.OnPropertyChanged("SEGMENT");
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(INFREC01IDOCE1EINAME1EINEME1EELTHE1EELTL));
                }
                return serializer;
            }
        }

        [XmlIgnore()]
        public bool TDFORMATSpecified
        {
            get
            {
                return tDFORMATFieldSpecified;
            }
            set
            {
                tDFORMATFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool TDLINESpecified
        {
            get
            {
                return tDLINEFieldSpecified;
            }
            set
            {
                tDLINEFieldSpecified = value;
            }
        }

        [XmlIgnore()]
        public bool SEGMENTSpecified
        {
            get
            {
                return sEGMENTFieldSpecified;
            }
            set
            {
                sEGMENTFieldSpecified = value;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current INFREC01IDOCE1EINAME1EINEME1EELTHE1EELTL object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an INFREC01IDOCE1EINAME1EINEME1EELTHE1EELTL object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output INFREC01IDOCE1EINAME1EINEME1EELTHE1EELTL object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out INFREC01IDOCE1EINAME1EINEME1EELTHE1EELTL obj, out System.Exception exception)
        {
            exception = null;
            obj = default(INFREC01IDOCE1EINAME1EINEME1EELTHE1EELTL);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out INFREC01IDOCE1EINAME1EINEME1EELTHE1EELTL obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static INFREC01IDOCE1EINAME1EINEME1EELTHE1EELTL Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((INFREC01IDOCE1EINAME1EINEME1EELTHE1EELTL)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current INFREC01IDOCE1EINAME1EINEME1EELTHE1EELTL object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an INFREC01IDOCE1EINAME1EINEME1EELTHE1EELTL object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output INFREC01IDOCE1EINAME1EINEME1EELTHE1EELTL object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out INFREC01IDOCE1EINAME1EINEME1EELTHE1EELTL obj, out System.Exception exception)
        {
            exception = null;
            obj = default(INFREC01IDOCE1EINAME1EINEME1EELTHE1EELTL);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out INFREC01IDOCE1EINAME1EINEME1EELTHE1EELTL obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out INFREC01IDOCE1EINAME1EINEME1EELTHE1EELTL obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static INFREC01IDOCE1EINAME1EINEME1EELTHE1EELTL LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static INFREC01IDOCE1EINAME1EINEME1EELTHE1EELTL LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum INFREC01IDOCE1EINAME1EINEME1EELTHE1EELTLSEGMENT
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum INFREC01IDOCE1EINAME1EINEME1EELTHSEGMENT
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum INFREC01IDOCE1EINAME1EINEMSEGMENT
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum INFREC01IDOCE1EINAMSEGMENT
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum INFREC01IDOCBEGIN
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
    }
}
